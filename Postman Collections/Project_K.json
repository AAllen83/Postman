{
	"info": {
		"_postman_id": "0a858299-d011-4200-af32-829d216df942",
		"name": "Project K",
		"description": "Project K is an automated framework created to test API's & Webhooks for an application designed to help healthcare professionals and staffing agencies share documents, communication, etc. during the application, interview and onboarding process.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Talent",
			"item": [
				{
					"name": "GET - Professions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", profession_id)\r",
									"\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var name = attributes[\"name\"];\r",
									"pm.environment.set(\"profession_name\", name)\r",
									"\r",
									"console.log(length)\r",
									"console.log(profession_id)\r",
									"console.log(name)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "f9905d58-c984-496f-ae0a-13ce2626f516"
							}
						}
					],
					"id": "d318464c-bbf3-489d-9736-8de682c82149",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Specialties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var primary_specialty_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"primary_specialty_id\", primary_specialty_id)\r",
									"console.log(length);\r",
									"console.log(primary_specialty_id)"
								],
								"type": "text/javascript",
								"id": "328b5eed-19f5-489b-867e-4020e1bed584"
							}
						}
					],
					"id": "f642bc97-e9fc-474a-9ef7-ae35458e43a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "GET - Talent 404(Bad Talent ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bda06dd1-9db3-479b-b42a-9b5056a20927"
							}
						}
					],
					"id": "f1606024-3b38-4284-83d9-9e154ab72be3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}talents/69a7b4e8-9e59-45f3-8b61-1302c5cbdc2e"
					},
					"response": []
				},
				{
					"name": "GET - Talent 403(No Agency Talent Relationship)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden from access to talent\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a5468ca4-e6c7-459b-b833-a39e08311082"
							}
						}
					],
					"id": "40286df6-9e2d-48a0-a251-4d191f04de5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2ODEzNDA4MTMsImlhdCI6MTY3MzU2NDgxMywiaXNzIjoia2FtYW5hIiwianRpIjoiOWNkNDJkZDktMGRlOS00NWFmLWI1MTItOTk2NDAzZTI3OWUzIiwibmJmIjoxNjczNTY0ODEyLCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.tkpk1-BvjCxFzSIJh-huHwYp3qPkIVhxb9_l0_Sk62uZ5bk85omGwEKkMlDp6dFfbVkOiLdx2gJ6vW0cR9d-ow"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}talents/45f0caa3-c377-4ace-b549-376d78a3c7bf"
					},
					"response": []
				},
				{
					"name": "GET - Talent List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"\r",
									"pm.environment.set(\"talent_id\", jsonData.data[json.random][\"id\"]);\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(data.id).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "d1eb74e1-9dcc-448e-8778-ab6c869e0135"
							}
						}
					],
					"id": "98fdde6d-72bf-4d12-9c75-7effef0a3cd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?include=profession,primary_specialty,opportunity_preferences&email={{assignee}}",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences"
								},
								{
									"key": "email",
									"value": "{{assignee}}"
								},
								{
									"key": "phone_number",
									"value": "7189124575",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(using Email only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"id\"]).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "576bb38b-facf-4cdb-b80b-44987e67f0e8"
							}
						}
					],
					"id": "16d0e7a7-2d2f-410b-abd1-2f4e428c0d7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?email=adrian.allen@kamana.com",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "adrian.allen@kamana.com"
								},
								{
									"key": "phone_number",
									"value": "203-333-4567",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(using Phone # only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[0][\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[0][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "b48c6cf9-d63d-435f-8897-57b25dcabc20"
							}
						}
					],
					"id": "f385c701-6f01-445a-bb45-a2b723547337",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?phone_number=(342) 987-7932",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{assignee}}",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "(342) 987-7932"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(no parameters, 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email One of these search fields must be present in payload: [:email, :phone_number]\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "24eacf05-b722-4a45-a989-035f631b802c"
							}
						}
					],
					"id": "59dac537-d4b7-4d66-a1b5-dfc14b6183e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{assignee}}",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "646-333-4444",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No First Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0bc02984-71e5-4535-8be4-ae1f6b90c057"
							}
						}
					],
					"id": "e403793e-bdcc-4cce-8097-61bbadbc3a00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+400Bad@Kamana.com\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Last Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"last_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a30a22ed-9c8e-425c-ad2c-bd43304185bf"
							}
						}
					],
					"id": "ff8dba96-fdc6-4871-9c43-c2a75a3694e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"email\": \"adrian.allen+400Bad@Kamana.com\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "21b7cc68-9d85-448b-9fe8-3360c5f619da"
							}
						}
					],
					"id": "da8aed80-d3d0-4411-9dd0-ddb0987e8ccd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "42b8ae34-ed19-4470-b6c2-fdb79d4685b9"
							}
						}
					],
					"id": "12f709d3-cb22-46f8-9803-cb76a76ceeb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"{{assignee}}\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Profession ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6b2b4869-d43f-4794-982b-aa3a21d31497"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "8cf4d486-086d-4de6-a187-f5bcd83673da"
							}
						}
					],
					"id": "d3191618-5103-461e-9c19-4f181112e708",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"notification_preference\": \"email-always\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No specialty ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"primary_specialty_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0238d4e8-f0aa-4fe9-963b-7defbbc6d001"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "3a4da3b1-726e-4e09-aa9e-626b95de7a09"
							}
						}
					],
					"id": "eab3875a-18c6-4077-9e97-0787265a85bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"notification_preference\": \"email-always\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(unclaimed w/ in-app preference) 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"notification_preference is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9ae68f7c-8633-4e30-b76a-d247cb713288"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "d383333f-880c-4b50-adde-8ceaae74f68d"
							}
						}
					],
					"id": "eac186db-64c2-46a1-8110-147b7fbb3e4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"in-app\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(sms preference w/o mobile_number) - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "724a194c-39d6-459e-a83b-c940cd3f29b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "ec35a4db-f687-4b7a-8b42-2dd845b693f2"
							}
						}
					],
					"id": "9a211c34-db76-4332-9a64-76699538aa0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"sms\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "45ca6fa7-e08d-4ef5-8a2e-dbae891ff303"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "8e26024f-c362-4f95-9bcb-2abd68d899d5"
							}
						}
					],
					"id": "fde52c3e-97f9-4762-83cd-2eb1614bf30f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"API\",\r\n   \"last_name\": \"Test{{number}}\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(claimed w/ in-app preference)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id2', jsonData.data[\"id\"]);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is true\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(true);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.eql(\"in-app\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "f73939a9-647d-4676-af44-bb029bc55f41"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "49884730-a947-458b-98de-7cfd8bc0a536"
							}
						}
					],
					"id": "8fc712e3-53e3-4353-bd57-71177d4172ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": true,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"in-app\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(sms preference w/ mobile_number) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.eql(\"sms\");\r",
									" });\r",
									" pm.test(\"mobile_number doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"mobile_number\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "7bfdb1ad-ec88-4971-ad8f-a1f427fafc3f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "51a4532b-2f4c-4bdc-ba53-ec28f2c0e731"
							}
						}
					],
					"id": "81749788-4411-4c02-bbaf-4c7358231cc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"sms\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"mobile_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "ce6859a1-972b-419d-9c38-c725d40de2e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "6811ceee-0291-4e20-bb4f-256859be4f63"
							}
						}
					],
					"id": "8bf7217a-800a-47a6-a88b-d69548387cdf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/?include=relationships",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "include",
									"value": "relationships"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(data.id).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"opportunity preference id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.relationships.opportunity_preferences.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"opportunity preference type returns opportunity_preference\", function () {\r",
									" pm.expect(jsonData.data.relationships.opportunity_preferences.data[\"type\"]).to.eql(\"opportunity_preference\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "12524680-024e-4dcc-b3e5-0ba1a9bcf133"
							}
						}
					],
					"id": "d58b63fa-26b3-4d94-a0ba-196d226fb03e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}?include=profession,primary_specialty,opportunity_preferences",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Certifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "fe640a44-aecb-44d7-b33d-ad67f0e4ef7f"
							}
						}
					],
					"id": "346a24bd-6dec-4610-8fa7-3e3dbb40040c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/certifications",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"certifications"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Licenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "c34d0159-23d2-47b5-bea6-f012e1479f4e"
							}
						}
					],
					"id": "c418837a-2df8-4245-a91d-22f6b06c38cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/licenses",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"licenses"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Work History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "6e71855e-69e2-487c-9acc-ce3002975577"
							}
						}
					],
					"id": "6ef38f9c-b206-43f6-b48d-bd1b28ffd902",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/work_histories?include=references",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"work_histories"
							],
							"query": [
								{
									"key": "include",
									"value": "references"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Claimed Profile 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Cannot edit a claimed profile.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e50b2f4f-c30a-4554-8deb-e7c5a2654d36"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "3170100f-1706-4111-afd4-3170777e1311"
							}
						}
					],
					"id": "6ec6a0bc-6e50-4e9b-a931-ae6b4b437daa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"platform.user+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform{{number}}\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\", \r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id2}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id2}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Gender 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"gender is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9c2945d2-8f67-4c69-a1f4-627522de5338"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "c5eabe06-3150-4344-98fd-61af5546454e"
							}
						}
					],
					"id": "b60bd572-f6e1-47f7-a3d9-c8805b3eb6c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"gender\": \"anything\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Notification Preference 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"notification_preference is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "28f6ec68-a834-4c6a-9b23-150340dea2a7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "191bf2d3-c5c3-443b-8777-224ceab30f60"
							}
						}
					],
					"id": "7533f7db-23ff-49d9-aac3-1412c0be5b68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"Carrier Pigeon\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Primary Specialty ID 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"primary_specialty_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "255cbe86-0fa2-4da9-aae8-02bd719c4909"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "a8eab188-84b2-4434-8b01-54a32e2e4677"
							}
						}
					],
					"id": "5286b7f2-060e-4e79-b876-7468439f19b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"primary_specialty_id\": \"12345678-abcd-efgh-1234-abcdefghijkl\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Profession ID 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f2aec58a-b90b-4a64-8fa5-aae2003228c0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "fc93d622-bc99-4d2c-9757-408c0a25919b"
							}
						}
					],
					"id": "43e9ef05-d898-4018-8416-d1726e009410",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"profession_id\": \"12345678-abcd-efgh-1234-abcdefghijkl\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Phone Number 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b13072b6-2111-4965-87cf-27cbb99ec7ca"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "c6d1910f-66ee-4309-a224-e97a399516f7"
							}
						}
					],
					"id": "14f21de3-26dc-4483-98cd-59c4e63af635",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"phone_number\": \"1-234-567-8888-9999\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Preference SMS w/o Mobile Number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "17920c8d-854a-4f6c-bb56-094c4b41c013"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "841bf16c-3d38-46ed-bec3-746dce63991f"
							}
						}
					],
					"id": "afcd8f3e-d952-4f84-9b68-2b76e8821411",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"sms\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Preference SMS w/ Mobile Number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "2a76ab3b-0758-4274-a6d2-4d50ba0faac5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "44311160-dfb0-487c-b50e-eacac6ca1f71"
							}
						}
					],
					"id": "2a54280c-ad76-4670-855e-02f68212cf58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"sms\",\r\n   \"mobile_number\": \"{{PhoneNumber}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Update Personal Information) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bd90d1c8-d22b-47bf-9d53-6c5aa1d64288"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "27896614-c4a4-4dbc-95d0-6cffaabb3092"
							}
						}
					],
					"id": "35c8b5ea-7edc-417d-8752-e7f9c8117769",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"PlatformUpdate\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Talent & Relationship Webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Pfofile Update Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"profile\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"talent_id\"));\r",
									"})\r",
									"\r",
									"/*Tests for Relationship Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[1].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[1].event.type).to.include(\"relationship\");\r",
									"})\r",
									"pm.test(\"Relationship ID\", function () {\r",
									"    pm.expect(jsonData.data[1].event.body.id).to.eql(pm.environment.get(\"relationship_id\"));\r",
									"})\r",
									"\r",
									"/*Tests for Profile Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[2].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[2].event.type).to.include(\"profile\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[2].event.body.id).to.eql(pm.environment.get(\"talent_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ea0cca5a-db9b-42da-860e-477e65975aee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "4678780c-2f23-4856-b02b-b105788dac63"
							}
						}
					],
					"id": "817b6413-c3cb-411b-9f2b-4f80495dff76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=3",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "210edc69-0848-4399-bd8c-c00591e5ef55",
			"description": "**POST** - [https://staging.kamana.app/api/talents/](https://staging.kamana.app/api/talents/)\n\n**Body**:\n\n{  \n\"first_name\": \"\",  \n\"last_name\": \"\",  \n\"claimed\": boolean, **\\*Optional**  \n\"email\": \"\",  \n\"notification_preference\": \"\", **\\*Optional**  \n\"profession_id\": \"\",  \n\"primary_specialty_id\": \"\",  \n\"phone_number\": \"\", **\\*Optional**  \n\"gender\": \"\", **\\*Optional**  \n\"available_on\": \"\" **\\*Optional**  \n}\n\n**GET** - https://staging.kamana.app/api/talents/talent_profile_id"
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(agency id doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9e86e161-5cd9-44c5-b616-f5d66284c368"
							}
						}
					],
					"id": "2e7169fa-ae41-466f-8f60-53ed6a239643",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/abcd-1234-abcd-1234/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(invalid talent_profile_id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d1c476a3-81cd-4670-81c2-c11c1d7c9b4a"
							}
						}
					],
					"id": "06bc6ed6-0192-4bcc-9a58-30caccea6ffe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}z\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(primary_contact_email - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"bad_primary_contact_email\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6eb9da14-99f4-42a8-ba89-7af9f1a0f98a"
							}
						}
					],
					"id": "ee5cc8ba-cc4b-46c2-859f-a5ff34593157",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"doesnotexist@kamana.com\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"relationship_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "387fa2c4-0216-43e3-a492-d1a8679421dc"
							}
						}
					],
					"id": "3bdb54d5-38c3-4ccd-ab28-1d6a9950568e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(Relation exists - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profile_id has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b2b21faf-c14c-415c-8b4f-a5a5c8bf92e5"
							}
						}
					],
					"id": "0cbefa6e-cd7e-4994-9d1b-bd15f92c9b4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(agency id doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2fba1802-a032-473b-a428-a4ac2a5bb85f"
							}
						}
					],
					"id": "1906d29b-4fe9-4a06-9cef-19efd69a66e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/abcd-1234-abcd-1234/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(invalid talent_profile_email - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "309a1a9d-69d7-4435-a3a1-fbe8f211c27f"
							}
						}
					],
					"id": "45898d63-8a89-409e-8cba-9004ea81c73f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}z\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(primary_contact_user_id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "24c35130-bdea-4f06-b4f4-6dacb0b54e88"
							}
						}
					],
					"id": "0f6f4821-3a40-4729-96ed-eca242e7f47e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}z\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4ac2ea87-ed87-4526-ad43-2f0937d9bb7b"
							}
						}
					],
					"id": "94bac08f-1143-4c0f-89c8-6d986b8faa42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(Relationship exists - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profile_id has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c8406aa1-1bfc-4243-b3cd-686315f39a29"
							}
						}
					],
					"id": "3e4823fd-e775-45f2-a090-d50204e3bc9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, do not hire true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "6b542613-7a87-4c6e-a2a0-5da03407a15d"
							}
						}
					],
					"id": "7483d406-7768-4286-934f-832ed56b5923",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": true,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, do not hire true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "a272a2ac-f547-4823-a274-eda0e0c701cb"
							}
						}
					],
					"id": "36f760a6-f4b4-463b-8c66-2239e40d813a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"do_not_hire?\": true\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "bb94a0c6-825f-4de7-949a-ba76972e8c2c"
							}
						}
					],
					"id": "7f4da395-5095-466e-a610-c642bee03cae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "a446e118-911b-43b3-b8e0-9ec7415d2d2d"
							}
						}
					],
					"id": "1818d0ef-2d33-42a7-81a0-f41dc5a720c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(prospect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "131620c8-3f83-4db7-a287-e26c0db607e2"
							}
						}
					],
					"id": "eada5008-6b09-4a83-94b6-edf1f26d28fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"prospect\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(prospect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "c204a756-23a4-427d-b684-fb537c2b89b0"
							}
						}
					],
					"id": "24b72aee-485e-4acc-88b1-e6dc1fda469c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"prospect\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(engaged)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "5ef4880d-73eb-4d9f-8c9b-2d7454eb3f74"
							}
						}
					],
					"id": "40df130f-ac63-4b84-8d7a-577ed4b66ec4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"engaged\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(review status w/o sub_status 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "bd54d874-7ab6-4553-afb5-5c09f1e0d7c4"
							}
						}
					],
					"id": "08c00c60-2877-4bb8-920a-644387147752",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"review\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(review)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "4b6da886-a5a2-40b0-9df0-081bdae37c6d"
							}
						}
					],
					"id": "a5625720-2e1e-41fc-baff-dea66b9668ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"review\",\r\n   \"sub_status\": \"engaged\",\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(archived)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "9b4e135d-9371-4451-876d-cb4b825d5e9b"
							}
						}
					],
					"id": "3c223392-f2e8-417a-8516-bc14a96b3b65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"archived\",\r\n   \"sub_status\": \"review\",\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(invalid status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "77e2688d-2747-47c3-8e65-cef48117b5df"
							}
						}
					],
					"id": "28378a83-1462-4262-aa1d-d348a4adcc42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"invalid\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, invalid user ids 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "887b3203-1606-4cbc-aa51-c00803d891ab"
							}
						}
					],
					"id": "682b4b43-3a5d-4fab-bade-bddb2a2cdfbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303z\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303z\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Relationship",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "95907c29-4679-43e7-820b-85c3460cff7f"
							}
						}
					],
					"id": "cb926b4f-7a05-42ab-b12d-359f49fd50bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Relationship(400 Invalid Relationship ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "5a93ddb1-8ffd-4e90-b2d0-75a22d9cc403"
							}
						}
					],
					"id": "7c1c7086-1f8f-4c61-bac3-2e42c50675b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/z4856237b-4957-44ee-a2e2-2ac218d4ef5c"
					},
					"response": []
				},
				{
					"name": "GET - Relationship(404 No Relationship w/ account_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "ec4e1601-7f09-4594-8c1b-b0d6c7bcb517"
							}
						}
					],
					"id": "8704e676-dd70-4b9b-9621-3f5afb870d53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/b6d4da8a-a566-4872-82f6-e6faf126461c"
					},
					"response": []
				}
			],
			"id": "af902880-0c7b-4aa3-be44-a9dc22044bf1"
		},
		{
			"name": "Engagements",
			"item": [
				{
					"name": "GET - Professions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"\r",
									"let length1 = jsonData.data.length;\r",
									"var json1 = {\r",
									"  random: Math.ceil(Math.random() * length1)\r",
									"}\r",
									"pm.environment.set(\"profession_id1\", jsonData.data[json1.random][\"id\"]);\r",
									"console.log(length1);\r",
									"\r",
									"let length2 = jsonData.data.length;\r",
									"var json2 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id2\", jsonData.data[json2.random][\"id\"]);\r",
									"console.log(length2);\r",
									"\r",
									"let length3 = jsonData.data.length;\r",
									"var json3 = {\r",
									"  random: Math.ceil(Math.random() * length3)\r",
									"}\r",
									"pm.environment.set(\"profession_id3\", jsonData.data[json3.random][\"id\"]);\r",
									"console.log(length3);\r",
									"console.log(profession_id)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "19fc0a79-861f-4bbc-a03a-f50a22d7fac1"
							}
						}
					],
					"id": "bc7ef70f-a37f-4264-90f8-e94c8b30f1c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Specialties Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var primary_specialty_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"primary_specialty_id\", primary_specialty_id);\r",
									"console.log(length);\r",
									"console.log(primary_specialty_id)"
								],
								"type": "text/javascript",
								"id": "86839d49-7c14-41a1-9bac-1badab0ea950"
							}
						}
					],
					"id": "c239d273-0a59-46cf-8be3-4a0226255aee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "GET - Requisitions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var job_requisition_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"job_requisition_id\", job_requisition_id)\r",
									"console.log(length)\r",
									"console.log(job_requisition_id)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "13407570-4345-4f97-8a16-7f64f042aea3"
							}
						}
					],
					"id": "b9c2ce80-93fb-44d1-a68f-5f26ed364581",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);"
								],
								"type": "text/javascript",
								"id": "c421d8cb-d48f-450f-9505-8425e99a1b0a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "0968616f-4636-4473-82af-d8f22d5078e5"
							}
						}
					],
					"id": "31febd76-4d8a-461c-b6d3-0edb14688321",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Engagements - Relationship ID from different token 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "3db6ad7c-f091-483f-9bbf-a98b0350984f"
							}
						}
					],
					"id": "f42f1162-3bd3-4079-86dc-c180d05cd36b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"97435a3b-6858-4788-b1b1-9afe9a4bb5a9\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements - Unrelated Job Req ID 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "9e61c5be-121f-47db-95ea-533770794b10"
							}
						}
					],
					"id": "733bc6d7-9b04-42c4-8060-36c7aa845b33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"a0990a44-467f-4ff8-9f0d-9c89d75441de\",\r\n  \"job_requisition_id\": \"ca26de92-68d7-48b8-a1d2-b07efdc2a758\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements - No Assignee 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "19900f67-270d-47a9-a563-07dde7a80774"
							}
						}
					],
					"id": "ca0b8318-0fa0-4751-ba60-c2dd6459322a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"a0990a44-467f-4ff8-9f0d-9c89d75441de\",\r\n  \"job_requisition_id\": \"c41132ff-6e2a-477f-bd8f-ea8daf01ade6\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "17005653-bf28-4e54-9105-560e01be9317"
							}
						}
					],
					"id": "6a84ae43-383f-476a-877a-efcd5d271637",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"{{relationship_id}}\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);"
								],
								"type": "text/javascript",
								"id": "0e8d303b-4634-4020-8036-380ee719c826"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 1 second delay */\r",
									"setTimeout(() => {}, 1000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "c56e56b2-a342-44fe-a933-98f5689a889c"
							}
						}
					],
					"id": "0e108291-6a68-43a3-b965-17e109c112e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Engagements - w/ optional fields 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"pay: \"+ randomPay);\r",
									"\r",
									"/*regular hourly rate*/\r",
									"const rate = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomRate = rate[Math.floor(Math.random() * rate.length)];\r",
									"pm.variables.set('rate', randomRate)\r",
									"console.log(\"rate: \" + randomRate);\r",
									"\r",
									"/*random stipend generator*/\r",
									"const stipend = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"const randomstipend = stipend[Math.floor(Math.random() * stipend.length)];\r",
									"pm.variables.set('stipend', randomstipend)\r",
									"console.log(\"stipend: \" + randomstipend);\r",
									"\r",
									"/*random per diem generator*/\r",
									"const diem = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"const randomdiem = diem[Math.floor(Math.random() * diem.length)];\r",
									"pm.variables.set('diem', randomdiem)\r",
									"console.log(\"per diem: \"+ randomdiem);\r",
									"\r",
									"/*random travel reimbursement generator*/\r",
									"const travel = ['1000', '2000', '3000', '4000', '5000'];\r",
									"const randomtravel = travel[Math.floor(Math.random() * travel.length)];\r",
									"pm.variables.set('travel', randomtravel)\r",
									"console.log(\"travel: \" + randomtravel);\r",
									"\r",
									"/*engagement start and end dates*/\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var engagement_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"    pm.variables.set('engagement_starts_on', engagement_starts_on)\r",
									"\r",
									"var engagement_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"    pm.variables.set('engagement_ends_on', engagement_ends_on)\r",
									"\r",
									"console.log(\"engagement_starts_on: \" + engagement_starts_on);\r",
									"console.log(\"engagement_ends_on: \" + engagement_ends_on);"
								],
								"type": "text/javascript",
								"id": "787bbcc7-bdf1-4aee-a7d6-ddbc29ae12e4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "df854d79-1da4-4de7-bded-8580170f40ae"
							}
						}
					],
					"id": "171c1cf6-19ac-42f1-977d-ddb069719643",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_contract_id\": \"{{contract_id}}\",\r\n  \"relationship_id\": \"{{relationship_id}}\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"fast_start\": false,\r\n  \"weekly_gross_pay\": \"{{pay}}\",\r\n  \"regular_hourly_rate\": \"{{rate}}\",\r\n  \"weekly_housing_stipend\": \"{{stipend}}\",\r\n  \"weekly_per_diem\": \"{{diem}}\",\r\n  \"travel_reimbursement\": \"{{travel}}\",\r\n  \"compensation_comments\": \"Platform Test\",\r\n  \"starts_on\": \"{{engagement_starts_on}}\",\r\n  \"ends_on\": \"{{engagement_ends_on}}\",\r\n  \"contract_length\": 0,\r\n  \"has_pay_package?\": true,\r\n  \"hours_per_week\": 0,\r\n  \"shift_end_time\": 0,\r\n  \"shift_start_time\": 0,\r\n  \"status\": \"pending\",\r\n  \"status_flow\": \"agency\",\r\n  \"subscriber_ids\": [],\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "Create Engagement Webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8166411e-f85e-468a-8f48-6c119df14e01"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "5344c28a-93b0-49d5-bea7-ab39818dcef0"
							}
						}
					],
					"id": "2c2810df-f0b6-4c20-804e-d6343d22bb3e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "989f446f-3a9f-4ea0-aed1-09a107b7ef32"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "690f2d59-35b2-460a-9c3a-03a14bb37405"
							}
						}
					],
					"id": "6d3ab735-1801-4144-8fc6-fb9907efdd66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Contract(all fields entered - 201) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contract_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "477179bf-0bb0-40c5-b684-cef4c6df517a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "a35ed8c7-6fc0-4470-8fc2-cc9f7f99388d"
							}
						}
					],
					"id": "1e93e499-2191-41d8-aac0-39fb13514594",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": \"3.50\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET Engagements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"/*pm.environment.set(\"extension_id\", jsonData.data[0][\"id\"]);*/\r",
									"var attributes = jsonData.data.attributes;\r",
									"var starts_on = attributes[\"starts_on\"];\r",
									"var ends_on = attributes[\"ends_on\"];\r",
									"pm.environment.set('starts_on', jsonData.data.attributes[\"starts_on\"]);\r",
									"pm.environment.set('ends_on', jsonData.data.attributes[\"ends_on\"]);\r",
									"//pm.environment.set(\"engagement_starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('extension_start0', moment(ends_on).subtract(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end0', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start', moment(ends_on).add(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start1', moment(ends_on).add(2, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end1', moment(ends_on).add(6, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start2', moment(ends_on).add(3, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end2', moment(ends_on).add(1, 'years').format((\"YYYY-MM-DD\")));\r",
									"\r",
									"console.log(starts_on);\r",
									"console.log(ends_on);"
								],
								"type": "text/javascript",
								"id": "b5b369fc-de8c-4663-addc-5262d4332431"
							}
						}
					],
					"id": "7e44dc2a-240d-42b9-99a5-57d607c8767e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Start Date Update 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1; //constant value of years that will be added\r",
									"const monthsInTheFuture = 1; //constant value of months that will be added\r",
									"const daysInTheFuture = 14; //constant value of days that will be added\r",
									"const yearsInThePast = 1; //constant value of years that will be subtracted\r",
									"const monthsInThePast = 1; //constant value of months that will be subtracted\r",
									"const daysInThePast = 1; //constant value of days that will be subtracted\r",
									"\r",
									"var starts_on = moment()\r",
									"    .add(daysInTheFuture, 'days').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"starts_on: \" + starts_on); //displays value in console log\r",
									"\r",
									"pm.environment.set(\"starts_on\", starts_on);"
								],
								"type": "text/javascript",
								"id": "4c5bfece-a652-4737-8ab3-823a6d351b0c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "9be82644-7e67-40ba-bd43-ac2746d0001c"
							}
						}
					],
					"id": "31311302-bc5b-4391-8738-9f2b7a750710",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"starts_on\": \"{{starts_on}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "cbd8fd48-c486-4e24-8456-838e71b16c23"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "552a25d3-004d-4bf9-9ffc-30b11c37db65"
							}
						}
					],
					"id": "7ef9269e-d027-4916-9cb5-e73ad18f9530",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Pending to Qualifying",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "755f9f94-7a6b-443e-ae0d-8444c80fd50e"
							}
						}
					],
					"id": "d7cc7cfa-197f-4cf0-b400-960d1660017f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"qualifying\",\r\n  \"sub_status\": \"pending\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Ready to Submitted(Skipped Ready, 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"status Invalid status transition: qualifying => submitted. Valid transition statuses: [:pending, :ready, :completed] \");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "451eaa90-ef16-44a1-9ab6-c013b2e39205"
							}
						}
					],
					"id": "893981ff-23d1-405f-8da4-f7744f5ec81d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"2023-12-31\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"submitted\",\r\n  \"sub_status\": \"ready\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Qualifying to Ready",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7f5d942e-27ff-4765-a3fb-5ff38c5aaff4"
							}
						}
					],
					"id": "01be4afe-3a74-4837-94b9-28c70fe4a2d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"ready\",\r\n  \"sub_status\": \"qualifying\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Ready to Submitted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f6a99408-7aa5-4273-b0d6-3e8a1199f376"
							}
						}
					],
					"id": "db942363-90ac-4e09-b566-2c1b5276a10f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"submitted\",\r\n  \"sub_status\": \"Ready\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Submitted to Interviewing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7a03163a-ac3e-448b-a6e0-e43eee59f166"
							}
						}
					],
					"id": "8d25ecf6-4bf9-4365-ae3d-e4a211961dee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"interviewing\",\r\n  \"sub_status\": \"submitted\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Interviewing to Offered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "674ba535-8290-4cbb-8d42-3e723e3105fd"
							}
						}
					],
					"id": "177ae924-2613-482e-9fad-1e6d44e61db0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"offered\",\r\n  \"sub_status\": \"interviewing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Offered to Placed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "26d45df7-6853-47e9-bf74-3dde44b4ab33"
							}
						}
					],
					"id": "b0d67436-6a59-48f1-8b43-dad3eac5cec8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"placed\",\r\n  \"sub_status\": \"offered\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Placed to Credentialing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "956f4f6b-28f7-4609-a680-ba77129adb43"
							}
						}
					],
					"id": "0428cdc1-1736-44d4-9d2b-3439b33be1e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Testing\",\r\n  \"status\":\"credentialing\",\r\n  \"sub_status\": \"offered\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Credentialing to Credentialed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b24fbeb9-436d-4017-ac89-5e628ac2db40"
							}
						}
					],
					"id": "74af6059-8f26-4af1-9ff6-3080158112b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"credentialed\",\r\n  \"sub_status\": \"credentialing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Credentialed to Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "35300b76-77b2-4814-8764-38b5f065be3c"
							}
						}
					],
					"id": "cc619204-bc02-45ea-a719-8d706fa9fdc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"cleared\",\r\n  \"sub_status\": \"credentialed\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Cleared to Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "42441c36-88c2-4646-b7d0-5e9b0e3bc91f"
							}
						}
					],
					"id": "5411698a-6bc9-4dcc-9d6f-e5ce90913350",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"active\",\r\n  \"sub_status\": \"cleared\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete(Blank Sub Status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"null value where string expected\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "210d04af-aaff-42b3-b3cf-c9a115b5455d"
							}
						}
					],
					"id": "92bd4178-1f8b-47d3-9a55-906abb1e1c80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"complete\",\r\n  \"sub_status\": null,\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete(Invalid Sub Status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"null value where string expected\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1fa9b077-b744-4ac1-8c62-38ac888182af"
							}
						}
					],
					"id": "da94dd55-42f5-4f76-bb01-b641013ac3de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": null,\r\n  \"status\":\"complete\",\r\n  \"sub_status\": \"testing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bd4c0550-a532-41d5-8d8b-714aaa6e7c9a"
							}
						}
					],
					"id": "d8785c64-b9c8-436d-bfec-071ffc9d00ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"complete\",\r\n  \"sub_status\": \"cleared\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d2245ff6-400e-4b6c-962e-ff9058eb5f70"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "dabcaa67-63e7-4862-871b-206aa96858f4"
							}
						}
					],
					"id": "2ff70ea9-c974-460e-929e-c0f5e664b6f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber ID 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "9fad8d9e-7ee1-4c43-9fc7-b7fdacaeb329"
							}
						}
					],
					"id": "ce77acf4-c2ae-4b31-a893-2b6a7ce8b6e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{account_id}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "00fab719-fb0f-4470-adc8-9a507cd00b69"
							}
						}
					],
					"id": "0bb50b64-6ff1-4f84-b181-22ab77851e21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{account_id}}\",\"{{account_id2}}\",\"{{account_id3}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs Clear list 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"[]\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1eeaa3d1-e996-4d1a-b544-a3ed077f0885"
							}
						}
					],
					"id": "5e3821ea-d5d5-4fec-a80a-2fa8540cefcb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": []\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8e53556e-1df5-4239-84ad-d7f2459313fd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "83218b0c-5faf-47e0-86c7-d54be5faba4d"
							}
						}
					],
					"id": "f6e594e6-d192-4d10-8e98-fdd22bb14177",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs (No User Found 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"subscriber_ids no user found\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4712e594-acf7-4af6-a800-3eaabad68da8"
							}
						}
					],
					"id": "c39d8db8-c60b-4a77-a9f8-9a25962c0002",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{engagement_id}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs (Invalid UUID 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"subscriber_ids must be an array of valid UUIDs\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0b3a66be-8e09-4213-83e9-f8e2a672bbb2"
							}
						}
					],
					"id": "226e08c8-8773-4ada-879b-c1c731868691",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"1234-abcd\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				}
			],
			"id": "02f76e40-7668-4939-9df0-e26991e8108f",
			"description": "**POST -** https://staging.kamana.app/api/talents/\n\nEndFragmen\n\n**Body:**\n\n{  \n\"relationship_id\": \" \",  \n\"job_requisition_id\": \" \",  \n\"assignee\": \"email address\",  \n\"weekly_gross_pay\": \"\", **\\*Optional**  \n\"regular_hourly_rate\": \" \", **\\*Optional**  \n\"weekly_housing_stipend\": \" \", **\\*Optional**  \n\"weekly_per_diem\": \" \", **\\*Optional**  \n\"travel_reimbursement\": \" \", **\\*Optional**  \n\"compensation_comments\": \" \", **\\*Optional**  \n\"starts_on\": \"YYYY-MM-DD\", **\\*Optional**  \n\"ends_on\": \"YYYY-MM-DD\" **\\*Optional**  \n}\n\n**GET -** https://staging.kamana.app/api/engagements/**engagement_id**\n\n[**PUT**EndFragment](https://staging.kamana.app/api/engagements/engagement_idPUTEndFragmentPUT)\n\n**PUT** - https://staging.kamana.app/api/engagements/**engagement_id**\n\n**Body:**\n\n{  \n\"compensation_comments\": \"Last day of the month\",  \n\"contract_length\": 10,  \n\"ends_on\": \"2023-10-01\",  \n\"hours_per_week\": 32,  \n\"job_requisition_id\": \"819ec0ed-e117-4dda-ab63-0e239c73815f\",  \n\"profile_id\": \"43ec9b11-dd46-4246-89ee-a7e94e0dd6db\",  \n\"regular_hourly_rate\": \"110\",  \n\"shift_end_time\": 15,  \n\"shift_start_time\": 9,  \n\"starts_on\": \"2023-01-01\",  \n\"status_reason\": \"testing\",  \n\"status\":\"pending\",  \n\"sub_status\": null,  \n\"travel_reimbursement\": \"1000\",  \n\"weekly_gross_pay\": \"2500\",  \n\"weekly_housing_stipend\": \"500\",  \n\"weekly_per_diem\": \"400\"  \n}"
		},
		{
			"name": "Engagement Extension",
			"item": [
				{
					"name": "GET Engagements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"/*pm.environment.set(\"extension_id\", jsonData.data[0][\"id\"]);*/\r",
									"var attributes = jsonData.data.attributes;\r",
									"var ends_on = attributes[\"ends_on\"];\r",
									"//pm.environment.set(\"engagement_starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('extension_start0', moment(ends_on).subtract(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end0', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start', moment(ends_on).add(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start1', moment(ends_on).add(2, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end1', moment(ends_on).add(6, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start2', moment(ends_on).add(3, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end2', moment(ends_on).add(1, 'years').format((\"YYYY-MM-DD\")));\r",
									"\r",
									"console.log(ends_on);"
								],
								"type": "text/javascript",
								"id": "e2b864cc-1eee-422a-9ef3-f4bfcd16d831"
							}
						}
					],
					"id": "393e839a-ac91-4507-89a0-4d881a73fc93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "POST Extension(Starts before end of engagement)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4bbaf066-6305-4c7c-ae46-8d1c712e2178"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on must be after the Engagement end date\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3ea95274-be96-46a1-b6fc-596aa0faddde"
							}
						}
					],
					"id": "f796579c-2c2b-45fa-8b40-12e9f9a8dec1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start0}}\",\r\n    \"ends_on\": \"{{extension_end0}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension No start date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c892ee08-07d4-413c-9e3a-d57c2cb26aba"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "42ffd843-f7f5-421f-8d05-6c7180d62885"
							}
						}
					],
					"id": "68e19a79-b83e-45dd-88ed-265153157ce4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension No end date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc7f70d7-32e8-4273-8ea7-d3993bdd2a5c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6470b72d-518a-45ed-b38c-d0d5ee103139"
							}
						}
					],
					"id": "be3d5d60-e710-42e0-a322-b67df462c499",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 2;\r",
									"const daysInTheFuture = 3;\r",
									"const durationInDays = 7;\r",
									"\r",
									"const extension_start_at = moment()\r",
									"    .add(yearsInTheFuture, 'years')\r",
									"    .add(monthsInTheFuture, 'months')\r",
									"    .add(daysInTheFuture, 'days')\r",
									"\r",
									"extension_end = moment()\r",
									"    .add(yearsInTheFuture + yearsInTheFuture, 'years')\r",
									"    .add(monthsInTheFuture, 'months')\r",
									"    .add(daysInTheFuture, 'days')\r",
									"\r",
									"pm.environment.set(\"extension_start\", extension_start_at.format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set(\"extension_end\", extension_end.format((\"YYYY-MM-DD\")));\r",
									"\r",
									"//console.log(\"extension_start: \" + extension_start_at.format((\"YYYY-MM-DD\")));\r",
									"//console.log(\"extension_end: \" + extension_end.format((\"YYYY-MM-DD\")));\r",
									"\r",
									"//const date = moment();\r",
									"//pm.environment.set(\"date\", date.format((\"YYYY-MM-DD\")))\r",
									"//extension_start.format((\"YYYY-MM-DD\"));\r",
									"//extension_end.format((\"YYYY-MM-DD\"));\r",
									"\r",
									"//console.log('moment');"
								],
								"type": "text/javascript",
								"id": "eb79d5dd-e330-49c9-a193-02d19135e38f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"extension_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data.attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1; //constant value of years that will be added\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"\r",
									"var extension_start2 = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var extension_end2 = moment()\r",
									"    .add(monthsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"extension_start2: \" + extension_start2); //displays value in console log\r",
									"console.log(\"extension_end2: \" + extension_end2); //displays value in console log\r",
									"\r",
									"pm.environment.set(\"extension_start2\", extension_start2);\r",
									"pm.environment.set(\"extension_end2\", extension_end2);"
								],
								"type": "text/javascript",
								"id": "074295cc-c8ad-4760-85c4-d3420dcc840b"
							}
						}
					],
					"id": "a60b1b98-b646-4109-88fd-30bb34906c0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\",\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "GET Extensions 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8c7e07a3-16d5-4316-bb67-5b6ece563203"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4435310b-3516-4a72-bd65-51eb2a02df2c"
							}
						}
					],
					"id": "61066424-b468-4de6-aa55-2cbf3a171a71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/1a82e944-b9fa-4ee4-b67b-97c27aace40A/extensions"
					},
					"response": []
				},
				{
					"name": "GET Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "309cfbad-e170-42a0-9d6e-0a9402590b83"
							}
						}
					],
					"id": "2662d193-4204-4276-9cc4-6ece5c412f25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions"
					},
					"response": []
				},
				{
					"name": "GET Extension 404 Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e634c9f3-518e-44d8-99d7-70373624240d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a6aaa97f-a926-4fcf-b4a9-668813056697"
							}
						}
					],
					"id": "4f96385d-2131-4d6b-946e-c75caaad7f5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions/6a661041-dda9-4f77-bbee-e2d8f74de37A"
					},
					"response": []
				},
				{
					"name": "GET Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2fced662-33a6-424d-8720-b1ebf335c912"
							}
						}
					],
					"id": "de7575e6-4e77-40ec-a57b-8a6c98e04dc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension start after ends_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on must be after the start date\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4b05084b-91ef-4266-94bb-339f8d342c0f"
							}
						}
					],
					"id": "b8d4eac3-3ab5-4e9a-a190-3d7a7eaffc01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_end}}\",\r\n    \"ends_on\": \"{{extension_start}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension starts_on invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c52d9f7d-f89d-4bd0-8b77-4ac2eff94835"
							}
						}
					],
					"id": "00542a9a-145d-4df4-92fc-2bed9f6ba8f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"2023-00-01\",\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension ends_on invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f2707761-576d-4d16-8f99-40c8f1e06a64"
							}
						}
					],
					"id": "467416c3-c744-4e9b-b650-409df209e4c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\",\r\n    \"ends_on\": \"2023-00-31\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension Update starts_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0ca7cfba-d3b5-4e06-9f41-9045ae61cf00"
							}
						}
					],
					"id": "d0f4d809-9ba3-4037-ba91-96ab3427814d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start1}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension Update ends_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4e0b5978-c778-478c-917d-b0c30dd0b7e1"
							}
						}
					],
					"id": "491519e9-32af-49cd-af20-2c7c22a412a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ends_on\": \"{{extension_end1}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f4af42cf-68a8-46ff-866b-52ba5d43a79c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e9d77843-dd1d-4c93-b425-ed094393327b"
							}
						}
					],
					"id": "0d46872e-e3ee-46a8-aae9-9cbdb9da2641",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start2}}\",\r\n    \"ends_on\": \"{{extension_end2}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5f585b8f-cd03-4670-95ae-07069eb55f01"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b124cec4-c105-42de-bfc7-76a1f630824a"
							}
						}
					],
					"id": "19a5f688-e5c6-46db-9d2c-515772791b90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start2}}\",\r\n    \"ends_on\": \"{{extension_end2}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e7d8e324-c12e-490a-96a6-75740af98fb7"
							}
						}
					],
					"id": "6eb60ca5-7629-40e4-ba80-5ce48bb5c00f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Extension(404 for already deleted extension)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "44cee17b-da58-44e2-91ff-0c136ac03dbf"
							}
						}
					],
					"id": "c6281d76-15f5-4e66-8550-e39b5e91986f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				}
			],
			"id": "302f6750-7aa9-4212-a987-ccff5e805732"
		},
		{
			"name": "Engagement Links",
			"item": [
				{
					"name": "POST - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "8460aa31-fe58-434e-9692-706cd632527f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6e3e80ea-e51a-46ea-aa0b-f1988fa3691f"
							}
						}
					],
					"id": "49f5b351-3137-4526-951f-d8f7cd00a0f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\",\r\n  \"label\": \"Platform Url{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(blank url  - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "991adff2-f7b2-4df1-ae1d-27a4ad06d6ff"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ab393ba4-fac4-49a4-908b-ca4477c2ce21"
							}
						}
					],
					"id": "d4a9c6ff-b005-4f83-a9b3-cecbd3f05f3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": null,\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(no url  - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2e854a3f-2859-4aea-a831-de27dd3c3fb2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "49d64f7a-dab2-471e-89d5-261da17cdd59"
							}
						}
					],
					"id": "24c61d3e-a565-40fe-853b-3dd1b83b2671",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(blank label  - 200)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "74c09fea-7088-4e62-b6e9-8d651b61b499"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9feeeb10-a8b6-4aef-8a58-e8846ea1c20f"
							}
						}
					],
					"id": "f282fd4b-5977-40b6-ba1b-30bcef5fd707",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "ebca6ccf-0c4c-422b-8001-d4582309dc68"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_link_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "9fffb639-9231-4c2b-b38f-c7d06ee025a0"
							}
						}
					],
					"id": "6928655e-2a54-4492-befc-538c7625161b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\",\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "PUT - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "b8d2f331-1a72-4283-9fa5-92a15fc82ab0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "150b0bf3-25b3-475d-9b0c-a1dc7fe84fac"
							}
						}
					],
					"id": "92f54270-8703-4f2b-9eaf-fdec2e921d2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\",\r\n  \"label\": \"Platform Url{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "eb546dc3-5cac-4a1e-80c3-8034980b5c8a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9e1c8209-cc49-4ad7-a4a7-2b9c82fc68ad"
							}
						}
					],
					"id": "2b44a8ea-f276-473a-a9df-a508c52cef0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\",\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "d1a2805a-0e62-4251-ba6b-3e1a64f72687"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6fe62d00-6fc9-4621-af09-0af6d31e77ec"
							}
						}
					],
					"id": "ea6c9f9c-7ab8-4db4-80bd-013e8f98554a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "b6ab892b-266a-4b6a-8d7e-31c80108a0ca"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a0ec601e-59df-416f-af99-8f8210dd88ab"
							}
						}
					],
					"id": "354bcc37-29da-43ca-b767-b12a37ecd493",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2e5f0f79-d843-4732-812c-8d888b7f71a1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "833e36d7-4634-4320-a9b3-ea67102191d9"
							}
						}
					],
					"id": "32af6070-4738-45c8-abb2-1c097ecdeb66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "967b0b2f-09d6-4326-b120-b1479855957a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4f5b1d60-0be8-4588-a217-88afef2a2d50"
							}
						}
					],
					"id": "517a268c-969d-4390-9572-4ad55243a47a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Links(Invalid engagement id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6f911ed7-4067-44d2-82b1-36425fc6ed1b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "27d9aa70-b189-4536-8a40-18013dbe641d"
							}
						}
					],
					"id": "19c461a5-eabe-48ee-b202-3e908ea04e91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}z/links"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f02ef0e7-0dfe-427b-91e3-a95339bc5c0f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "988c9267-47d4-4b29-ac66-d60ddc80e8ce"
							}
						}
					],
					"id": "ebd06ca0-101d-4f47-b013-9812887149d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link(invalid engagement id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5ed7d36f-eaf2-40b3-9723-9dee285a38a7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"engagement_id not found\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "cb6258b0-a030-4bf5-942c-be7f558039aa"
							}
						}
					],
					"id": "8b1c4726-3105-4cf8-94fa-d2ac76e6f857",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/abcd-1234-efgh-5678/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link(invalid engagement link id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9056c094-39f0-49c3-912d-3aa644fba141"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "bd80834d-3bd1-442d-9841-1d7de9b12336"
							}
						}
					],
					"id": "243d074c-1fc5-4cb7-a623-bb46c0eab128",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/z{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "DELETE - Delete Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f64b74e1-601d-4dad-89b5-3a0d4d010f2a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8e3b91b3-64e1-4400-861b-9880c1995ce0"
							}
						}
					],
					"id": "58441d7e-e108-40ef-9d64-038c78f274bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "DELETE - Delete Engagement Link(link already deleted - 404)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8cbe879a-1d27-4eec-bb25-bca4dadaa759"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"}) "
								],
								"type": "text/javascript",
								"id": "48cd5240-b983-4a4a-9202-a06dc59c22cc"
							}
						}
					],
					"id": "864a2c93-88c8-4b05-961d-831c4346faf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				}
			],
			"id": "b3d5791c-f501-43e0-9959-35188ae8bd6d"
		},
		{
			"name": "Engagement Notes",
			"item": [
				{
					"name": "GET - Engagement Notes Collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "496125f2-92d4-418b-9006-6c506531f180"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5f3bca75-ff76-4542-8cf3-8d64940c8368"
							}
						}
					],
					"id": "cf72c9ea-19f2-4507-b071-218b4ea4de34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/notes"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ba9cccac-b85a-4104-b46c-607f42ee487d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b83f047f-dcdc-4305-b4e3-3acd457e407b"
							}
						}
					],
					"id": "ce323a9d-9727-4cee-86d5-0c8f3a4fb9a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/notes/{{note_id}}"
					},
					"response": []
				}
			],
			"id": "c14ef7a0-08ce-4227-b97f-066d9e91ac46"
		},
		{
			"name": "Engagement Rquirements",
			"item": [
				{
					"name": "GET - Engagement Requirements Collections",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "90e2e23d-e1e9-4952-9afb-bf9250bf493c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var data = jsonData.data[json.random];\r",
									"var id = data[\"id\"];\r",
									"pm.environment.set(\"engagement_requirement_id\", id)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"engagement_requirement_id: \"+id)"
								],
								"type": "text/javascript",
								"id": "f6f206b4-ed8e-4b2c-ad40-7c504fc4657a"
							}
						}
					],
					"id": "dcd40da7-2aa2-4067-94f8-6f8a1001d584",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Requirement",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5cb2591a-5b0e-46ee-9f41-231c12f76706"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "140d114c-41c0-4023-a526-fe18e53ffa50"
							}
						}
					],
					"id": "254c9014-8aa2-4a09-92e6-c176f23766d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg5MDQ4OTgsImlhdCI6MTY3MTEyODg5OCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzBkNDYwMGEtMjM5ZC00MGVmLTk5YzItYmI4ZWNjNWQzMmUzIiwibmJmIjoxNjcxMTI4ODk3LCJzdWIiOiJmMDM1NWJlNy1mMGNlLTQ3MmEtOGM0ZC01YjBiY2MzNTdhZDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiM2U0YjEwOGQtMWRlMi00MGU4LTg0YjEtMDJjMTMyYjk2ZjE0In0.SNl57W9A-J6qsb_d7Ws2_ODN7o4Idmb0t7uRLB7IiL9ZPz-zwQ-ugsYdkZR_jHP0iQ8ZMYO0rBM227GWvm4FhQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}"
					},
					"response": []
				}
			],
			"id": "0981eff8-aadd-45e0-a77b-08dc28417da1"
		},
		{
			"name": "Engagement Rquirements Notes",
			"item": [
				{
					"name": "GET - Engagement Requirements Notes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "44c2a2f8-a11d-4667-a36b-65a276aae795"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "46d55106-0aab-43f0-b6f8-d709a9d7ef78"
							}
						}
					],
					"id": "e7a1a8fe-f392-4628-8056-d327ff4b6a09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}/notes"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Requirement Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e43bd8f4-bbe8-4082-b412-06dcd6efaaa1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "59a53ed5-cca0-4ef0-9476-860f08346a5d"
							}
						}
					],
					"id": "3f20634e-698f-48ef-a4d8-cbd3e4ae42ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg5MDQ4OTgsImlhdCI6MTY3MTEyODg5OCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzBkNDYwMGEtMjM5ZC00MGVmLTk5YzItYmI4ZWNjNWQzMmUzIiwibmJmIjoxNjcxMTI4ODk3LCJzdWIiOiJmMDM1NWJlNy1mMGNlLTQ3MmEtOGM0ZC01YjBiY2MzNTdhZDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiM2U0YjEwOGQtMWRlMi00MGU4LTg0YjEtMDJjMTMyYjk2ZjE0In0.SNl57W9A-J6qsb_d7Ws2_ODN7o4Idmb0t7uRLB7IiL9ZPz-zwQ-ugsYdkZR_jHP0iQ8ZMYO0rBM227GWvm4FhQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}/notes/{{note_id}}"
					},
					"response": []
				}
			],
			"id": "12687bfd-2e87-4326-b936-5c777b6b0cd8"
		},
		{
			"name": "Facilities",
			"item": [
				{
					"name": "GET - Facilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "4207e444-2f32-4d74-887a-1776d9d5896f"
							}
						}
					],
					"id": "2ab604fc-531a-43ba-8114-0c197ba3d791",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Facilities(with URI parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "61e61c89-3492-4c29-8d1d-66b5bb531626"
							}
						}
					],
					"id": "6ef4462a-a003-45fa-9cb8-1190b353babf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities?includes=city&page[number]=1&page[size]=10",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "includes",
									"value": "city"
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(name missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "e92dbec3-d6d7-4adc-9a7b-64b0f8b1ea5e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ba985579-2ce9-43eb-9e24-935ad99ffbfd"
							}
						}
					],
					"id": "96ddb1c0-51c3-4ee5-926e-65f27c21a40b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(name blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "73aab7c1-c756-4e50-a1ae-0c53aa090ec0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a03be2db-c36d-47e8-b757-d2496ee5e349"
							}
						}
					],
					"id": "92fcf63b-c4ff-4c5d-ae08-4fdd60ad3c56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(street missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "b25d1857-b8e9-4271-bcf6-f3ccae7155bd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "990f0abc-cbe1-4b38-b232-0aa947c5caa9"
							}
						}
					],
					"id": "760c79ca-20b7-49c7-b3e0-3b49b2f65d0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(street blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "63fec20e-69e5-43e6-a8cc-174b2ea9fa2d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "45371f1d-6a71-4289-a6fe-18cb064b534c"
							}
						}
					],
					"id": "d8c5353a-8401-4912-bd0d-c485c531872d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(city missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "c6c6ff5a-1a32-45c9-ad77-da37a556e128"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "12401509-07db-4494-b113-452b386ffc8a"
							}
						}
					],
					"id": "6240eef0-d2e5-40c9-8f09-2d7a75116324",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(city blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "e70e16cd-39d7-49d7-ad64-8430d458e88e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "39e3f902-bf9c-43fc-8c82-9cdeb2ed1b2c"
							}
						}
					],
					"id": "647b70a9-3f79-4246-b470-6cf76e14a462",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "1400478e-354c-4c60-a6cf-37b26dda808b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1a26203a-eff1-4d42-b70b-3f9a879ce887"
							}
						}
					],
					"id": "17c18f4d-83f6-4de7-98be-6a005ca44b6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7c5e1af1-af42-4fbf-95b0-fd52e938d205"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "06a6ec03-5da7-4e36-8f73-85a0341c4122"
							}
						}
					],
					"id": "cc92f128-f615-402e-b94e-da929b4c9feb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "27c1b656-6cec-4775-af52-021110241634"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "771f05b2-1e36-4089-9bbf-5386b10256c9"
							}
						}
					],
					"id": "9807015b-e0e9-4e24-a41e-7db989f55edb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}000000\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "68155805-357d-4bef-9edb-61f9e72de4a2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "da4c8e9b-fe97-49d4-abdb-df67ed4398c2"
							}
						}
					],
					"id": "574a9cfa-ae12-40bc-a3cd-7771bd965105",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "a6519a09-c311-45d8-9354-3010437bb7b8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8a4197db-a661-4ac4-b3db-3055721deefe"
							}
						}
					],
					"id": "930a90aa-0c1d-455f-831e-096f2a3bba31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3e85540b-8484-487b-9295-c2a7d2a41dfc"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1a20098c-e1c2-4d27-b80d-77b5717c0078"
							}
						}
					],
					"id": "0b04976f-7c56-44bf-bce5-3770d7f35cb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}z\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(invalid time zone - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "a18918eb-58fc-4e3c-893e-b2f089ab9ef7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "411da322-75e8-45be-95a9-c1dac45fae7a"
							}
						}
					],
					"id": "1db82d8d-b008-4478-9d43-09f69f05698f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\":\"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(Required Fields Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "037536bd-dd81-4bb2-98e0-76fe7a2125d2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "939b9ce3-08df-4e5b-a9a9-ff38bae77641"
							}
						}
					],
					"id": "941de5e8-f3b8-4a9b-8652-9b0cb897e62a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "782034ac-125f-4bb0-bfd4-ccdd010ccabd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "f7678654-b6f3-47a0-9eee-4c372c3bedb1"
							}
						}
					],
					"id": "902a260a-092a-40fd-9000-a3ed49930875",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code & Province ID, 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "320a8055-8f9c-4fce-850b-825128780fb9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_iso_code and province_id provided - please use either field, but not both.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "79cf66d9-12c6-4bf4-9464-43b8bf3e9dd7"
							}
						}
					],
					"id": "07ec0b0f-3511-4768-8e90-c7a4de10926b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_id\": \"32375b41-c8dc-459c-87d1-10768a5be2c9\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities?include=province",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ Blank ISO-Code, 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0670c4f5-3d4a-442d-b309-4425cbdd2a07"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "cede33b7-c28f-4803-80d4-ba6fdefc58a3"
							}
						}
					],
					"id": "616e4c0b-319d-4b75-89e7-055a7598781d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "9eeff04f-6c86-4303-9bba-99aebf07a6a6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "2fc179ae-a8bd-47b8-bc5a-cc679ebe3e2a"
							}
						}
					],
					"id": "59273376-04a1-4105-8d03-15ad330135cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code & definitive ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "db9d228a-a38b-4466-b292-98e5e1702cbd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "069907c5-ac5e-4059-b042-bea492feb6b9"
							}
						}
					],
					"id": "9bd0a781-9273-4d16-9634-028ff7968364",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"definitive_healthcare_id\": \"{{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": "{{url}}facilities"
					},
					"response": []
				},
				{
					"name": "GET - Facility",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "023c2070-a6cd-4ff0-ab8c-3fa576e1b99b"
							}
						}
					],
					"id": "c90d49fa-4fd5-4b9b-9e2e-0903cf85d0a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facilities_id}}?includes=city&page[number]=1&page[size]=10",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facilities_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city"
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(name missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "13821202-28d9-4562-9729-472c8a6981de"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6e8dfd5f-8b80-4627-8a6b-b2a4d8aef740"
							}
						}
					],
					"id": "ccefc0d0-195a-4720-8f4e-7ebc57f6b71f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}?include=city",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "city"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(name blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7a28ad9b-6961-4508-9d17-78e1d34614e0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7fbd590d-00a3-49c5-ad36-fd9c76117b8c"
							}
						}
					],
					"id": "ef383d78-0dc7-43af-9f07-318ea3a45f94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(street missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7229ede3-bafa-4eab-86a5-f81b1a3b3d4e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b8ce3ca0-9c69-4527-afa1-af9f51454338"
							}
						}
					],
					"id": "726db674-b490-432f-8bc7-7ea0e62ddea8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(street blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "b50da75f-27b2-45fa-903d-1d04c6015737"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "30177683-e54b-4c98-86fe-6cbee6d12304"
							}
						}
					],
					"id": "62d4fe8e-536c-4925-9ad8-7fccd55d32dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(city missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7eb9fd12-eff6-4418-a581-b70244cd31d3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "550efcb7-edd5-4faa-87e5-f0cc08e72fd6"
							}
						}
					],
					"id": "ec1643cf-f0d7-49e9-991e-349b480d6b1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(city blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "626a7270-b7cd-4be2-a9fa-6ee4c27e5884"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ba994625-b926-4e62-8fb5-ea208c22a75b"
							}
						}
					],
					"id": "f63867ea-7d37-4269-b706-99c4b881b130",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "6e9f4e67-9e65-4321-bf40-c8c7a48d957a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1caf8c6d-3589-4807-b1c6-2476d35b9c5e"
							}
						}
					],
					"id": "52d3d641-9d65-43c3-9bc9-4a1e657298b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "804a048a-e51b-4564-ba00-f7995e563ee0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ca6f2f81-0c4e-4be6-9692-ab1aef9c3103"
							}
						}
					],
					"id": "e0949f8e-36ca-466f-8eea-fef681d7f65c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "1b79ca86-8b10-4135-aa7c-16cfcda112e8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1e33b5c3-caa1-4049-8970-a161afcd6ec5"
							}
						}
					],
					"id": "99ab1ad2-e3b4-4ac6-aa01-c177b17a2d59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}000000\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7a383bcf-96e5-4cb3-b168-0168f6a3452f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ff584357-39da-4a57-8a03-db80a4e2a088"
							}
						}
					],
					"id": "e779f377-0ef4-40f8-a5f5-5c60dde4c61e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id blank - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "c87b26c7-0307-4c9a-828a-6a5d86fe9a1b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e872e4d3-14c7-4b16-abc8-38f357b9d068"
							}
						}
					],
					"id": "2139117b-dc2f-460d-865b-e63157111096",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id invalid - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "fa9b4d09-0270-4278-87e6-2123b17b0e91"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "456a0b90-7647-4067-b096-553b49120c3a"
							}
						}
					],
					"id": "d1fa9701-62b4-4d74-80d1-4c0795b65205",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}z\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(invalid time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "1eb11204-fcc4-46e9-8242-e9c3049639d0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c7330280-2cc1-4d04-b981-433efbdc79a6"
							}
						}
					],
					"id": "b9b24ea6-51ba-45b5-9e5b-1a35e297b105",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\":\"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3d1e4efb-e07b-446c-bd49-477398b8de4b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f83a107c-e5b6-405d-9b23-162b1d3ee36e"
							}
						}
					],
					"id": "f0878e29-34a2-4b14-92c0-519175681533",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(w/ ISO-Code)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "a20cb8d3-8482-47c7-afcd-9da8a3f04317"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "47416be5-4a42-4f38-a69d-c65b3809b75a"
							}
						}
					],
					"id": "03a48358-6944-451a-85b3-2b8024e84c35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"definitive_healthcare_id\": \"{{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "d8a2f26c-ff50-4b08-81d6-b212ccd8b2b9"
							}
						}
					],
					"id": "1a926322-5793-48fc-a2c7-ba7b1c68856d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0d1c7c30-8ec3-4c95-ac63-563d9685faf8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "60f65159-f756-4c16-a0ab-01ebc7a31462"
							}
						}
					],
					"id": "6e4fd222-61ef-4f68-b188-5d2f1a13f1fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Name(blank name - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "a8d2ae1a-8169-4aeb-adc8-61790745199c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e3243e44-8ee7-4c53-b05c-ede924bbb1d2"
							}
						}
					],
					"id": "34c355ce-cdbe-4286-86ed-794506fd7810",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Definitive Healthcare ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "70fb0ecb-eff8-4af1-aeff-32651956adf2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4c2d072f-fc20-47e8-b688-261d16976482"
							}
						}
					],
					"id": "ec3d73db-4acf-4e54-85df-fc8352f24e8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"definitive_healthcare_id\": \"{{number}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Street",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "91caf3e1-040c-4536-aa60-07d63fcd95ad"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3f858535-a1e4-4189-a4ee-3d01eb351079"
							}
						}
					],
					"id": "1ffcd7dd-cfb3-41a4-9125-d773470d9a05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Street(blank street - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "62f675c6-b628-4c6b-a146-a249d3fde948"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ee75a289-2026-4a1d-bda5-0b1b63bcc8f2"
							}
						}
					],
					"id": "e8a71439-f69e-496a-8c72-28cd761949b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - City",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "62a8afdc-d6c3-421d-9ff5-a64b5f1cf059"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1bef966a-240e-41cf-ad2d-0b0e3daa5624"
							}
						}
					],
					"id": "fe3c1075-ab96-4052-9924-ad90d204cfb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"New {{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - City(blank city - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "02f4f96d-dcc6-454a-96b1-61c1eb5f9619"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7dd984ef-1247-426a-8e84-c39490b883ee"
							}
						}
					],
					"id": "71a3be4c-b6e5-4429-b527-9ce27604d6db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5385b3ae-3d73-462e-b711-fe2de0575ba5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2d4812eb-365c-42b8-aae2-864b04085b5b"
							}
						}
					],
					"id": "9eec9207-34cc-4c68-be58-a9b0ae54dbcc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code(blank postal code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7cb44d91-ef78-45b8-a87e-829a691f7a1f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1801a1cc-8f1b-4ceb-b1cb-f9e0edba4f45"
							}
						}
					],
					"id": "6cba1ef9-3c36-4fa1-a041-82e6ed8f5ef0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code(invalid postal code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "6afb2d77-fabf-4f07-a6cd-0ee2527fff4a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9f6a4c28-a86a-4c8d-900b-95ebec650b8c"
							}
						}
					],
					"id": "94fc474d-83ea-4c9b-af7c-2dbb04ca9fea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"{{postal_code}}98765\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "447ce678-f0c3-45bb-8f16-4eae29601ae2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "94b87956-cbb6-495a-a9c1-895fe48e6943"
							}
						}
					],
					"id": "2abde385-3e02-4f92-b1de-196cfa083dce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code(blank province code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "74ea125b-1f31-4a12-8194-85fe9b06a335"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "adb5e15b-66f2-46e1-913c-470a3f74c27d"
							}
						}
					],
					"id": "73d12b26-d46d-444d-b70b-36ec7ff2f724",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code(invalid province code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "73a732ce-a462-49ba-a0fa-eb4d2cbd1504"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "afde31d6-5f86-4a92-8823-9fff308996c0"
							}
						}
					],
					"id": "2ce9bc5f-f598-4fe3-8ad3-55a24857d607",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"{{province_id}}abcd\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "bbd022b3-a406-45d4-9dd5-ba58f1ad20a7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "33599116-73cc-48ab-a998-aedb9bf570b3"
							}
						}
					],
					"id": "8389d39d-09ee-46bf-b35c-0528d6348505",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"US-AZ\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code(blank ico code - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3c543a2d-3f2b-453f-be6e-9b24c2737e67"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b749b8ee-9eaf-4f5c-b9b9-43d35bd76bb6"
							}
						}
					],
					"id": "dc9d7ffa-5e7a-434f-9a86-858627f55476",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code(invalid ico code - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "eb3915da-3023-4735-93c3-d982e23dc47c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "91d5e052-d608-47ad-8e21-366974df7448"
							}
						}
					],
					"id": "03e1f013-52ea-4f0e-bcd1-d6e08cfa4d66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"US-AQ\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "dd2d8a4f-dc29-4cfb-8306-303550038df4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e890957f-95d0-4979-b722-c1c8e15d1dfd"
							}
						}
					],
					"id": "d8e8871b-f540-4358-aef4-a9f5fff430c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone(blank time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0a798ea4-2651-4cc3-868f-4f83202591df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "437f4175-f8e0-49ee-a56d-e655c98059f7"
							}
						}
					],
					"id": "f4933188-8deb-42e2-aa5b-dff3cc95560f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone(invalid time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "d9a0ace3-432b-4a90-9b71-191e13330af7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b4c8ae0e-bfef-4adc-a0be-6b9534945bea"
							}
						}
					],
					"id": "ded16079-f562-4442-a0a5-55472ce550a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Facilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f992c2e4-4a01-48b4-8769-90da85f2a040"
							}
						}
					],
					"id": "c09ef097-8c02-4afb-b680-b3d73b16083e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city",
									"disabled": true
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Facilities(resource not found - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f78c5be7-5933-43d7-a77e-9383989595e2"
							}
						}
					],
					"id": "ed4f5090-a49a-4fc1-baf1-59156f688009",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city",
									"disabled": true
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "214c14f7-3dde-4429-abc8-676b2cc7eea6"
		},
		{
			"name": "Professions",
			"item": [
				{
					"name": "GET - Professions",
					"id": "01d5efd6-c30b-4d15-8aa3-ae067dfcf8f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				}
			],
			"id": "34e6df5b-15bd-44a5-8b38-a6d241def31f"
		},
		{
			"name": "Job Requisitions",
			"item": [
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"pm.environment.set(\"facility_id\", jsonData.data[json.random][\"id\"]);\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "544f95e2-db79-4889-b286-ffb781f0d970"
							}
						}
					],
					"id": "03c3d874-e1ca-4bf1-980a-2bc6c888af2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Professions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", profession_id)\r",
									"\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var name = attributes[\"name\"];\r",
									"pm.environment.set(\"profession_name\", name)\r",
									"\r",
									"console.log(length)\r",
									"console.log(profession_id)\r",
									"console.log(name)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "9b588297-f115-4b80-bd92-ee46cd89f873"
							}
						}
					],
					"id": "2b5f5568-83f2-4cf4-9685-4ad77b00aa6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Contracts Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var client_contract_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"client_contract_id\", client_contract_id)\r",
									"\r",
									"console.log(length)"
								],
								"type": "text/javascript",
								"id": "4fc7432b-d9f6-40e7-98fc-65ea3fe60b9f"
							}
						}
					],
					"id": "e42399a3-7b4b-4588-9bd6-932bb22e3fa6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET - Specialties Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"primary_specialty_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"console.log(\"primary_specialty_id\")"
								],
								"type": "text/javascript",
								"id": "ba9441c2-4ad5-4297-bed6-e5bf091b9fd7"
							}
						}
					],
					"id": "b2f1b3d9-0f92-479b-8b94-cea521a4390c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no facility_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "73dfe2f4-013a-41e0-a0bd-ed30b39cd5d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "12ee779b-011a-4793-8af8-0bd9d3068668"
							}
						}
					],
					"id": "e9244739-3387-4c91-a84f-55ea5ec5e043",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no job_type: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"job_type can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "47adbabe-bfcf-4f1b-8d48-c3707cb0d168"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "ec382df5-2445-4969-94a2-6ec28836d701"
							}
						}
					],
					"id": "ac46fc24-1463-4b3b-a936-699961814cf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no name: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f0bd8969-34d6-4616-9d71-3163ea3aa84a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "e1cb511a-8688-473d-896f-db56e79b4145"
							}
						}
					],
					"id": "35e947a2-512a-4396-8945-e06aeeab0b4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no profession_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "20d69c3f-c5aa-4cca-811e-452ebc18fd66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "f4802e95-520e-4441-bf40-92b018d8a56b"
							}
						}
					],
					"id": "fc4c1358-bd9f-4b0e-93a0-8957063dfa89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no source: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"source can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2a732d0c-12ed-429e-8887-6943d83772e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "f0be8786-4125-4420-84f4-b0bd6f0aa0af"
							}
						}
					],
					"id": "379a4330-d4e8-4331-a89e-ec61aa35341d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no specialty_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"specialty_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a7df8805-ff43-41c6-9058-68223e1497ee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "bba9c58a-2ef3-4da5-a631-33746b9761aa"
							}
						}
					],
					"id": "eba059eb-db10-4d0a-9a05-06f454752eca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no years_of_experience: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"years_of_experience can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0a29b42e-187d-41c8-8011-d7fec9c7499b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "854e62dc-a51b-4cff-8f4a-3f82ef7ab817"
							}
						}
					],
					"id": "22edd78a-3e8e-4a90-9ed1-d022c810bcd3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\"\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('job_requisition_id', jsonData.data[\"id\"]);\r",
									"\r",
									"pm.test(\"Facility_id returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"facility_id\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"asap returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"asap\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"has_pay_package returns data\", function () {\r",
									"    jsonData.data.attributes[\"has_pay_package\"] != null;pm.expect(jsonData.data.attributes[\"has_pay_package\"]).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fd73709d-6911-40d9-830d-3b6f96c52882"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "fcbaab51-2a64-41cb-b79e-2cf94bd6febd"
							}
						}
					],
					"id": "4d1f8544-0722-420a-bd1e-8b78d3970b23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = [/*'Full Time', 'Part Time', */'Travel Contract'/*, 'Per Diem'*/];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);\r",
									"\r",
									"/*number of openings generator*/\r",
									"var openings = {\r",
									"  random: Math.ceil(Math.random() * 30)\r",
									"}\r",
									"pm.variables.set('openings', openings.random);\r",
									"console.log(\"number of openings: \"+openings.random)\r",
									"\r",
									"/*ASAP flag generator*/\r",
									"let asap = ['true', 'false'];\r",
									"const randomASAP = asap[Math.floor(Math.random() * asap.length)];\r",
									"pm.variables.set('asap', randomASAP)\r",
									"console.log(\"asap: \"+randomASAP);\r",
									"\r",
									"/*starts on date*/\r",
									"if (randomASAP === 'false') {\r",
									"    var moment = require('moment');\r",
									"    const monthsInTheFuture = 1; //constant value of months that will be added\r",
									"    let job_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"    console.log(\"job_starts_on: \"+job_starts_on);\r",
									"}else {\r",
									"    let job_starts_on = 'null';\r",
									"    console.log(\"job_starts_on: \"+job_starts_on);\r",
									"}\r",
									"\r",
									"/*random time generator*/\r",
									"const time = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];\r",
									"const randomTime = time[Math.floor(Math.random() * time.length)];\r",
									"pm.variables.set('time', randomTime)\r",
									"console.log(\"time: \"+randomTime);\r",
									"\r",
									"/*random hours generator*/\r",
									"const hours = ['8', '12', '16', '24', '32', '36', '40', '48', '56', '58', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*random hourly rate generator*/\r",
									"const rate = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomRate = rate[Math.floor(Math.random() * rate.length)];\r",
									"pm.variables.set('rate', randomRate)\r",
									"console.log(\"hourly_rate: \"+randomRate);\r",
									"\r",
									"/*random weekly housing stipend generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const stipend = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"    const randomStipend = stipend[Math.floor(Math.random() * stipend.length)];\r",
									"    pm.variables.set('stipend', randomStipend)\r",
									"    console.log(\"weekly_housing_stipend: \"+randomStipend);\r",
									"}\r",
									"else \r",
									"{\r",
									"    const stipend = \"null\"\r",
									"    console.log(\"weekly_housing_stipend: \"+stipend);\r",
									"}\r",
									"\r",
									"/*random weekly per diem generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const perDiem = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"    const randomPerDiem = perDiem[Math.floor(Math.random() * perDiem.length)];\r",
									"    pm.variables.set('perDiem', randomPerDiem)\r",
									"    console.log(\"perDiem: \"+randomPerDiem);\r",
									"}\r",
									"else \r",
									"{\r",
									"    var perDiem = \"null\"\r",
									"    console.log(\"perDiem: \"+perDiem);\r",
									"}\r",
									"\r",
									"/*random travel reimbursement generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const travel = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"    const randomTravel = travel[Math.floor(Math.random() * travel.length)];\r",
									"    pm.variables.set('travel', randomTravel)\r",
									"    console.log(\"Travel Reimbursement: \"+randomTravel);\r",
									"}\r",
									"else \r",
									"{\r",
									"    var perDiem = \"null\"\r",
									"    console.log(\"perDiem: \"+perDiem);\r",
									"}\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*origin reference number generator*/\r",
									"function makeid(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    let counter = 0;\r",
									"    while (counter < length) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"      counter += 1;\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"let result = makeid(16);\r",
									"console.log(result);\r",
									"\r",
									"/*sales rep ID generator*/\r",
									"function salesrepid(length) {\r",
									"    let result2 = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    let counter = 0;\r",
									"    while (counter < length) {\r",
									"      result2 += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"      counter += 1;\r",
									"    }\r",
									"    return result2;\r",
									"}\r",
									"let result2 = salesrepid(32);\r",
									"console.log(result2);"
								],
								"type": "text/javascript",
								"id": "c1c6a3bf-fbf9-43c7-a248-535375b81291"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('job_requisition_id', jsonData.data[\"id\"]);\r",
									"\r",
									"pm.test(\"Facility_id returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"facility_id\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"asap returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"asap\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"has_pay_package returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"has_pay_package\"]).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d0eb8853-fc53-4fb2-9e3a-d87a6e6644af"
							}
						}
					],
					"id": "de49d33b-0eb3-44fd-b18e-496dd557f999",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_contract_id\": {{client_contract_id}},\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"creator_id\": \"{{account_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Req {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"source_reference_number\": null,\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}},\r\n  \"number_of_openings\": {{openings}},\r\n  \"description\": \"This job req was generated by Kamana's API\",\r\n  \"starts_on\": \"{{job_starts_on}}\",\r\n  \"asap\": \"{{asap}}\",\r\n  \"shift_start_time\": \"{{time}} AM\",\r\n  \"shift_end_time\": \"{{time}} PM\",\r\n  \"contract_length\": {{contract_length}},\r\n  \"hours_per_week\": {{hours}},\r\n  \"weekly_gross_pay\": {{pay}},\r\n  \"regular_hourly_rate\": {{rate}},\r\n  \"weekly_housing_stipend\": {{stipend}},\r\n  \"weekly_per_diem\": {{perDiem}},\r\n  \"compensation_comments\": \"Compensation calculated by API\",\r\n  \"origin\": \"API\",\r\n  \"origin_reference_number\": {{result}},\r\n  \"shift_description\": \"Described by API\",\r\n  \"status\": \"Open\",\r\n  \"travel_reimbursement\": {{perDiem}},\r\n  \"sales_rep_id\": {{result2}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Requisitions",
					"id": "989a6a92-1ab8-4f3a-a4cf-ebb9b4099292",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"job_type\": \"Travel Contract\",\r\n    \"number_of_openings\": 10,\r\n    \"years_of_experience\": 5\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions job_type",
					"id": "8c3ff1b8-8833-45af-b4dd-95126e735a1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"job_type\": \"Travel Contract\"\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions number_of_openings",
					"id": "505d94d7-4c5d-4c80-b8d2-9b6eb908e60b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number_of_openings\": 10\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions years_of_experience",
					"id": "3df09085-fda9-46a7-b357-897b953ca19a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"years_of_experience\": 5\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Requisitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let job_requisition_id = jsonData.data[0][\"id\"];\r",
									"\r",
									"console.log(\"job_requisition_id: \"+job_requisition_id)\r",
									"\r",
									"pm.test(\"job_requisition_id returns null\", function () {\r",
									" pm.expect(job_requisition_id).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "263d4353-62e6-48d1-bba3-e154a6f02928"
							}
						}
					],
					"id": "084a83a4-0215-48d7-b367-4929b66956b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Requisitions(with URI Parameters)",
					"id": "195c1b06-07dc-421c-86ef-a5384aa40ae0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions/{{job_requisition_id}}?include=creator",
							"host": [
								"{{url}}job_requisitions"
							],
							"path": [
								"{{job_requisition_id}}"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "creator"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Requisitions(single job requisition)",
					"id": "e22e7850-c971-485e-98d2-4bbbe62b9c3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions/{{job_requisition_id}}",
							"host": [
								"{{url}}job_requisitions"
							],
							"path": [
								"{{job_requisition_id}}"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "1e44d54d-c397-4ef1-889c-dcaba0f12fac"
		},
		{
			"name": "Specialties",
			"item": [
				{
					"name": "GET - Specialties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"primary_specialty_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"console.log(\"primary_specialty_id\")"
								],
								"type": "text/javascript",
								"id": "dec4d84c-89ce-487e-8da1-c44067d3d3b1"
							}
						}
					],
					"id": "84904847-6b6d-475b-bb6d-476b64ab182f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				}
			],
			"id": "c0db93f2-add2-4d5a-ab9a-8883a838fca4"
		},
		{
			"name": "Contracts",
			"item": [
				{
					"name": "GET - Professions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"profession_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"\r",
									"let length1 = jsonData.data.length;\r",
									"var json1 = {\r",
									"  random: Math.ceil(Math.random() * length1)\r",
									"}\r",
									"pm.environment.set(\"profession_id1\", jsonData.data[json1.random][\"id\"]);\r",
									"console.log(length1);\r",
									"\r",
									"let length2 = jsonData.data.length;\r",
									"var json2 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id2\", jsonData.data[json2.random][\"id\"]);\r",
									"console.log(length2);\r",
									"\r",
									"let length3 = jsonData.data.length;\r",
									"var json3 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id3\", jsonData.data[json3.random][\"id\"]);\r",
									"console.log(length3);\r",
									"\r",
									"console.log(\"profession_id\")"
								],
								"type": "text/javascript",
								"id": "2e75f4a5-0ea4-4f6b-bb5d-abefcc8f3369"
							}
						}
					],
					"id": "3748aab5-dc26-4ea8-944f-d08d5c33dc4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no name - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "799c29a7-e2fc-4981-aa53-e957c02eddae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "7a15c8b0-cdc2-478c-bf43-2dca3685a85f"
							}
						}
					],
					"id": "806dcb77-c9df-4dfa-8d51-78ceaccef27a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no client id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"client_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "15ff1aff-a7f4-4f5b-93fa-085620bfd283"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "7cdfb39c-f3de-43ed-a798-e1bb9da28ed9"
							}
						}
					],
					"id": "5b240d32-9990-49cf-9258-85e8ed8b7743",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no contract specialist - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "42d283b7-92bb-4384-8793-1d4e50a70ced"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "2e9f181d-dfb1-46bf-afe3-286a9cfa4754"
							}
						}
					],
					"id": "b69b6163-f8e2-41dd-9889-e0bc500ba62e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": null,\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{scontract_tarts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no client manager - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"client_manager\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c9e3326a-0366-478b-b637-d96ac8bfc2a2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "76a9a1a0-3360-4ba8-8059-f31eced51d67"
							}
						}
					],
					"id": "7babb4f8-93fa-4f4f-a692-29c0440ec05e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": null,\r\n    \"starts_on\": \"{{scontract_tarts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid profession id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_ids is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "707f4f19-7a24-4bc3-8a8c-ac236777dc64"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "0e433973-fdd5-481f-b1a5-4e0b22d443c2"
							}
						}
					],
					"id": "03c83741-1439-4e8e-bbc9-40ab9542a8c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}a\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract specialist & contract_manager ids - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8034a2b9-0c5a-4990-b7d8-ccdd4ed229cb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "8dd94c76-e299-48bf-bcec-1035b63d0889"
							}
						}
					],
					"id": "7f410240-ee56-4a32-b335-a3dd0e48127c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}a\",\r\n    \"client_manager\": \"{{assignee}}a\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract_manager id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"client_manager\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5ab08744-fa84-43da-a1bd-aa0ee995dff6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "788973df-6b6f-4b45-93f3-d8af02332987"
							}
						}
					],
					"id": "9b8cea02-b920-4669-8392-680fc2d06f64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}a\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid starts_on & ends_on dates - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "50dd9fea-d57f-44b3-bf79-11404f0106a2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "d191b38a-981d-4a03-ac47-26b4ef4ddd59"
							}
						}
					],
					"id": "d1e06ff9-a6db-4f12-9a37-5f2edc8cc18a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}0\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}0\",\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract_term - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"contract_term is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "40847854-1f01-4fb8-bb97-8438163e7f76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "1d854bbe-57d6-4190-91e9-1a2170c8ebe2"
							}
						}
					],
					"id": "8fb615ac-9f44-4f64-a503-e282f7d33038",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_dates\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid work_week_begins - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2dfc068a-22a8-4baf-b8a3-d5c1a6e64f3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "15183e19-d5f6-4dd6-9b2b-934bf51c3da1"
							}
						}
					],
					"id": "1faa3983-432f-42f1-af7e-b241de372ba1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 8,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid billable_orientation_percent_of_rate, cancellation_notice_days, msp_fee_percent, prompt_pay_discount & submission_method - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"billable_orientation_percent_of_rate is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"cancellation_notice_days is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"msp_fee_percent is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[3].detail).to.include(\"prompt_pay_discount is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[4].detail).to.include(\"submission_method is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d356085e-9820-41d9-8fa7-117bceb1f592"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "1a1411da-f57f-4329-9065-753e41351453"
							}
						}
					],
					"id": "7e7b0484-dad0-4a42-9cdc-cad388fcdce6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}a\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00a\",\r\n    \"msp_fee_percent\": \"0.08a\",\r\n    \"prompt_pay_discount\": \"a\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vmsd\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(required fields only - 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9a67c923-150c-46f9-af7b-ff226b10a9ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "5b365ecb-365c-48a6-821d-6edd1267d3fe"
							}
						}
					],
					"id": "e2206711-1e8b-4883-9cfe-5ad152cdda27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": []\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(all fields entered - 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contract_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "9db840c0-4d62-4038-a445-96cbe0b8606a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "13b79760-4ddd-432b-8329-b5212bda77ef"
							}
						}
					],
					"id": "1e8ba77a-3f48-41c2-b389-9fc5066335eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": \"3.50\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid profession ids - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c8ac0db7-493d-4689-af6a-d38c996c1049"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "4b6c1495-ce90-4735-ade1-b9ec205e4858"
							}
						}
					],
					"id": "a69278b6-cf08-4242-9d54-8e7ec452beb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profession_ids\": [\"e3ea4f36-0c81-45d8-874c-577bfc4fd45e\",\"61934394-5e8e-496a-b354-a1a95e7afb1a\",\"d316ce61-2f56-459b-a597-a4623405beb5\"]\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid contract specialist & contract_manager ids - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"Invalid value for contract_specialist\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for client_manager\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9805c0e2-d59c-4eae-b6c0-c0001c99ad13"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "2ad1669d-bf26-4fc0-9653-dd60a1369f87"
							}
						}
					],
					"id": "2b525081-7754-4160-b45d-ca6f4d22285e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contract_specialist\": \"!@#\",\r\n    \"client_manager\": \"!@#\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid starts_on & ends_on dates - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "480048a4-50b6-4100-b4ed-a68cff30f376"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "75c35af6-2738-4c4d-8074-ac534859b3ca"
							}
						}
					],
					"id": "7c1373f0-4949-4f4d-94ac-2d21b6ba8888",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{contract_starts_on}}0\",\r\n    \"ends_on\": \"{{contract_ends_on}}0\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid contract_term - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"contract_term is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f0d20d49-f2c9-4851-b2a2-fdcaafd8a4df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "a5541283-bafe-4797-b84a-53d5bf36c2b4"
							}
						}
					],
					"id": "e2e1cc26-5c0a-4bb3-8129-f123b0e6fe4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contract_term\": \"fixed_dates\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid billable_orientation_percent_of_rate, cancellation_notice_days, msp_fee_percent, prompt_pay_discount & submission_method - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"billable_orientation_percent_of_rate is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"cancellation_notice_days is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"msp_fee_percent is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[3].detail).to.include(\"prompt_pay_discount is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[4].detail).to.include(\"submission_method is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "34764604-da21-45b5-99bd-a38226a18de1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "f80ab803-f819-4d27-9064-2044c59ae9d6"
							}
						}
					],
					"id": "57fa671a-f273-4d6b-92ea-492685ada486",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cancellation_notice_days\": \"{{cancellation}}a\",\r\n    \"billable_orientation_percent_of_rate\": \"2.00a\",\r\n    \"msp_fee_percent\": \"0.08a\",\r\n    \"prompt_pay_discount\": \"a\",\r\n    \"submission_method\": \"vmsd\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(multiple fields updated - 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "09027a34-55d6-4807-a2e2-a41ad01d48c7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 2;\r",
									"const monthsInTheFuture = 2;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "77d74b4e-8b19-480d-99c7-757094482c81"
							}
						}
					],
					"id": "873540ad-fb98-4cfa-96ed-e77e80b60320",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [],\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"{{contract_term}}\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 40,\r\n    \"billable_orientation_hours\": 32,\r\n    \"billable_orientation_percent_of_rate\": \"2.50\",\r\n    \"msp_fee_percent\": \"0.15\",\r\n    \"prompt_pay_discount\": \"3.00\",\r\n    \"work_week_begins\": 7,\r\n    \"remaining_untracked_information\": \"Patched\",\r\n    \"status\": \"active\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(multiple fields updated - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"only draft contracts can be edited\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f5968f27-1bc7-464d-a6c3-57b4a2095c87"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 2;\r",
									"const monthsInTheFuture = 2;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "3c2e29d4-6159-4421-abb7-3962aa7b1de8"
							}
						}
					],
					"id": "a591f79b-5c1f-4f47-a305-8816839f0c2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [],\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"{{contract_term}}\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 40,\r\n    \"billable_orientation_hours\": 32,\r\n    \"billable_orientation_percent_of_rate\": \"2.50\",\r\n    \"msp_fee_percent\": \"0.15\",\r\n    \"prompt_pay_discount\": \"3.00\",\r\n    \"work_week_begins\": 7,\r\n    \"remaining_untracked_information\": \"Patched\",\r\n    \"status\": \"active\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a7ad25ca-fbdc-4bcb-b93b-37e8b199be5d"
							}
						}
					],
					"id": "6324f63b-9f9a-4d0f-8f1f-1a024d9787a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Contracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7f899916-d9ba-47b2-ac71-e2171a031b1e"
							}
						}
					],
					"id": "096088ad-cb6e-46bb-816f-253be63428f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET - Contracts(with Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4ef94253-ae7e-485f-b78f-d1e49cd1a250"
							}
						}
					],
					"id": "da402e12-ef1d-44c0-b199-29ed38f38d10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}contracts?page%5Bnumber%5D=1&page%5Bsize%5D=5",
							"host": [
								"{{url}}contracts"
							],
							"query": [
								{
									"key": "page%5Bnumber%5D",
									"value": "1"
								},
								{
									"key": "page%5Bsize%5D",
									"value": "5"
								},
								{
									"key": "include",
									"value": "professions",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "e288cc7d-97b7-418e-bcfa-14e085458537"
		},
		{
			"name": "Client",
			"item": [
				{
					"name": "GET - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.environment.set(\"client_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(json.random);"
								],
								"type": "text/javascript",
								"id": "c6c36c4d-06a7-4924-b7f2-fd6ec228b151"
							}
						}
					],
					"id": "d7d7c000-b2ba-4eb2-ab92-fb91b7237124",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "GET - Client Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "a2b7d01e-327a-4c9f-b138-c5738c388cb9"
							}
						}
					],
					"id": "855bac94-ae28-4c95-8160-61ea6eaa6bc2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "GET - Clients(with Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "afba5030-6632-4361-856b-0fa5c750c50e"
							}
						}
					],
					"id": "f666d967-9a9c-4bfb-9f3d-cba247b24bfb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}clients?page[number]=1&page[size]=5&sort=id",
							"host": [
								"{{url}}clients"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "id",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "f0117025-4753-40fd-b626-6d247ff4c460"
							}
						}
					],
					"id": "4639e2cf-f1f9-4578-aba0-2efd466b08dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Client(Bad ID 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "201ab7a0-b897-4bd2-871a-c05a2e11fc5d"
							}
						}
					],
					"id": "3f045d7d-093a-4ac8-9662-c457ae720631",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}z"
					},
					"response": []
				},
				{
					"name": "POST - Client(no name 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "26c68f84-b2ac-4591-a9ab-cdee77d0abc6"
							}
						}
					],
					"id": "284981c1-3fab-4d78-8606-ff0db19d8587",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(invalid type 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"type is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c6913bb4-b926-4094-9eaf-67a7c134ca17"
							}
						}
					],
					"id": "e1c0fa5e-5f4f-410d-a1e7-a5543081f01a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"name\",\r\n    \"type\": \"null\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(no account_id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"account_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "69b95056-78c4-4771-8212-af9762eaed39"
							}
						}
					],
					"id": "e9cc2f49-e14b-40f8-ba00-2144c77607f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"\",\r\n    \"name\": \"name\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(invalid account id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"account_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "94684775-36ac-42a2-a6fb-168824c29a75"
							}
						}
					],
					"id": "48edf90e-fc5f-4e35-8a31-d31cec239f8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\",\r\n    \"name\": \"name\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, no facility id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "933fd0a8-7eb9-4ab8-b4d9-68a0a6eb57c0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "451086ed-6861-49a2-8fb5-0a769e0e0a7e"
							}
						}
					],
					"id": "2d5eb031-dde9-4c83-881f-5506f7329231",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, invalid facility id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "cd38b639-018d-442b-8b7a-f4196ca95d54"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "0af007e7-1cc7-4908-bc06-1a8f53865cd9"
							}
						}
					],
					"id": "01a9f7e4-ed71-43fd-ac96-006125c823f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, facility id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3064a1b8-2ec6-4c3c-8cab-c6e452273f16"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "e07334c7-2680-451f-8699-adfedc5aa47c"
							}
						}
					],
					"id": "be76fea5-f009-488e-a934-c8e1cab8bbe7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, no msp id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d5f15a38-391a-4d14-91de-135e30474c4d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "048b1b3d-e577-4e55-a586-680e711da387"
							}
						}
					],
					"id": "671dbb78-933b-4e12-b5c0-4cf43d77c935",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, msp id invalid 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ddd9b898-3163-4052-9c62-12d65e30c95b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "b84969b9-0ba0-4046-add7-38f946f7bcc8"
							}
						}
					],
					"id": "f917d606-0435-4279-b9ba-66cfcaf258ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"managed_service_provider_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, msp id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a65758d4-e025-482e-a4a3-9bd32d24417b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "f18a78a6-ddfe-4862-9d37-e185678c7959"
							}
						}
					],
					"id": "4806ade7-5a90-4a32-a507-65c6d9926264",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"managed_service_provider_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, no idn id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "afe9909c-cd98-4974-ae96-b62d68fea7bf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "d7e742a3-949e-42fe-bd1b-55c503a0ed6a"
							}
						}
					],
					"id": "5250c09e-350e-465a-a170-b3cddd99ba87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, idn id invalid 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "da55d6ba-1ce8-4cac-8831-33469930c08b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "d0b0a0a9-e066-41b6-9d13-e2ad75a97fb7"
							}
						}
					],
					"id": "97e7df52-f8ca-4b5b-9402-7a15857d3826",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, idn id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a693d200-1a37-44c4-bf0b-ed6a2373d090"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "899c35b6-c04a-497d-80ac-3cd219830777"
							}
						}
					],
					"id": "9f4dea27-99b0-46b1-a9ed-2366640f3b34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"integrated_delivery_network_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(IDN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"idn_name\", jsonData.data.attributes[\"name\"]);"
								],
								"type": "text/javascript",
								"id": "272f834a-da18-46b3-834b-38867736f1a6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "16c32d44-b05c-4d56-94ad-4dcffc1ed3eb"
							}
						}
					],
					"id": "82a026fe-07fb-4120-9ff3-a5189c77ac59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943\",\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`account_id\\`: \\`\\` (string, **required**)\n\nEndFragmeStartFragment\n\n\\`name\\`: \\`\\` (string, **required**)\n\nEndFragmentStartFragment\n\n\\`type\\`: \\`\\` (ClientType, **required**)\n\nEndFragmentStartFragment\n\n\\`facility_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`integrated_delivery_network_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`managed_service_provider_id\\`: \\`\\` (string, **optional**)\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "POST - Client(IDN) Duplicate - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name must be unique within each client type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9cc23e59-f2e0-48b8-bbcb-e23ad6f388de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "b12423bc-0426-41d7-b490-e7b0ee05c136"
							}
						}
					],
					"id": "9e0b3653-acbb-4c78-b27f-2054e9ca858e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"{{idn_name}}\",\r\n    \"type\": \"idn\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943\",\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`account_id\\`: \\`\\` (string, **required**)\n\nEndFragmeStartFragment\n\n\\`name\\`: \\`\\` (string, **required**)\n\nEndFragmentStartFragment\n\n\\`type\\`: \\`\\` (ClientType, **required**)\n\nEndFragmentStartFragment\n\n\\`facility_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`integrated_delivery_network_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`managed_service_provider_id\\`: \\`\\` (string, **optional**)\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var facility_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"facility_id\", facility_id)\r",
									"console.log(\"length: \"+length)\r",
									"console.log(\"facility_id: \"+facility_id)\r",
									"console.log(\"index: \"+json.random)"
								],
								"type": "text/javascript",
								"id": "0aac51b6-3159-42b5-a96d-5ba958455be6"
							}
						}
					],
					"id": "42cd2c8a-60c7-4791-aa6d-b54f00ee192b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Client(Facility)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_name\", jsonData.data.attributes[\"name\"]);"
								],
								"type": "text/javascript",
								"id": "1f73fda4-f89e-40b0-b6d1-07e71f8692da"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "32fe22eb-9a72-4144-839c-aada9bc42179"
							}
						}
					],
					"id": "643867cf-c6e8-4522-a33e-d3517d3d0dc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"{{facility_id}}\",\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(Facility) Duplicate - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name must be unique within each client type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a93c7cb4-09a8-412d-b0dd-6a4427efc664"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "e8d560b1-cf17-4b24-a257-13a1a4cb9218"
							}
						}
					],
					"id": "06ed367c-f287-423f-8600-f4593138586c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"{{facility_name}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"{{facility_id}}\",\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(MSP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_name\", jsonData.data.attributes[\"name\"]);\r",
									"pm.environment.set(\"client_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "ad741a29-7e10-43af-8f57-c24a6db49f52"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "6d6c1b89-cb51-42c2-811c-4c42e4eae091"
							}
						}
					],
					"id": "3356d55e-38a1-4562-bc7a-b77c1651365c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": \"7351c93d-d1a5-43ff-b372-743b134e4e4b\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(Custom)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"client_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "54b57267-b57c-49af-83ed-b17210a689d2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "ab034697-d778-47ab-a149-0401131b42ed"
							}
						}
					],
					"id": "b31a9231-c2a5-4edd-acca-ad3d6faee461",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"custom\"\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`**account_id**\\`: \\`\\` (string, **required**)\n\n\\`**name**\\`: \\`\\` (string, **required**)\n\n\\`**type**\\`: \\`\\` (ClientType, **required**)\n\n\\`**facility_id**\\`: \\`\\` (string, **optional**)\n\n\\`**integrated_delivery_network_id**\\`: \\`\\` (string, **optional**)\n\n\\`**managed_service_provider_id**\\`: \\`\\` (string, **optional**)"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(blank name - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name can't be blank\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"last_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8147515a-f2d6-438b-9e57-7fdb8fa8a722"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "9a5a8966-70fe-4698-b510-42fd81776cf4"
							}
						}
					],
					"id": "5be46d66-ffae-49f1-a1d9-a903b2c384f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": null,\r\n    \"last_name\": null,\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(name already taken set-up - 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "96c1502b-da2b-4c9d-b0fd-253adeb4ce72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "89df7d74-7d11-4a0b-98d3-f056a24e48b5"
							}
						}
					],
					"id": "eebf3d52-e6eb-4e86-beff-7bd074ace59d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(name already taken - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "141fa1c2-8ad7-49bc-a168-35abcc934429"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "44bd3856-b6bf-408a-ae92-357c77ac31ee"
							}
						}
					],
					"id": "6d7b427f-3dc1-4511-83c1-dc5737d433eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(no email - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2c465925-7e18-4883-b9ce-7dbc662a9382"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "ae1ecdb2-f849-4ea0-9487-356a0d7ddf2e"
							}
						}
					],
					"id": "e12aa113-9288-45c9-a4c4-260031367156",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": null,\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(no phone number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "afcf7959-47d1-4858-a5e4-06d07f37bec6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "641dab71-b2a8-4509-b3f5-058d04ca09ff"
							}
						}
					],
					"id": "c6949cb8-6968-4ebf-a830-a57c9d423d9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": null\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(invalid phone number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "84057c09-896a-4950-bf64-b3083ddadadd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "11ac9dde-4ffc-4927-a317-e8fd76263cb1"
							}
						}
					],
					"id": "8e9c9016-4e9c-4df6-9220-d639326420c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"12034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields, mobile number not accepted - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number Our phone validation service does not recognize this as a mobile number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "db45e159-0eef-4da2-a5a7-b8776f9468a1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "813f15fe-5dd5-4692-b419-86c1caf7e4be"
							}
						}
					],
					"id": "6c0b4abc-b485-4a6d-93ff-e351e41667e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6467778888\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(required fields only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c6665947-dda8-4fb3-b8bf-92542010b038"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "062d7761-246d-46c4-90b2-7f92e5244032"
							}
						}
					],
					"id": "b48645ea-1ba5-4647-8e5f-7da8f502e83d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contact_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "ddcf3046-1c12-4620-979a-9f7276e979d0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "0379fe6d-c25a-4913-8114-edd29708b598"
							}
						}
					],
					"id": "30b50ae2-eaf0-49a6-be7a-c4936bf2d8fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6462215068\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts",
						"description": "POST - Client Contact\n\n\\`first_name\\`: \\`Joe\\` (string, required)\n\n\\`last_name\\`: \\`Schmo\\` (string, required)\n\n\\`email\\`: \\`[jschmo@email.org](mailto:jschmo@email.org)\\` (string, required)\n\n\\`phone_number\\`: \\`2345678900\\` (string, required)\n\n\\`phone_number_extension\\`: \\`123\\` (string, optional)\n\n\\`mobile_number\\`: \\`5555555555\\` (string, optional)\n\n\\`notes\\`: \\`Some notes\\` (string, optional)"
					},
					"response": []
				},
				{
					"name": "GET - Client Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "db39665a-661f-4827-84a2-bb80cb9db177"
							}
						}
					],
					"id": "c2863742-8bb0-45c4-9b0f-f76a8664b6ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields, mobile # already used - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e4583133-0bd1-4a89-ac72-97d1493074af"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "2278d142-991a-4b43-bbaf-61f6399fb352"
							}
						}
					],
					"id": "dc7e5589-5d9c-47fd-a45e-677d0f5d0e26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6462215068\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(name already taken - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6b39b999-6063-4b81-a8da-a1bce7f958c7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "f3e92756-fb5c-4631-9c5a-53525459790d"
							}
						}
					],
					"id": "e6e2e1ea-0933-42ba-b986-53c35682eac7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(invalid phone # format - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "505cb07b-6e53-4af0-8384-0d44522fc299"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "9b15e8a5-4a2d-49ff-86ef-5a379af0cb40"
							}
						}
					],
					"id": "7aaf1b76-0265-4c64-9beb-1863e0289109",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"phone_number\": \"12034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(invalid mobile phone # - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number Our phone validation service does not recognize this as a mobile number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "969a9fa3-e376-42eb-917b-a777ad27f205"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "50e7fdab-0d56-401a-95bb-01ff03a2c159"
							}
						}
					],
					"id": "329fc69c-7132-452b-86b5-462d4d710e49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"mobile_number\": \"6467778888\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contact_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "157b4f8c-c0e8-4fec-8728-bbb82f38296d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "2802b88d-e9e6-4947-8398-2be455de5eb9"
							}
						}
					],
					"id": "bebbc776-12b4-46d8-af0e-ec9dd8e8df77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"321\",\r\n    \"mobile_number\": \"6462219259\",\r\n    \"notes\": \"patch testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "Delete - Client Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3bf047a2-519e-446f-8364-2f3323f6479c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "c6ba7284-6d94-4986-bb1c-7946d8f29259"
							}
						}
					],
					"id": "c3ffb287-8683-4ede-be0e-92bd61cb69cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "Delete - Client Contact(Contact doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5e41dccf-25a1-4b69-a1ad-9ddb5899b936"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "3274164f-418d-4bb4-9dea-f1220170ecef"
							}
						}
					],
					"id": "86853785-3d18-45e1-80a1-76d3c41a22c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				}
			],
			"id": "ce323d1e-c584-4d13-ba86-e3b043634603"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GET - Users(without Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "af791a9a-fea3-477f-ab43-48864e9fb7fe"
							}
						}
					],
					"id": "800bbb74-5035-4545-87e3-64709a11c0af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Page Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "63a93bad-3d64-49db-bd6d-4fe9f95ffec7"
							}
						}
					],
					"id": "7adf5c6b-744c-465b-9908-effb1a6b1018",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?page[number]=1&page[size]=5",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Field Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "280a5d08-d832-4e2c-b0f6-bec8243f9ad0"
							}
						}
					],
					"id": "5f75fec5-eecb-40ea-b5ad-9a42d6365571",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?fields=email,status",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2"
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Sort Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "1c0f2265-6136-462e-a54e-8459f5115968"
							}
						}
					],
					"id": "a3aa082b-88df-45ea-a8d1-aff72c674466",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?sort=email",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Filter Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "4b480191-db23-4960-acd4-e93d31def1b2"
							}
						}
					],
					"id": "5cc487f0-ed3a-4367-b30d-14dc5eedea66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[id]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec179",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec179",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Field Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3fc5c372-bf2c-4861-9e78-bde44f63dc21"
							}
						}
					],
					"id": "cba10936-bca0-4614-b2f8-4cae612b225a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?fields=name,type",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2"
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Filter Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields:\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5897d9a3-90cd-4598-9866-fea9c2abc5a4"
							}
						}
					],
					"id": "6c77ab3c-0826-4536-846f-9deb26cc3d2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[ids]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[ids]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid ID for Filter Parameter 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6be08be7-5f76-458d-92d7-1002537c304a"
							}
						}
					],
					"id": "e4f0d5f9-6a0d-4167-a4f0-ae15017b6a0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[id]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Sort Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid sort\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ab3e883c-2cef-4c2e-913c-6c5eecdb3340"
							}
						}
					],
					"id": "181c457e-804a-4c6c-8583-6e2e6704ec12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?sort=name",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "name",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Page Parameters 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"page_number must be greater than 0\");\r",
									"})\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"page_size must be greater than 0\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d69c2861-b87f-49f1-9528-70b4dafb2454"
							}
						}
					],
					"id": "e9acdb28-ddf1-4f31-ae1b-2ce37c7efde9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?page[number]=0&page[size]=0",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "0",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "0",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "name",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "54d25429-73f4-4e3c-a822-afda22ece6d0"
		},
		{
			"name": "References",
			"item": [
				{
					"name": "GET - References",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var reference_id = jsonData.data[json.random].id;\r",
									"pm.environment.set(\"reference_id\", reference_id)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"reference_id: \"+reference_id)"
								],
								"type": "text/javascript",
								"id": "094d871b-c3e8-48d6-8f03-85b42ea72e24"
							}
						}
					],
					"id": "d2562f04-1781-4e77-a435-86ea3465ee25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references",
							"host": [
								"{{url}}references"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "2",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "ebd34edf-a708-475f-98ed-ae385ef6d213"
							}
						}
					],
					"id": "a4b64eae-84d8-40cd-80ad-a4579d2a1115",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/{{reference_id}}",
							"host": [
								"{{url}}references"
							],
							"path": [
								"{{reference_id}}"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference(bad id, 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "504a9c1d-606b-423a-8eb4-05a9a6e9d4f9"
							}
						}
					],
					"id": "a811bb83-fe76-4125-87ab-bdfd4f9b22ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/{{reference_id}}",
							"host": [
								"{{url}}references"
							],
							"path": [
								"{{reference_id}}"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference(bad id, 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "3ca58445-c5e7-49b5-992a-8c311d8870d6"
							}
						}
					],
					"id": "a52e13a2-e880-4497-82c6-9c1de4954d60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/386ab9c3-4179-4a5a-a19c-84d3cd3e4f10",
							"host": [
								"{{url}}references"
							],
							"path": [
								"386ab9c3-4179-4a5a-a19c-84d3cd3e4f10"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "2a376226-4be8-4c3b-b688-4a3e95185a71"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{UAT_Token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "8faffa11-1164-4022-9556-e9269a00eda4"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4ed0f95b-d662-4d9f-80ea-84a66cc33476"
			}
		}
	],
	"variable": [
		{
			"key": "engagement_id",
			"value": "1a82e944-b9fa-4ee4-b67b-97c27aace402",
			"type": "string"
		},
		{
			"key": "extension_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "engagement_link_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "note_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "engagement_requirement_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "facilities_include",
			"value": "province",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Newest Baptist Hospital",
			"type": "string"
		},
		{
			"key": "street",
			"value": "8904 N Kendall Dr",
			"type": "string"
		},
		{
			"key": "city",
			"value": "Miami",
			"type": "string"
		},
		{
			"key": "postal_code",
			"value": "33176",
			"type": "string"
		},
		{
			"key": "province_id",
			"value": "00be976a-0ab2-46c6-b80f-9638eff4dc7b",
			"type": "string"
		},
		{
			"key": "facilities_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "profession_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "specialty_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "facility_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "status",
			"value": "open",
			"type": "string"
		},
		{
			"key": "search",
			"value": "",
			"type": "string"
		},
		{
			"key": "after",
			"value": "",
			"type": "string"
		},
		{
			"key": "include",
			"value": "creator",
			"type": "string"
		},
		{
			"key": "job_requisition_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "STG_Token",
			"value": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2ODE4MzU5MzcsImlhdCI6MTY3NDA1OTkzNywiaXNzIjoia2FtYW5hIiwianRpIjoiMWI3N2FiM2EtZmVjNS00YmFjLWJkYmItZDg5MmQ3OGRkNTc2IiwibmJmIjoxNjc0MDU5OTM2LCJzdWIiOiIwOGUzMjMwNC1jZWZkLTRhYzktODBlMS04NmI0YjVmNjI4ZmIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiZWU5N2ZhNGQtZGZmYS00YzU2LTkxNzUtNzU0NzUxNjJmZDBhIn0.DehYPtXk72TZ9uuv8L4jYL4YWHqq6AeUdClrHfDTjkqUQbjICm8ycrSDHGZaOFZpLzZBUx8psr8bkD7ixKwEAg"
		},
		{
			"key": "client_id",
			"value": "6d386fbb-40f8-4b17-8457-a837e6db737c"
		}
	]
}