{
	"info": {
		"_postman_id": "903b9cdc-3d87-4cb6-8688-cb10cfae18d5",
		"name": "Project K",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Talent",
			"item": [
				{
					"name": "GET - Professions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", profession_id)\r",
									"\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var name = attributes[\"name\"];\r",
									"pm.environment.set(\"profession_name\", name)\r",
									"\r",
									"console.log(length)\r",
									"console.log(profession_id)\r",
									"console.log(name)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "771f8372-4c29-4d17-bc67-54fbead95106"
							}
						}
					],
					"id": "a5b544cc-8581-402e-b075-cbc0e5bc94aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Specialties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var primary_specialty_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"primary_specialty_id\", primary_specialty_id)\r",
									"console.log(length);\r",
									"console.log(primary_specialty_id)"
								],
								"type": "text/javascript",
								"id": "338c694d-6722-4e89-8725-aee7d67210af"
							}
						}
					],
					"id": "a78fe1d0-51cf-44fc-9f7f-c2ae45a2257e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "GET - Talent 404(Bad Talent ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6c38aa3a-fd63-4bc1-aada-57b17637ffc2"
							}
						}
					],
					"id": "735fd965-0c72-4723-9240-51253c5247f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}talents/69a7b4e8-9e59-45f3-8b61-1302c5cbdc2e"
					},
					"response": []
				},
				{
					"name": "GET - Talent 403(No Agency Talent Relationship)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden from access to talent\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6b83039d-8f31-4a9d-ae2b-401362e265fd"
							}
						}
					],
					"id": "a6ce7865-a3cc-4282-94f1-174938db8852",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2ODEzNDA4MTMsImlhdCI6MTY3MzU2NDgxMywiaXNzIjoia2FtYW5hIiwianRpIjoiOWNkNDJkZDktMGRlOS00NWFmLWI1MTItOTk2NDAzZTI3OWUzIiwibmJmIjoxNjczNTY0ODEyLCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.tkpk1-BvjCxFzSIJh-huHwYp3qPkIVhxb9_l0_Sk62uZ5bk85omGwEKkMlDp6dFfbVkOiLdx2gJ6vW0cR9d-ow"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}talents/45f0caa3-c377-4ace-b549-376d78a3c7bf"
					},
					"response": []
				},
				{
					"name": "GET - Talent List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"\r",
									"pm.environment.set(\"talent_id\", jsonData.data[json.random][\"id\"]);\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(data.id).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "0e8119ab-e753-418d-b431-5f855d3d23ff"
							}
						}
					],
					"id": "3740037e-85cc-4363-9a8a-2dd05315cbae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?include=profession,primary_specialty,opportunity_preferences&email={{assignee}}",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences"
								},
								{
									"key": "email",
									"value": "{{assignee}}"
								},
								{
									"key": "phone_number",
									"value": "7189124575",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(using Email only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"id\"]).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[json.random][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "60a1380b-dcd4-4b53-a9ba-27deb68827b1"
							}
						}
					],
					"id": "80cf823f-8918-46b0-b6b4-ec05f50802e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?email=adrian.allen@kamana.com",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "adrian.allen@kamana.com"
								},
								{
									"key": "phone_number",
									"value": "203-333-4567",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(using Phone # only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[0][\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile search\", function () {\r",
									" pm.expect(jsonData.data[0][\"type\"]).to.eql(\"profile_search\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "732bd6fe-368f-4063-941a-9a8f45759c82"
							}
						}
					],
					"id": "184f8267-045a-4466-a833-d9bf4b143673",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents?phone_number=(342) 987-7932",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{assignee}}",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "(342) 987-7932"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent List(no parameters, 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email One of these search fields must be present in payload: [:email, :phone_number]\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8b571288-9a62-4438-9e91-38b2b2a9cf18"
							}
						}
					],
					"id": "b08e9f84-ef9b-4c6e-8679-d9b8f8ed0fe3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}search/talents",
							"host": [
								"{{url}}search"
							],
							"path": [
								"talents"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{assignee}}",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "646-333-4444",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No First Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b62769bf-8cb2-4599-b372-c9599c04cec4"
							}
						}
					],
					"id": "52db75cf-4f6d-4d51-87e9-8064fcc0d18d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+400Bad@Kamana.com\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Last Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"last_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a313896b-541a-4515-bfc8-a9b30fd32344"
							}
						}
					],
					"id": "4a464700-0bb0-4393-bf50-ffbcef533ed2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"email\": \"adrian.allen+400Bad@Kamana.com\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "16e6a8aa-aa88-49fb-976d-81e59ab0a934"
							}
						}
					],
					"id": "cce761f2-0bb7-4d14-9a74-e545456e591c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "69ddb04b-50e2-4138-9695-7aa3b867ffae"
							}
						}
					],
					"id": "90fb029c-fdf2-48b3-8f79-5ff9afa8473d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"{{assignee}}\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No Profession ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0cc26930-3fd2-4679-be23-da99a0ea90d0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "49055bcd-6cd7-4480-b10c-1c4f5a2e9062"
							}
						}
					],
					"id": "7eef4f6a-0d22-4620-ab08-f9eed62cb8e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"notification_preference\": \"email-always\",\r\n   \"primary_specialty_id\": \"b900619a-b9e4-40fe-96a3-0d2220d9c6a1\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(required) No specialty ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"primary_specialty_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "02db9ecc-a2d9-470d-9b14-881734606592"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "3eaf2828-e328-4af3-9a2d-71c32f019b44"
							}
						}
					],
					"id": "9b23ceeb-9770-4a7f-8562-8f8aea90aacf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"QA\",\r\n   \"last_name\": \"Test\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"notification_preference\": \"email-always\",\r\n   \"profession_id\": \"6353717b-3a79-40d4-af97-61a7f80e35cf\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(unclaimed w/ in-app preference) 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"notification_preference is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f2719a84-d7c3-4444-8ea0-630fd8cda8cf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "8b073390-609c-49cc-bdef-6d98795ffda5"
							}
						}
					],
					"id": "e56b541a-4802-4000-bea0-de141cf753e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"in-app\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(sms preference w/o mobile_number) - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ee31cc4f-b9f7-4fd2-9c07-f65e969e57c7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "2d1d6bb8-509e-4760-8aab-dd2840ce8cb9"
							}
						}
					],
					"id": "582da0e6-682b-4ad4-b2d1-1d4a977609e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"sms\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "a3bc56a4-7b52-44b0-94b7-b7c11390017a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)"
								],
								"type": "text/javascript",
								"id": "7aa299a8-e0c3-4453-b75f-e38fb46aa82b"
							}
						}
					],
					"id": "bdce245e-7e7d-4155-a569-522c2add072c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"first_name\": \"API\",\r\n   \"last_name\": \"Test{{number}}\",\r\n   \"email\": \"adrian.allen+API{{number}}@Kamana.com\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\"\r\n}"
						},
						"url": "{{url}}talents/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(claimed w/ in-app preference)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id2', jsonData.data[\"id\"]);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is true\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(true);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									" pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.eql(\"in-app\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "1b6669ce-224a-4ef7-b3d7-13ef8e9f187b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "ecea0ea6-5226-4672-bc13-1f718543eb5d"
							}
						}
					],
					"id": "fe81a6a8-b8a3-4aa5-b66f-768b6890dc91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": true,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"in-app\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(sms preference w/ mobile_number) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.eql(\"sms\");\r",
									" });\r",
									" pm.test(\"mobile_number doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"mobile_number\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "48c45e00-124f-4eb7-b59e-f425e78ed8e6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "41be49d7-9efb-4b4b-bcb2-08f2f08f905d"
							}
						}
					],
					"id": "7d38b7c0-f15e-4626-b457-6901097e37e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"sms\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"mobile_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "54bac8de-2e8d-4f86-8bcb-31bf37ab9955"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "0a1c2c0d-f392-4524-8504-78fd4f09fbd2"
							}
						}
					],
					"id": "79641621-aaa8-42c3-a8a7-3185216f7f51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/?include=relationships",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								},
								{
									"key": "include",
									"value": "relationships"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"talent_id doesn't return null\", function () {\r",
									" pm.expect(data.id).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"type returns profile\", function () {\r",
									" pm.expect(jsonData.data[\"type\"]).to.eql(\"profile\");\r",
									" });\r",
									"pm.test(\"claimed is false\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"claimed\"]).to.eql(false);\r",
									" });\r",
									"pm.test(\"relationship_id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"relationship_id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"notification_preference doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.attributes[\"notification_preference\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"opportunity preference id doesn't return null\", function () {\r",
									" pm.expect(jsonData.data.relationships.opportunity_preferences.data[\"id\"]).to.not.eql(null);\r",
									" });\r",
									"pm.test(\"opportunity preference type returns opportunity_preference\", function () {\r",
									" pm.expect(jsonData.data.relationships.opportunity_preferences.data[\"type\"]).to.eql(\"opportunity_preference\");\r",
									" });"
								],
								"type": "text/javascript",
								"id": "4a9524ec-fcf5-4aa8-8ff9-880a096259ee"
							}
						}
					],
					"id": "54e3a0f2-cdfe-40f5-8b47-643ec9613034",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}?include=profession,primary_specialty,opportunity_preferences",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty,opportunity_preferences"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Certifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "c43b18fe-dd7b-4c81-b511-32a0f5746a89"
							}
						}
					],
					"id": "48a0bc51-e8de-49e6-ba92-7160c6227497",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/certifications",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"certifications"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Licenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "0407a5c6-9e01-4df3-a624-45dc86b18dac"
							}
						}
					],
					"id": "8944f759-616b-4542-8292-acc8a181f7f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/licenses",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"licenses"
							],
							"query": [
								{
									"key": "include",
									"value": "profession,primary_specialty",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Talent Work History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "111ae40a-0097-44ba-abed-3d13bf933d02"
							}
						}
					],
					"id": "61b447c9-96a6-49fe-84d4-3edf951da90e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}talents/{{talent_id}}/work_histories?include=references",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}",
								"work_histories"
							],
							"query": [
								{
									"key": "include",
									"value": "references"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Claimed Profile 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Cannot edit a claimed profile.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1df4cb75-ee4a-4519-8f8d-416cf957cbc0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "176ec34a-a3b9-4ead-afd7-0cd5fa984afc"
							}
						}
					],
					"id": "287e03c4-4ad7-4e00-9d19-c15343755f54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"platform.user+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform{{number}}\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\", \r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id2}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id2}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Gender 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"gender is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c8f4a8d9-f599-409f-8f80-c3b6d8cf0a57"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "93dcb557-d357-4a46-870e-81c1c2d241e8"
							}
						}
					],
					"id": "b10934ec-882e-4be8-bd66-96a1b7aff736",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"gender\": \"anything\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Notification Preference 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"notification_preference is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7c22becf-56e0-4f99-be11-26a05b89f100"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "ee866ef2-ebf5-402a-b81c-7d39662fbd63"
							}
						}
					],
					"id": "111fed50-022f-4f03-8f97-852a499bcb04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"Carrier Pigeon\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Primary Specialty ID 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"primary_specialty_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d76b4d68-05a6-4d82-affc-b9de0f154053"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "fce7ce70-b9ca-49b2-85d2-95d1f77183d4"
							}
						}
					],
					"id": "324242a2-b818-441b-8a06-fce0d5d459ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"primary_specialty_id\": \"12345678-abcd-efgh-1234-abcdefghijkl\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Profession ID 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "6a92c94d-8f62-4c3d-bc87-6cb25a8746a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "2320980b-04a7-45cb-b3d4-d9dfd22f2df6"
							}
						}
					],
					"id": "8682f036-ac71-4c29-b1bb-a780d2e9c8a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"profession_id\": \"12345678-abcd-efgh-1234-abcdefghijkl\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Invalid Phone Number 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e65b198c-3602-4daa-a38c-b97d8fc9ccb6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "8d95741a-1613-42c9-aecc-145e982da5da"
							}
						}
					],
					"id": "e1627253-362f-480c-b92e-991fc9bc3c3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"phone_number\": \"1-234-567-8888-9999\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Preference SMS w/o Mobile Number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1b61666f-28bb-4da2-b561-6f52464ee3ee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "5e1aec99-04ce-47f8-bfb7-6e72e9f914a5"
							}
						}
					],
					"id": "17d59df4-f6a2-4ac3-b417-403c5fab4063",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"sms\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Preference SMS w/ Mobile Number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number can't be blank\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "098b3a66-77ba-4a43-b708-c94f80a1d05f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 52)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email', 'sms', 'in-app', 'tel'];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(randomPreference);"
								],
								"type": "text/javascript",
								"id": "474e0b48-df40-4926-ad20-8959bef1c227"
							}
						}
					],
					"id": "f92ef579-9ffe-478c-9fa7-6622058c3584",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"notification_preference\": \"sms\",\r\n   \"mobile_number\": \"{{PhoneNumber}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Talent(Update Personal Information) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ff4620a0-7458-40e2-9122-2f9837d04765"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "d3dc0a78-4a46-4f3e-9c14-aba9e4aecbe0"
							}
						}
					],
					"id": "a22b8117-1c21-4640-86fc-c490db30a6d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"PlatformUpdate\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/{{talent_id}}",
							"host": [
								"{{url}}talents"
							],
							"path": [
								"{{talent_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Talent & Relationship Webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Pfofile Update Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"profile\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"talent_id\"));\r",
									"})\r",
									"\r",
									"/*Tests for Relationship Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[1].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[1].event.type).to.include(\"relationship\");\r",
									"})\r",
									"pm.test(\"Relationship ID\", function () {\r",
									"    pm.expect(jsonData.data[1].event.body.id).to.eql(pm.environment.get(\"relationship_id\"));\r",
									"})\r",
									"\r",
									"/*Tests for Profile Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[2].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[2].event.type).to.include(\"profile\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[2].event.body.id).to.eql(pm.environment.get(\"talent_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1f3b8c2e-f3f6-4c78-92c1-52951f87f697"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "dd0486d9-d027-4b01-a2b9-1fd4d3c1296e"
							}
						}
					],
					"id": "3daf63df-ead3-4e0b-8483-f9c60f7aa89d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=3",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "08d5f8c1-1bbe-4587-9e4b-0383413c5892",
			"description": "**POST** - [https://staging.kamana.app/api/talents/](https://staging.kamana.app/api/talents/)\n\n**Body**:\n\n{  \n\"first_name\": \"\",  \n\"last_name\": \"\",  \n\"claimed\": boolean, **\\*Optional**  \n\"email\": \"\",  \n\"notification_preference\": \"\", **\\*Optional**  \n\"profession_id\": \"\",  \n\"primary_specialty_id\": \"\",  \n\"phone_number\": \"\", **\\*Optional**  \n\"gender\": \"\", **\\*Optional**  \n\"available_on\": \"\" **\\*Optional**  \n}\n\n**GET** - https://staging.kamana.app/api/talents/talent_profile_id"
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(agency id doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ebfe66c5-afca-4d0c-a17b-f7d716abf256"
							}
						}
					],
					"id": "c42e7f57-0f97-4aae-811f-673f4c6e5ae3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/abcd-1234-abcd-1234/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(invalid talent_profile_id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "234468f2-82be-4ab4-97c0-6512ab8fdd2f"
							}
						}
					],
					"id": "cb485f7a-57f6-4136-bf57-1aa3b188f315",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}z\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(primary_contact_email - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"bad_primary_contact_email\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4de1e5a6-253e-422b-81a9-c48740dd3a11"
							}
						}
					],
					"id": "7818a3ac-aef3-4157-9d26-6369822ece28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"doesnotexist@kamana.com\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"relationship_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "7baabf19-8940-46ff-b633-d3c77bd0f798"
							}
						}
					],
					"id": "90395e7e-8330-43b2-b7f5-95b55fc1296b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_id & primary_contact_email(Relation exists - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profile_id has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "114b053f-bef3-4cab-9f87-00d50ff34497"
							}
						}
					],
					"id": "6f1307fd-f7b0-4c01-8dca-3a3c4c8bfba9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_profile_id\": \"{{talent_id}}\",\r\n   \"primary_contact_email\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(agency id doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "37b0f6c6-8530-4d98-b570-044fcf8c8d35"
							}
						}
					],
					"id": "bba7c50b-9686-4b1b-8373-bee66dfcc981",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/abcd-1234-abcd-1234/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(invalid talent_profile_email - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7de8f80b-4a4b-4e64-b7ef-1bdcd249efe3"
							}
						}
					],
					"id": "590d9d11-43bb-4512-bf6c-ce3a8811d2d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}z\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(primary_contact_user_id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2a783373-f532-4a55-acff-64831fda1f96"
							}
						}
					],
					"id": "b4bf5bdf-f49b-47e8-9008-4c62984a2a37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}z\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "236fa0c6-7889-4cd3-89b9-34a9df11f461"
							}
						}
					],
					"id": "77b40ba6-4f58-4dd3-938c-5c9907dafbbf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "POST - Relationship w/ talent_profile_email & primary_contact_user_id(Relationship exists - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profile_id has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9551e048-ab7a-4a16-8160-e348d99a39c5"
							}
						}
					],
					"id": "391acff0-9de4-475b-a785-ba59009c873b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"talent_email\": \"{{talent_email}}\",\r\n   \"primary_contact_user_id\": \"{{account_id}}\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, do not hire true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "e5263d7e-1823-49af-8aff-0dcaba2ab6ce"
							}
						}
					],
					"id": "f3473f45-fbf2-49b1-bcb7-e4e5497c7b8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": true,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, do not hire true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "e3a4d721-502a-4cc8-a8cb-e366ee147cb5"
							}
						}
					],
					"id": "a1f2b105-8134-4334-ab9c-d4f3e6cdb8b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"do_not_hire?\": true\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "8d45709e-91cc-44c2-b79e-bcc81bcfee4f"
							}
						}
					],
					"id": "a6f30bf5-b960-4fa2-8498-223b1b8aacda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "0b8d0f97-1661-4f77-9eb7-066768704990"
							}
						}
					],
					"id": "b88bbc6e-c421-45cf-a825-36c11ba1e3f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(prospect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "3953eea0-c233-427c-8880-66892f4a2b1f"
							}
						}
					],
					"id": "e4905eae-7846-4766-a690-7b16a5d64655",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"prospect\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(prospect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "708e3ad5-8851-4b01-9195-b3db24608839"
							}
						}
					],
					"id": "2bc07846-fa48-45ce-8894-d5637d3e0cc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"prospect\"\r\n}"
						},
						"url": "{{url}}relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(engaged)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "d7de878d-9f73-4996-8eff-21d4eab80752"
							}
						}
					],
					"id": "c47ec8eb-046c-4e8c-a0a0-ea5b29bc601e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"engaged\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(review status w/o sub_status 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "a5c15e69-c3ed-429c-a411-e6402459e948"
							}
						}
					],
					"id": "10557709-cc0a-458d-a44a-2db025201e87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"review\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(review)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "f35db0bd-d581-4af0-88f4-8b2dcdb9dfc9"
							}
						}
					],
					"id": "245d26e9-0934-44f1-b6de-3df421fd024f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"review\",\r\n   \"sub_status\": \"engaged\",\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ status fields only(archived)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "44ffaf8c-bebf-48ea-95ac-0d5061b52813"
							}
						}
					],
					"id": "49a3e5d3-7b97-4429-a0ab-f8424aad753a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"archived\",\r\n   \"sub_status\": \"review\",\r\n   \"status_reason\": \"testing\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(invalid status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "12823f7f-2d10-4c25-919d-9e5074d04b8c"
							}
						}
					],
					"id": "573546cf-05b9-4820-912b-62a7c2fbd9fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"invalid\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Relationship w/ all fields(interested, invalid user ids 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "4ceca80c-81da-4745-a6c5-fc74903bd15b"
							}
						}
					],
					"id": "1f6bf00a-84a1-4cfd-922c-d691431ab964",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\": \"interested\",\r\n   \"sub_status\": null,\r\n   \"status_reason\": \"testing\",\r\n   \"do_not_hire?\": false,\r\n   \"do_not_hire_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303z\",\r\n   \"primary_contact_user_id\": \"af0d0637-ff12-4e74-8afb-7ef0733fb303z\"\r\n}"
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Relationship",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "b3c7e920-0e45-4256-882d-77ccc9bee158"
							}
						}
					],
					"id": "a4ecabd6-1f3b-4787-b6b2-71504ea00222",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/{{relationship_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Relationship(400 Invalid Relationship ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "54940560-6ed8-4fe8-9704-6cbba2f26299"
							}
						}
					],
					"id": "416612c0-beb2-4a23-9b93-eb569d4efbe2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/z4856237b-4957-44ee-a2e2-2ac218d4ef5c"
					},
					"response": []
				},
				{
					"name": "GET - Relationship(404 No Relationship w/ account_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "0a8bdd56-c1b7-4345-ac33-f7ad33baefef"
							}
						}
					],
					"id": "db04f1e2-fe02-473b-a28c-1b87f3ef5b20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}accounts/{{agency_account_id}}/relationships/b6d4da8a-a566-4872-82f6-e6faf126461c"
					},
					"response": []
				}
			],
			"id": "c66a49b2-8464-468e-9d40-41e03224f594"
		},
		{
			"name": "Engagements",
			"item": [
				{
					"name": "GET - Professions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"\r",
									"let length1 = jsonData.data.length;\r",
									"var json1 = {\r",
									"  random: Math.ceil(Math.random() * length1)\r",
									"}\r",
									"pm.environment.set(\"profession_id1\", jsonData.data[json1.random][\"id\"]);\r",
									"console.log(length1);\r",
									"\r",
									"let length2 = jsonData.data.length;\r",
									"var json2 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id2\", jsonData.data[json2.random][\"id\"]);\r",
									"console.log(length2);\r",
									"\r",
									"let length3 = jsonData.data.length;\r",
									"var json3 = {\r",
									"  random: Math.ceil(Math.random() * length3)\r",
									"}\r",
									"pm.environment.set(\"profession_id3\", jsonData.data[json3.random][\"id\"]);\r",
									"console.log(length3);\r",
									"console.log(profession_id)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "19582c89-e0c0-4670-8236-f669df88113a"
							}
						}
					],
					"id": "a02616f8-466c-4cf4-a201-10f2974da4a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Specialties Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var primary_specialty_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"primary_specialty_id\", primary_specialty_id);\r",
									"console.log(length);\r",
									"console.log(primary_specialty_id)"
								],
								"type": "text/javascript",
								"id": "9a68a935-4d8b-41bf-a45e-03f7aaa294d0"
							}
						}
					],
					"id": "c28d408f-8a6e-4aab-a3bc-044e20626ddc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "GET - Requisitions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var job_requisition_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"job_requisition_id\", job_requisition_id)\r",
									"console.log(length)\r",
									"console.log(job_requisition_id)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "c82d9467-e28e-4555-b27d-62248f3ee5aa"
							}
						}
					],
					"id": "efd8f40b-63b1-40f3-bd85-20dc44432500",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);"
								],
								"type": "text/javascript",
								"id": "e0a48c80-7e73-4baa-b456-f2ee88b7c09d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "10422e56-f3bd-42ec-8acc-a27934c7bbf7"
							}
						}
					],
					"id": "f3fdc609-b7c7-473b-bb7f-2d1c6f72d798",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Engagements - Relationship ID from different token 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "e9330c87-589c-4844-ba75-503198a3216c"
							}
						}
					],
					"id": "38e34256-ff62-4f15-ab97-bf1ee7776848",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"97435a3b-6858-4788-b1b1-9afe9a4bb5a9\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements - Unrelated Job Req ID 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "5ebd0037-a03c-4ead-bb18-cb2f31566e54"
							}
						}
					],
					"id": "7c09569e-cbf9-4a1c-bcab-7108546b3f0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"a0990a44-467f-4ff8-9f0d-9c89d75441de\",\r\n  \"job_requisition_id\": \"ca26de92-68d7-48b8-a1d2-b07efdc2a758\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements - No Assignee 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "ec6d090b-efdb-40ea-8775-320b367d1bae"
							}
						}
					],
					"id": "388f0986-fa7c-4b0a-a2c8-142da39edb1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"a0990a44-467f-4ff8-9f0d-9c89d75441de\",\r\n  \"job_requisition_id\": \"c41132ff-6e2a-477f-bd8f-ea8daf01ade6\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST Engagements 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5afcb420-0dd9-4f54-aeef-b85013ad7abd"
							}
						}
					],
					"id": "49882868-a0ee-46e5-8576-ad3521c986c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"relationship_id\": \"{{relationship_id}}\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('talent_id', jsonData.data[\"id\"]);\r",
									"pm.environment.set('relationship_id', jsonData.data.attributes[\"relationship_id\"]);\r",
									"pm.environment.set('talent_email', jsonData.data.attributes[\"email\"]);"
								],
								"type": "text/javascript",
								"id": "ad93aef5-9985-4694-88b0-bb3df4dab043"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 1 second delay */\r",
									"setTimeout(() => {}, 1000);\r",
									"\r",
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "8768a03a-1168-4cdd-ad13-1470fde6dbaa"
							}
						}
					],
					"id": "a8c27f9d-6cbf-46c9-a0e7-204ad2164758",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Engagements - w/ optional fields 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"pay: \"+ randomPay);\r",
									"\r",
									"/*regular hourly rate*/\r",
									"const rate = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomRate = rate[Math.floor(Math.random() * rate.length)];\r",
									"pm.variables.set('rate', randomRate)\r",
									"console.log(\"rate: \" + randomRate);\r",
									"\r",
									"/*random stipend generator*/\r",
									"const stipend = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"const randomstipend = stipend[Math.floor(Math.random() * stipend.length)];\r",
									"pm.variables.set('stipend', randomstipend)\r",
									"console.log(\"stipend: \" + randomstipend);\r",
									"\r",
									"/*random per diem generator*/\r",
									"const diem = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"const randomdiem = diem[Math.floor(Math.random() * diem.length)];\r",
									"pm.variables.set('diem', randomdiem)\r",
									"console.log(\"per diem: \"+ randomdiem);\r",
									"\r",
									"/*random travel reimbursement generator*/\r",
									"const travel = ['1000', '2000', '3000', '4000', '5000'];\r",
									"const randomtravel = travel[Math.floor(Math.random() * travel.length)];\r",
									"pm.variables.set('travel', randomtravel)\r",
									"console.log(\"travel: \" + randomtravel);\r",
									"\r",
									"/*engagement start and end dates*/\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var engagement_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"    pm.variables.set('engagement_starts_on', engagement_starts_on)\r",
									"\r",
									"var engagement_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"    pm.variables.set('engagement_ends_on', engagement_ends_on)\r",
									"\r",
									"console.log(\"engagement_starts_on: \" + engagement_starts_on);\r",
									"console.log(\"engagement_ends_on: \" + engagement_ends_on);"
								],
								"type": "text/javascript",
								"id": "cba2750f-f05b-45d0-8bb6-902efc75f0a3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "f7cb3fbc-bc69-47b3-9f57-67b77938b724"
							}
						}
					],
					"id": "08bda477-dd30-46ff-82e0-99ae33503c08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_contract_id\": \"{{contract_id}}\",\r\n  \"relationship_id\": \"{{relationship_id}}\",\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"fast_start\": false,\r\n  \"weekly_gross_pay\": \"{{pay}}\",\r\n  \"regular_hourly_rate\": \"{{rate}}\",\r\n  \"weekly_housing_stipend\": \"{{stipend}}\",\r\n  \"weekly_per_diem\": \"{{diem}}\",\r\n  \"travel_reimbursement\": \"{{travel}}\",\r\n  \"compensation_comments\": \"Platform Test\",\r\n  \"starts_on\": \"{{engagement_starts_on}}\",\r\n  \"ends_on\": \"{{engagement_ends_on}}\",\r\n  \"contract_length\": 0,\r\n  \"has_pay_package?\": true,\r\n  \"hours_per_week\": 0,\r\n  \"shift_end_time\": 0,\r\n  \"shift_start_time\": 0,\r\n  \"status\": \"pending\",\r\n  \"status_flow\": \"agency\",\r\n  \"subscriber_ids\": [],\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"assignee\": \"{{assignee}}\"\r\n}"
						},
						"url": "{{url}}engagements/"
					},
					"response": []
				},
				{
					"name": "Create Engagement Webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"create\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "316d102e-82c6-4a3c-9c4e-5a6bbdbd04b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "d9e96764-e21a-45b2-9967-cccdb4ab8aa3"
							}
						}
					],
					"id": "58defe6b-c208-4e6f-ad36-bc481b48176c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Talent(w/ options & params) Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "54f51b1a-c4d1-4477-9a8a-f607b2eb0a45"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*phone number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*phone percent generator*/\r",
									"const Percent = ['5', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomPercent = Percent[Math.floor(Math.random() * Percent.length)];\r",
									"pm.variables.set('Percent', randomPercent)\r",
									"console.log(\"percent complete: \"+randomPercent);\r",
									"\r",
									"var digit1 = {\r",
									"  random: Math.ceil(Math.random(2) * 9)\r",
									"}\r",
									"var dig1 = digit1.random;\r",
									"\r",
									"var digit2 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig2 = digit2.random;\r",
									"\r",
									"var digit3 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig3 = digit3.random;\r",
									"\r",
									"var digit4 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig4 = digit4.random;\r",
									"\r",
									"var digit5 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig5 = digit5.random;\r",
									"\r",
									"var digit6 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig6 = digit6.random;\r",
									"\r",
									"var digit7 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig7 = digit7.random;\r",
									"\r",
									"var digit8 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig8 = digit8.random;\r",
									"\r",
									"var digit9 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig9 = digit9.random;\r",
									"\r",
									"var digit10 = {\r",
									"  random: Math.ceil(Math.random() * 9)\r",
									"}\r",
									"var dig10 = digit10.random;\r",
									"\r",
									"var PhoneNumber = dig1.toString() + dig2.toString() + dig3.toString() + dig4.toString() + dig5.toString() + dig6.toString() + dig7.toString() + dig8.toString() + dig9.toString() + dig10.toString();\r",
									"pm.variables.set('PhoneNumber', PhoneNumber)\r",
									"console.log(\"PhoneNumber: \"+PhoneNumber)\r",
									"\r",
									"/*available on date*/\r",
									"var moment = require('moment');\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"var available_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"pm.environment.set(\"available_on\", available_on)\r",
									"console.log(\"available_on: \"+available_on)\r",
									"\r",
									"/*random gender generator*/\r",
									"const gender = ['male', 'female', 'non-binary', 'other', 'transgender'];\r",
									"const randomGender = gender[Math.floor(Math.random() * gender.length)];\r",
									"pm.variables.set('gender', randomGender)\r",
									"console.log(\"gender: \"+randomGender);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean = ['true', 'false'];\r",
									"const randomBoolean = boolean[Math.floor(Math.random() * boolean.length)];\r",
									"pm.variables.set('boolean', randomBoolean)\r",
									"console.log(\"middle name & shift days: \"+randomBoolean);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean1 = ['true', 'false'];\r",
									"const randomBoolean1 = boolean1[Math.floor(Math.random() * boolean1.length)];\r",
									"pm.variables.set('boolean1', randomBoolean1)\r",
									"console.log(\"shift mids: \"+randomBoolean1);\r",
									"\r",
									"/*random flag generator*/\r",
									"const boolean2 = ['true', 'false'];\r",
									"const randomBoolean2 = boolean2[Math.floor(Math.random() * boolean2.length)];\r",
									"pm.variables.set('boolean2', randomBoolean2)\r",
									"console.log(\"shift nights: \"+randomBoolean2);\r",
									"\r",
									"/*random weekly hours generator*/\r",
									"const hours = ['24', '32', '40', '48', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours per week: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*notification preference generator*/\r",
									"const preference = ['email-always', 'email'/*, 'sms', 'in-app', 'tel'*/];\r",
									"const randomPreference = preference[Math.floor(Math.random() * preference.length)];\r",
									"pm.variables.set('preference', randomPreference)\r",
									"console.log(\"notification preference: \"+randomPreference);"
								],
								"type": "text/javascript",
								"id": "35e03b0d-ba92-4c3c-89cb-30f5c5fcdb30"
							}
						}
					],
					"id": "09d4dd40-ecfd-410b-bc17-dd252e44d231",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"claimed\": false,\r\n   \"email\": \"adrian.allen+{{number}}@Kamana.com\", \r\n   \"first_name\": \"Platform\",\r\n   \"gender\": \"{{gender}}\",\r\n   \"last_name\": \"Talent{{number}}\",\r\n   \"no_middle_name\": {{boolean}},\r\n   \"notification_preference\": \"{{preference}}\",\r\n   \"opportunity_preferences\": [\r\n     {\r\n       \"available_on\": \"{{available_on}}\",\r\n       \"desired_contract_length\": {{contract_length}},\r\n       \"hours_per_week\": {{hours}},\r\n       \"minimum_weekly_gross_pay\": \"{{pay}}\",\r\n       \"name\": \"First Preferences\",\r\n       \"shift_days\": {{boolean}},\r\n       \"shift_mids\": {{boolean1}},\r\n       \"shift_nights\": {{boolean2}}\r\n     }\r\n  ],\r\n   \"percent_complete\": {{Percent}},\r\n   \"phone_number\": \"{{PhoneNumber}}\",\r\n   \"primary_contact_email\": \"adrian.allen+{{number}}@Kamana.com\",\r\n   \"primary_specialty_id\": \"{{primary_specialty_id}}\",\r\n   \"profession_id\": \"{{profession_id}}\",\r\n   \"source\": \"direct\",\r\n   \"years_of_experience\": {{years}}\r\n}"
						},
						"url": {
							"raw": "{{url}}talents/",
							"host": [
								"{{url}}talents"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include",
									"value": "primary_specialty,profession,opportunity_preferences",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Contract(all fields entered - 201) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contract_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "144f4fc1-c7b8-4319-871f-15eb6fbbd878"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "8411a6a3-8063-4f3d-aa5b-585bff000e92"
							}
						}
					],
					"id": "07a9fa1c-ef85-419a-bd9a-9880c66e5f69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": \"3.50\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET Engagements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"/*pm.environment.set(\"extension_id\", jsonData.data[0][\"id\"]);*/\r",
									"var attributes = jsonData.data.attributes;\r",
									"var starts_on = attributes[\"starts_on\"];\r",
									"var ends_on = attributes[\"ends_on\"];\r",
									"pm.environment.set('starts_on', jsonData.data.attributes[\"starts_on\"]);\r",
									"pm.environment.set('ends_on', jsonData.data.attributes[\"ends_on\"]);\r",
									"//pm.environment.set(\"engagement_starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('extension_start0', moment(ends_on).subtract(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end0', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start', moment(ends_on).add(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start1', moment(ends_on).add(2, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end1', moment(ends_on).add(6, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start2', moment(ends_on).add(3, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end2', moment(ends_on).add(1, 'years').format((\"YYYY-MM-DD\")));\r",
									"\r",
									"console.log(starts_on);\r",
									"console.log(ends_on);"
								],
								"type": "text/javascript",
								"id": "c4eb97eb-ad11-495e-805c-e1ab42bb575c"
							}
						}
					],
					"id": "420f3f87-2a0f-4b02-8e77-5965c7c0a1d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Start Date Update 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1; //constant value of years that will be added\r",
									"const monthsInTheFuture = 1; //constant value of months that will be added\r",
									"const daysInTheFuture = 14; //constant value of days that will be added\r",
									"const yearsInThePast = 1; //constant value of years that will be subtracted\r",
									"const monthsInThePast = 1; //constant value of months that will be subtracted\r",
									"const daysInThePast = 1; //constant value of days that will be subtracted\r",
									"\r",
									"var starts_on = moment()\r",
									"    .add(daysInTheFuture, 'days').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"starts_on: \" + starts_on); //displays value in console log\r",
									"\r",
									"pm.environment.set(\"starts_on\", starts_on);"
								],
								"type": "text/javascript",
								"id": "edf380a5-fa8a-496c-8c55-38fbf5f37132"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "09ed213e-dade-4cd3-8a1e-97c228f58dad"
							}
						}
					],
					"id": "ca16359b-c70b-4df5-8b69-b2e5f1f456f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"starts_on\": \"{{starts_on}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "31188cab-b17b-4575-9209-f4a3e0ab141a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "2d6fe292-1a15-475a-b0c0-7c5941d8432e"
							}
						}
					],
					"id": "669f4e1f-8aa0-4599-8a92-a2cf8b2994a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Pending to Qualifying",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e2b3d365-7f3d-48e3-8f46-fac53a6f363b"
							}
						}
					],
					"id": "ae02cd7e-140b-466d-bc29-91784a7e2432",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"qualifying\",\r\n  \"sub_status\": \"pending\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Ready to Submitted(Skipped Ready, 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"status Invalid status transition: qualifying => submitted. Valid transition statuses: [:pending, :ready, :completed] \");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "690ef499-18ce-40b0-adad-e1bbaa723f22"
							}
						}
					],
					"id": "2dc7cada-13eb-4cf6-9481-7fd565e45c71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"2023-12-31\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"submitted\",\r\n  \"sub_status\": \"ready\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Qualifying to Ready",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "15fb631b-3301-4bd8-b92d-8605e3152026"
							}
						}
					],
					"id": "2b4f69ef-294d-4c6a-b153-6cebcdafb382",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"ready\",\r\n  \"sub_status\": \"qualifying\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Ready to Submitted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1553388b-2226-4bb7-8c6d-025e3fca1540"
							}
						}
					],
					"id": "de64722c-8a9f-4105-8550-6b49ee46951b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"submitted\",\r\n  \"sub_status\": \"Ready\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Submitted to Interviewing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d79dd964-b179-418c-b12d-8f5036099614"
							}
						}
					],
					"id": "f3bebe2b-c7b9-48fa-b4b2-4fc3dc16c797",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"interviewing\",\r\n  \"sub_status\": \"submitted\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements -  Interviewing to Offered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0dfc9d88-9db0-40b0-af19-87aa61a43062"
							}
						}
					],
					"id": "bbb5e7d7-472a-43fc-b40b-f6c1213b30ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"offered\",\r\n  \"sub_status\": \"interviewing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Offered to Placed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a4c13111-fd10-4655-b5c9-9c37d1bcf193"
							}
						}
					],
					"id": "7c304ed7-ff08-4920-9fe0-4e970baaa356",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Platform testing\",\r\n  \"status\":\"placed\",\r\n  \"sub_status\": \"offered\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Placed to Credentialing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ccb1d9c9-c242-4903-a480-7c788e02a83a"
							}
						}
					],
					"id": "5b90280e-9fa1-48f1-9438-33278f02b680",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"{{starts_on}}\",\r\n  \"status_reason\": \"Testing\",\r\n  \"status\":\"credentialing\",\r\n  \"sub_status\": \"offered\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Credentialing to Credentialed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "21091651-2049-4811-b18a-05625f525985"
							}
						}
					],
					"id": "d2a7afc2-48de-4016-a3b7-254210e32f89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"credentialed\",\r\n  \"sub_status\": \"credentialing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Credentialed to Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4b2758da-07e7-4868-9989-d6ef9293714f"
							}
						}
					],
					"id": "2671a981-c29a-4239-bf01-74a11f596d62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"cleared\",\r\n  \"sub_status\": \"credentialed\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Cleared to Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "cd478fe5-b0c3-4a41-bc29-9eb1e5a7bcb5"
							}
						}
					],
					"id": "f023b01c-9d87-42c9-b449-61271e51d803",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"active\",\r\n  \"sub_status\": \"cleared\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete(Blank Sub Status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"null value where string expected\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "be594965-244f-4af9-aa89-6f5a9217622a"
							}
						}
					],
					"id": "c1a5f103-d329-495e-b0e2-b463ca9d8d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"complete\",\r\n  \"sub_status\": null,\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete(Invalid Sub Status 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"null value where string expected\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a1ca0ae2-bbfb-4c2e-b420-1d39e40217c3"
							}
						}
					],
					"id": "81d84b88-221e-4ada-be5a-ac8d7f51b505",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": null,\r\n  \"status\":\"complete\",\r\n  \"sub_status\": \"testing\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Engagements - Active to Complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1e460429-0897-4574-8080-9756f3d1990f"
							}
						}
					],
					"id": "6eea17d4-b04b-4839-8737-fca813f24e1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"compensation_comments\": \"Last day of the month\",\r\n  \"contract_length\": 10,\r\n  \"ends_on\": \"{{ends_on}}\",\r\n  \"hours_per_week\": 32,\r\n  \"job_requisition_id\": \"{{job_requisition_id}}\",\r\n  \"profile_id\": \"{{talent_id}}\",\r\n  \"regular_hourly_rate\": \"110\",\r\n  \"shift_end_time\": 15,\r\n  \"shift_start_time\": 9,\r\n  \"starts_on\": \"2023-05-01\",\r\n  \"status_reason\": \"testing\",\r\n  \"status\":\"complete\",\r\n  \"sub_status\": \"cleared\",\r\n  \"travel_reimbursement\": \"1000\",\r\n  \"weekly_gross_pay\": \"2500\",\r\n  \"weekly_housing_stipend\": \"500\",\r\n  \"weekly_per_diem\": \"400\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "39cf1f18-4845-4a1c-800a-7fb80bf3b345"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "d32044f1-057a-43c5-860e-5b7c4e938bf8"
							}
						}
					],
					"id": "052d63d8-4664-4679-9b5b-eaf804e59929",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber ID 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "8189c6d5-3338-4f17-98ed-cec157ea3116"
							}
						}
					],
					"id": "97fd847d-67c9-4597-b35b-cfcc2311e451",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{account_id}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data[0].attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));\r",
									"console.log(attributes);*/"
								],
								"type": "text/javascript",
								"id": "fff9cdc1-617c-4996-96df-23d620bd04ca"
							}
						}
					],
					"id": "98fac4e7-2c56-40cd-9459-356a4eedb485",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{account_id}}\",\"{{account_id2}}\",\"{{account_id3}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs Clear list 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"[]\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7950c4cb-15b9-4dff-85c7-85207e09aca2"
							}
						}
					],
					"id": "a257eb1c-a76e-48d9-9273-eb2cea7942f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": []\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "Update Engagement Webhook - PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"/*Tests for Create Engagement Webhook*/\r",
									"pm.test(\"Webhook Action\", function () {\r",
									"    pm.expect(jsonData.data[0].event.action).to.include(\"update\");\r",
									"})\r",
									"pm.test(\"Webhook Type\", function () {\r",
									"    pm.expect(jsonData.data[0].event.type).to.include(\"engagement\");\r",
									"})\r",
									"pm.test(\"Talent ID\", function () {\r",
									"    pm.expect(jsonData.data[0].event.body.id).to.eql(pm.environment.get(\"engagement_id\"));\r",
									"})"
								],
								"type": "text/javascript",
								"id": "246272fa-0145-40ea-aae5-90ca3d9dbc08"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* 3 second delay */\r",
									"setTimeout(() => {}, 3000);"
								],
								"type": "text/javascript",
								"id": "10dd2dbb-3235-4227-a7f8-2e269f7d7e36"
							}
						}
					],
					"id": "cd9dc586-d3e7-43ab-b6c4-aab1e233185f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PD_Token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.pipedream.com/v1/workflows/{{QA_workflow}}/event_summaries?expand=event&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"pipedream",
								"com"
							],
							"path": [
								"v1",
								"workflows",
								"{{QA_workflow}}",
								"event_summaries"
							],
							"query": [
								{
									"key": "expand",
									"value": "event"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs (No User Found 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"subscriber_ids no user found\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "980fb34d-4f15-4755-b4c7-7936f29c876f"
							}
						}
					],
					"id": "11469026-fbd8-4464-9857-39b92de51cb0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"{{engagement_id}}\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Engagements Subscriber IDs (Invalid UUID 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"subscriber_ids must be an array of valid UUIDs\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "eb8e9a38-5fec-41a4-8e6e-400332bd63ff"
							}
						}
					],
					"id": "d8017fbd-6315-41cc-b6ee-84c4ca07b255",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriber_ids\": [\"1234-abcd\"]\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				}
			],
			"id": "b6095eb2-55d7-4d43-ba75-0f2026ea7aae",
			"description": "**POST -** https://staging.kamana.app/api/talents/\n\nEndFragmen\n\n**Body:**\n\n{  \n\"relationship_id\": \" \",  \n\"job_requisition_id\": \" \",  \n\"assignee\": \"email address\",  \n\"weekly_gross_pay\": \"\", **\\*Optional**  \n\"regular_hourly_rate\": \" \", **\\*Optional**  \n\"weekly_housing_stipend\": \" \", **\\*Optional**  \n\"weekly_per_diem\": \" \", **\\*Optional**  \n\"travel_reimbursement\": \" \", **\\*Optional**  \n\"compensation_comments\": \" \", **\\*Optional**  \n\"starts_on\": \"YYYY-MM-DD\", **\\*Optional**  \n\"ends_on\": \"YYYY-MM-DD\" **\\*Optional**  \n}\n\n**GET -** https://staging.kamana.app/api/engagements/**engagement_id**\n\n[**PUT**EndFragment](https://staging.kamana.app/api/engagements/engagement_idPUTEndFragmentPUT)\n\n**PUT** - https://staging.kamana.app/api/engagements/**engagement_id**\n\n**Body:**\n\n{  \n\"compensation_comments\": \"Last day of the month\",  \n\"contract_length\": 10,  \n\"ends_on\": \"2023-10-01\",  \n\"hours_per_week\": 32,  \n\"job_requisition_id\": \"819ec0ed-e117-4dda-ab63-0e239c73815f\",  \n\"profile_id\": \"43ec9b11-dd46-4246-89ee-a7e94e0dd6db\",  \n\"regular_hourly_rate\": \"110\",  \n\"shift_end_time\": 15,  \n\"shift_start_time\": 9,  \n\"starts_on\": \"2023-01-01\",  \n\"status_reason\": \"testing\",  \n\"status\":\"pending\",  \n\"sub_status\": null,  \n\"travel_reimbursement\": \"1000\",  \n\"weekly_gross_pay\": \"2500\",  \n\"weekly_housing_stipend\": \"500\",  \n\"weekly_per_diem\": \"400\"  \n}"
		},
		{
			"name": "Engagement Extension",
			"item": [
				{
					"name": "GET Engagements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"/*pm.environment.set(\"extension_id\", jsonData.data[0][\"id\"]);*/\r",
									"var attributes = jsonData.data.attributes;\r",
									"var ends_on = attributes[\"ends_on\"];\r",
									"//pm.environment.set(\"engagement_starts_on\",attributes[\"starts_on\"]);\r",
									"var moment = require('moment');\r",
									"pm.environment.set('extension_start0', moment(ends_on).subtract(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end0', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start', moment(ends_on).add(1, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end', moment(ends_on).add(3, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start1', moment(ends_on).add(2, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end1', moment(ends_on).add(6, 'months').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_start2', moment(ends_on).add(3, 'days').format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set('extension_end2', moment(ends_on).add(1, 'years').format((\"YYYY-MM-DD\")));\r",
									"\r",
									"console.log(ends_on);"
								],
								"type": "text/javascript",
								"id": "b5889492-5804-4bcf-aef0-cf57a2c7f702"
							}
						}
					],
					"id": "717ba90d-a323-4a49-9ae0-ccb5b90098b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}"
					},
					"response": []
				},
				{
					"name": "POST Extension(Starts before end of engagement)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ac9addf9-a949-4965-81dd-000b99c8aec8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on must be after the Engagement end date\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3a89dc11-c97d-4f8d-8010-85134afa24ba"
							}
						}
					],
					"id": "84704667-1d6e-40c2-988e-8584c18fc528",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start0}}\",\r\n    \"ends_on\": \"{{extension_end0}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension No start date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2e5b187c-fc6e-414b-973a-b016400710f7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d4c51ceb-25e2-42e9-b8dc-fbb79f5ecab3"
							}
						}
					],
					"id": "95d59a74-2d05-4b1e-a265-a04c1fa8bda7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension No end date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a5673000-0d28-4080-be6c-38a799c5bf1b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8a59a039-e7a9-49b7-ac77-a06d505519ea"
							}
						}
					],
					"id": "65fc1a18-9508-47b6-bad8-fbe80665480f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "POST Extension",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 2;\r",
									"const daysInTheFuture = 3;\r",
									"const durationInDays = 7;\r",
									"\r",
									"const extension_start_at = moment()\r",
									"    .add(yearsInTheFuture, 'years')\r",
									"    .add(monthsInTheFuture, 'months')\r",
									"    .add(daysInTheFuture, 'days')\r",
									"\r",
									"extension_end = moment()\r",
									"    .add(yearsInTheFuture + yearsInTheFuture, 'years')\r",
									"    .add(monthsInTheFuture, 'months')\r",
									"    .add(daysInTheFuture, 'days')\r",
									"\r",
									"pm.environment.set(\"extension_start\", extension_start_at.format((\"YYYY-MM-DD\")));\r",
									"pm.environment.set(\"extension_end\", extension_end.format((\"YYYY-MM-DD\")));\r",
									"\r",
									"//console.log(\"extension_start: \" + extension_start_at.format((\"YYYY-MM-DD\")));\r",
									"//console.log(\"extension_end: \" + extension_end.format((\"YYYY-MM-DD\")));\r",
									"\r",
									"//const date = moment();\r",
									"//pm.environment.set(\"date\", date.format((\"YYYY-MM-DD\")))\r",
									"//extension_start.format((\"YYYY-MM-DD\"));\r",
									"//extension_end.format((\"YYYY-MM-DD\"));\r",
									"\r",
									"//console.log('moment');"
								],
								"type": "text/javascript",
								"id": "a7c22822-989b-4505-8ae6-b7a3446359ac"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"extension_id\", jsonData.data[\"id\"]);\r",
									"var attributes = jsonData.data.attributes;\r",
									"pm.environment.set(\"ends_on\",attributes[\"ends_on\"]);\r",
									"pm.environment.set(\"starts_on\",attributes[\"starts_on\"]);\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1; //constant value of years that will be added\r",
									"const monthsInTheFuture = 1; //constant value of years that will be added\r",
									"\r",
									"var extension_start2 = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var extension_end2 = moment()\r",
									"    .add(monthsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"extension_start2: \" + extension_start2); //displays value in console log\r",
									"console.log(\"extension_end2: \" + extension_end2); //displays value in console log\r",
									"\r",
									"pm.environment.set(\"extension_start2\", extension_start2);\r",
									"pm.environment.set(\"extension_end2\", extension_end2);"
								],
								"type": "text/javascript",
								"id": "9d089901-159f-4518-b091-70142a1ec5c8"
							}
						}
					],
					"id": "726d98c1-3ac0-4aaf-9b81-38377261e1e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\",\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/"
					},
					"response": []
				},
				{
					"name": "GET Extensions 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "002ac172-3940-4e72-849d-0e1efefa4e47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bb3b02bf-6999-4475-afe4-cb54c4bf0035"
							}
						}
					],
					"id": "c15ee485-2c45-4287-9bc3-e0fe02ef4aae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/1a82e944-b9fa-4ee4-b67b-97c27aace40A/extensions"
					},
					"response": []
				},
				{
					"name": "GET Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c2f4a0e1-daaa-459f-9f00-8549a2ac52bc"
							}
						}
					],
					"id": "f78fea58-d1ee-4735-a14a-ab025e1b36f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions"
					},
					"response": []
				},
				{
					"name": "GET Extension 404 Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00a82cc2-26e3-475b-b463-27fd400305de"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9baa095e-c6ab-4402-8255-2de395be4168"
							}
						}
					],
					"id": "3d63031b-7215-4fec-9294-45733ef3d4fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions/6a661041-dda9-4f77-bbee-e2d8f74de37A"
					},
					"response": []
				},
				{
					"name": "GET Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "22d2c83a-7661-41da-9e33-640027e0131c"
							}
						}
					],
					"id": "278a1d99-7d70-4dc5-aecf-2013ab178bde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension start after ends_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on must be after the start date\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4018b823-fc11-43f5-b1b5-b8baac1a20c5"
							}
						}
					],
					"id": "adf95027-4483-44b6-940b-60d260c17ea3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_end}}\",\r\n    \"ends_on\": \"{{extension_start}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension starts_on invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "66b94af2-0703-42d4-b999-2c55b42414d1"
							}
						}
					],
					"id": "a8790805-caaf-4487-b4da-006e03bf0f01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"2023-00-01\",\r\n    \"ends_on\": \"{{extension_end}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension ends_on invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "fed7ecd7-6f3b-42ee-aaf0-fbb4d81f5ddf"
							}
						}
					],
					"id": "b5d1bc24-f233-41e0-8297-3b87783f9b51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start}}\",\r\n    \"ends_on\": \"2023-00-31\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension Update starts_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "74887fc3-6f03-4a41-8f14-ff90e79ae32e"
							}
						}
					],
					"id": "0106fda1-61e3-4308-bd31-eb563b515ef2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start1}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension Update ends_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "67cfab28-2bbc-443b-a2c4-87141a2a77d0"
							}
						}
					],
					"id": "a362ad3e-6bbe-4538-9065-186a5ed6d8f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ends_on\": \"{{extension_end1}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PUT Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3d8ae9a1-27c4-47d8-8916-912ede4812f5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a3a4f8dd-a525-4c6b-9844-97e001cd9e7d"
							}
						}
					],
					"id": "bbe0876e-9c1a-461d-8419-ef13211bfcce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start2}}\",\r\n    \"ends_on\": \"{{extension_end2}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "765a5051-8c8e-4958-9092-b348588d3ba1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "291dc796-df77-4561-ac2b-a16cf8fc46be"
							}
						}
					],
					"id": "618e8968-49c1-4ddb-bf02-0554387f7047",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{extension_start2}}\",\r\n    \"ends_on\": \"{{extension_end2}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0d65e178-9f98-408d-8ef7-7561458e2763"
							}
						}
					],
					"id": "4d681d8e-6e77-4713-90d3-668ac7f7dbda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Extension(404 for already deleted extension)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5d8d9094-b4e1-4e07-987c-4ae3bc51c2cb"
							}
						}
					],
					"id": "8985c4cc-13fa-48f8-a0cb-0b8764cb174f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/extensions/{{extension_id}}"
					},
					"response": []
				}
			],
			"id": "f78ef706-bb38-4267-bda8-2a537ec872ec"
		},
		{
			"name": "Engagement Links",
			"item": [
				{
					"name": "POST - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0a330150-e047-4179-aeb3-a37eb3cd39c1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "17dc2cc4-4843-415b-afcc-eeb809bd61a2"
							}
						}
					],
					"id": "4bb934b3-2153-4150-a2f1-7a21b3777e55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\",\r\n  \"label\": \"Platform Url{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(blank url  - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5be875dc-409b-447c-935d-060f55f50c57"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d1ab55fa-cc5e-474a-b33a-b20637c02d11"
							}
						}
					],
					"id": "297197ea-c74c-46a9-a589-50824c645247",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": null,\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(no url  - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "64594c90-8bf7-4d86-b836-af3a2e156df5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e96b4089-ef90-4f64-84cb-c436ecb6bb9d"
							}
						}
					],
					"id": "0c7b94d2-d170-44bf-9c4c-1ea887619f92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link(blank label  - 200)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7b8e8775-253a-43d6-9678-bd6a804693a2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b28976aa-ed30-470a-9f26-10194fd7e95b"
							}
						}
					],
					"id": "ca52ce22-7bb1-40e7-b0c1-1c424e2f9057",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "POST - Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "d297241a-8db5-428c-99a3-7fe7309f60f7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"engagement_link_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "8824811e-46e0-41b5-8014-3320e88aed85"
							}
						}
					],
					"id": "a4b5945d-26c2-4822-821d-84bb9c5a5a9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\",\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "PUT - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "45b34e8b-8589-44eb-9d97-0ecfaeea90c0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2d8cb845-4c29-4327-a074-0dd6615f792a"
							}
						}
					],
					"id": "ba86515a-fa1a-4a46-b0d7-d56f0d28887a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\",\r\n  \"label\": \"Platform Url{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PUT - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5f9684fa-5270-474d-9449-29cf0db3d8b3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1a9c1ea6-a90e-4b49-9e8f-e1c4f5a1e19f"
							}
						}
					],
					"id": "b04566ac-75a1-4909-92d5-726c7f7e042e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\",\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Engagement Link(invalid url - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "550e6208-5d95-420f-badb-f6f81393c44a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"url is not a valid URL\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2e0bbbc4-0885-462c-8f28-8e3abbb07c5f"
							}
						}
					],
					"id": "75bdf187-757b-4e31-b349-c1fabd28ef36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2NzkzMzQ2MjksImlhdCI6MTY3MTU1ODYyOSwiaXNzIjoia2FtYW5hIiwianRpIjoiZWQyNWFkNTItNzQ4ZC00YWRlLWExOTUtZDYzZjI0Y2YxODNmIiwibmJmIjoxNjcxNTU4NjI4LCJzdWIiOiI5ZWQ3OWZjYy01ODkxLTQ4YjMtOWFmMy05ZDEzMzlmMjBkODciLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiOWI0ZjZhN2EtN2Q0ZS00ZjI5LTg4ZTItMTJlMzZiMWI5OGRjIn0.7jMdG4cniS16qd8CG3dahCkvloyQlMRH1N1DgT2Xbxx0QGZL7dei9BXckSV5y2n1lmf5w5okcHgxzMHasrflfA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"Url\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "aba42c2f-aa3f-4dff-ba5f-65563240a9be"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "df68358e-7cb5-4cca-8db6-f3820cf76640"
							}
						}
					],
					"id": "b45888a4-03e2-48ce-8f9b-f5a27f9299f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"url\": \"{{Link}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Update Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random number generator\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"};\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random); //displays value in console log\r",
									"\r",
									"//urls\r",
									"const Link = ['https://qa.development.kamana-int.net/signin', 'https://development.kamana-int.net/signin', 'https://staging.kamana-int.net/signin', 'https://kamana.app/signin'];\r",
									"const randomLink = Link[Math.floor(Math.random() * Link.length)];\r",
									"pm.variables.set('Link', randomLink)\r",
									"console.log(randomLink); //displays value in console log"
								],
								"type": "text/javascript",
								"id": "4d4d54a9-b38d-42c1-9ea2-ff7980cddba2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2697067a-587a-4ef7-9721-8be27b7f6346"
							}
						}
					],
					"id": "e981fb3d-52e5-4ed1-8b95-1f5bf6b57b5d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzk0MTM5NTgsImlhdCI6MTY3MTYzNzk1OCwiaXNzIjoia2FtYW5hIiwianRpIjoiZDkxZmIxMDYtM2Y1NC00OTg5LTljMWMtYzdkNWE5MTM5MGFhIiwibmJmIjoxNjcxNjM3OTU3LCJzdWIiOiI2MzdhOTM5Yy0zZjMwLTQzZWYtOTg2MS1iYzFiMDE5YmE5MDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiYWZiNDBiNDktMGQ3Ny00NjQ1LWFiOGMtMjQ3NmNlY2ZjZWI0In0.uvCLVT6LK-gJ98lT_bh09v8THXux7zM2EAsP2GfyWtzS-etYSCfC5voP5-VQA9PEKQPEedxb-mRA2ZYLNHwOow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"label\": \"Platform Link{{number}}\"\r\n}"
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "afc9f144-b5cf-4ab6-bcfa-8418d9f230f7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9e6ae0d5-faa6-4902-ade8-23843d359dca"
							}
						}
					],
					"id": "ef55a357-3abb-4afc-8f44-985cdb8fb060",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Links(Invalid engagement id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8333c99e-baa4-473a-985a-c8bf5e33eb2f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1370690b-bf69-40fa-82f8-0f1328102deb"
							}
						}
					],
					"id": "aced5cc0-0a59-43e5-bbdd-432940022192",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}z/links"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "708c9ffa-33a8-4076-b370-8814ea594886"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "54e98e72-18ab-4d8c-be9f-a082f2a1b008"
							}
						}
					],
					"id": "fac9fe2d-9ec5-42db-af1c-72ec7c5d712f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link(invalid engagement id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8814cb75-9e13-45cb-b655-5768cb13eda8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"engagement_id not found\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2c9c8270-b2c3-4276-9f3a-cd9b27c41c81"
							}
						}
					],
					"id": "6a2f73da-6311-4ce3-9bb2-7ba4c7b056c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/abcd-1234-efgh-5678/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Link(invalid engagement link id - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "844e6900-3e5c-4fea-8c50-c03eabe96b14"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3cb12165-76ec-4ea6-9269-c42f01e13dae"
							}
						}
					],
					"id": "8e9ee546-cc1b-442c-919a-c15f6b955903",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/z{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "DELETE - Delete Engagement Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "78a7a134-b7cc-42f8-b6d7-1fe4edc5ddcd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4638381a-a19b-4fa3-87ce-4d7e39ffc579"
							}
						}
					],
					"id": "7983f3a2-1dca-4397-a5f3-84c9d8041099",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				},
				{
					"name": "DELETE - Delete Engagement Link(link already deleted - 404)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c9c11887-7e1c-4a0f-b236-bd8b790ffd9b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"}) "
								],
								"type": "text/javascript",
								"id": "f496e5b3-30a8-4095-8ae8-ac85656b655d"
							}
						}
					],
					"id": "9c0f653b-2dfe-49d9-abf6-d838a6fbc0ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}engagements/{{engagement_id}}/links/{{engagement_link_id}}"
					},
					"response": []
				}
			],
			"id": "e02eca14-b6fc-466c-ad42-9d9561db5350"
		},
		{
			"name": "Engagement Notes",
			"item": [
				{
					"name": "GET - Engagement Notes Collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "176c968e-f0f7-4742-a086-746a4227bb6a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7b4b9c07-87c5-4dd9-9dc7-796e009cded7"
							}
						}
					],
					"id": "05939d12-a11e-4afb-87eb-4cd302366798",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/notes"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "34506f94-4ba4-4954-ad81-f5a4dfe0b750"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "de991a42-bbb8-47a7-aa9d-a594641713fa"
							}
						}
					],
					"id": "94b1b18a-6c81-4f24-bddc-63a69dddfe18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/notes/{{note_id}}"
					},
					"response": []
				}
			],
			"id": "324a7f10-2379-46b9-bb01-52d7dab0493d"
		},
		{
			"name": "Engagement Rquirements",
			"item": [
				{
					"name": "GET - Engagement Requirements Collections",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bfab56e5-8a8f-466a-8bec-83532f8efac0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var data = jsonData.data[json.random];\r",
									"var id = data[\"id\"];\r",
									"pm.environment.set(\"engagement_requirement_id\", id)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"engagement_requirement_id: \"+id)"
								],
								"type": "text/javascript",
								"id": "25e7888e-fdcf-40e2-b1ac-3adb52f48c91"
							}
						}
					],
					"id": "dd6b53af-5b1b-4ec7-a556-aac41c7469a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements"
					},
					"response": []
				},
				{
					"name": "GET - Single Engagement Requirement",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "948c8a89-e352-4b15-958e-000babe56483"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f685fe2f-2c6a-41b7-8a83-75edb766b5ee"
							}
						}
					],
					"id": "13967e44-fcc2-4181-ba2c-d6833bbb3e10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg5MDQ4OTgsImlhdCI6MTY3MTEyODg5OCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzBkNDYwMGEtMjM5ZC00MGVmLTk5YzItYmI4ZWNjNWQzMmUzIiwibmJmIjoxNjcxMTI4ODk3LCJzdWIiOiJmMDM1NWJlNy1mMGNlLTQ3MmEtOGM0ZC01YjBiY2MzNTdhZDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiM2U0YjEwOGQtMWRlMi00MGU4LTg0YjEtMDJjMTMyYjk2ZjE0In0.SNl57W9A-J6qsb_d7Ws2_ODN7o4Idmb0t7uRLB7IiL9ZPz-zwQ-ugsYdkZR_jHP0iQ8ZMYO0rBM227GWvm4FhQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}"
					},
					"response": []
				}
			],
			"id": "1e816055-d6ed-4c6a-8ed0-e6966b5e06de"
		},
		{
			"name": "Engagement Rquirements Notes",
			"item": [
				{
					"name": "GET - Engagement Requirements Notes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "791a3eae-73fa-43c4-9969-ca5e684a2b39"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f0f7cdf0-d87a-4659-ab04-89a80fb032c0"
							}
						}
					],
					"id": "cb03e7f5-78dc-4373-b447-45f051f14023",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}/notes"
					},
					"response": []
				},
				{
					"name": "GET - Engagement Requirement Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "39b6a21a-083e-46d8-b721-c962b4e2d23e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c1f5c414-c883-4e29-91f9-116910df375b"
							}
						}
					],
					"id": "e86e3099-add8-43f4-96de-a40ae471bde2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg5MDQ4OTgsImlhdCI6MTY3MTEyODg5OCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzBkNDYwMGEtMjM5ZC00MGVmLTk5YzItYmI4ZWNjNWQzMmUzIiwibmJmIjoxNjcxMTI4ODk3LCJzdWIiOiJmMDM1NWJlNy1mMGNlLTQ3MmEtOGM0ZC01YjBiY2MzNTdhZDUiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiM2U0YjEwOGQtMWRlMi00MGU4LTg0YjEtMDJjMTMyYjk2ZjE0In0.SNl57W9A-J6qsb_d7Ws2_ODN7o4Idmb0t7uRLB7IiL9ZPz-zwQ-ugsYdkZR_jHP0iQ8ZMYO0rBM227GWvm4FhQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{url}}engagements/{{engagement_id}}/requirements/{{engagement_requirement_id}}/notes/{{note_id}}"
					},
					"response": []
				}
			],
			"id": "200535df-767b-4e42-b3df-13e99628e85d"
		},
		{
			"name": "Facilities",
			"item": [
				{
					"name": "GET - Facilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "5ae23484-bd0d-43aa-93d4-f0726441c514"
							}
						}
					],
					"id": "2f155d83-60bd-41f9-98bb-6cbf3cd781d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Facilities(with URI parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "552c0061-1d4f-46ba-b75d-df142f61ff32"
							}
						}
					],
					"id": "a5d5fcc0-c565-4063-bd27-8cd7f0137e17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities?includes=city&page[number]=1&page[size]=10",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "includes",
									"value": "city"
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(name missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5eb4fed2-9733-40f3-a63a-f3d5e7cf54d6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "18880bee-7a95-48ee-8113-3d9da88c1dc7"
							}
						}
					],
					"id": "4019aa9d-0aaf-46aa-a364-c7dbdaa20e94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(name blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "4be973c6-991b-4580-8f31-48f33d934aae"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "55231278-0f3d-48b1-a51b-c4d1689cf34a"
							}
						}
					],
					"id": "6ee2aeb5-3de0-4493-a101-b97cc6a9cb73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(street missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "be622771-c580-46a2-b013-fb93dbf85d67"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "069694a7-8c8b-493e-8bb4-bd74b8ff1a32"
							}
						}
					],
					"id": "c60dbd8b-105f-492d-b22c-df6b8cd2a735",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(street blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "6645a584-1206-47a0-95c4-cd732d6a94a0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f69e9e0f-b7e7-42f0-a9bf-eaa2b34115df"
							}
						}
					],
					"id": "5e60dbe0-6279-4375-ab57-58c29de00e31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(city missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "37823a40-2856-4b1c-825a-3fe0cdb2084d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9a1e7f27-7b8a-4fc9-a4e0-656c59fe13f7"
							}
						}
					],
					"id": "75ceea11-92f5-4d58-93b6-30a03c252823",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(city blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "dd5ac3cb-b757-4103-a280-a4fa5e2578a3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b08f82d0-351b-45ce-a778-76d88d9ccf8a"
							}
						}
					],
					"id": "5131752f-3481-4fd0-ae0d-d5093eaad75d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "275ff2ee-bbcc-4deb-a367-b28b9ec76137"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "83163a48-50ff-4152-a533-7e2502c2e2fd"
							}
						}
					],
					"id": "dab0c67b-238c-4b91-a53d-4e8aa62c4cd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3df15b85-3cdc-497a-8911-7578df0423e9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9bf391e0-fd10-4792-a405-fbe285b3d4eb"
							}
						}
					],
					"id": "977ae057-b307-4429-9103-803506bd5ef9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(postal code invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "230a2a00-8a4f-4926-a718-81e38edaf05a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5d19e15c-966a-44c2-8034-af1a441b1162"
							}
						}
					],
					"id": "b5ea2c88-492a-4561-8e46-e0c5d606b880",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}000000\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0451ca8a-7096-46f9-9a8f-da6d82adac92"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b6f802d6-9ddf-4fe7-918b-f0bbb2aaa62b"
							}
						}
					],
					"id": "69851720-b688-4fef-87f5-6654c0ce2d4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5d6a8875-811b-4744-b100-ada8fed61b90"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ced03ed0-6bc3-427a-b75a-c2595dd1dc53"
							}
						}
					],
					"id": "05bdd3a9-5703-45a7-9f0a-e061242ad55d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(province id invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "62209ec3-446c-4b9b-8a40-f18fa018cbce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "38a86a8c-0d3e-40ef-97fb-6b0c127ab537"
							}
						}
					],
					"id": "e9d7bfe9-03e9-4916-9ba1-1b32b5a26bb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}z\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(invalid time zone - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5512e982-ba3f-4c1a-9e3c-fca52ca475cd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "24031ca3-fc7c-4f8b-bd44-ac3eada6fe4c"
							}
						}
					],
					"id": "5c8528ff-bc74-4cbd-abf0-5206eece7e76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\":\"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(Required Fields Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2675a1c2-1c2b-4d94-8c25-7aaecb330d36"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4b760b75-5ce9-439e-8069-b07c604c642f"
							}
						}
					],
					"id": "fb1a2062-edb0-4820-b5db-cf0da54cb442",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "204ea2bf-1ae7-45e6-9741-30189e53daf2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "56e223d8-c80f-431f-95fa-c062d0fb7591"
							}
						}
					],
					"id": "db9166ed-138a-429a-85d5-36f3175b830f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code & Province ID, 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "4351ec60-e684-4814-b96b-c66da6685348"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_iso_code and province_id provided - please use either field, but not both.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1d84e48c-41d2-4cad-9e1d-70317e533e7f"
							}
						}
					],
					"id": "81791b2b-2f21-4e13-a28f-c0fe85c97326",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_id\": \"32375b41-c8dc-459c-87d1-10768a5be2c9\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities?include=province",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ Blank ISO-Code, 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "83188441-2286-44e9-a8c6-e0b9f2db26c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b5bc5fb4-8f80-441c-8838-677587e4fa6d"
							}
						}
					],
					"id": "8f1362ea-8e26-4895-8d33-baed87bc9ed6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "f23fbed9-4b68-4fed-962e-cc5fa1be06e4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "fa356788-2062-4779-a921-c372d6570a1f"
							}
						}
					],
					"id": "79526f58-f637-44cd-9cc0-fb9ee4287e4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Facilities(w/ ISO-Code & definitive ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "30269c4c-36ea-4bc8-bab2-0c486f3f6e2b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "dc9640fa-ddf4-40d1-aed3-77abd68f3e0e"
							}
						}
					],
					"id": "e01299fa-15fe-4241-8439-453c774486b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"definitive_healthcare_id\": \"{{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": "{{url}}facilities"
					},
					"response": []
				},
				{
					"name": "GET - Facility",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "08a0fab9-6586-4e7a-b24f-a2afb1c8fec7"
							}
						}
					],
					"id": "385436d7-40f3-4041-af39-e9401e03bf41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facilities_id}}?includes=city&page[number]=1&page[size]=10",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facilities_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city"
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(name missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "115dc730-cfce-4f51-ab38-7801e491ec26"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "80df00a4-6d8a-4cd8-b468-e423f8729c86"
							}
						}
					],
					"id": "c7e8f6ee-b9c6-4ad1-ab9d-13cca95d4a62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}?include=city",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "city"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(name blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "ad8d0f2a-3f5b-47a9-9ad7-43da4e2c8b3d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "254e9f1c-8ace-4ea5-80d4-a299216d9378"
							}
						}
					],
					"id": "e8d8a14b-244b-4dd4-a353-24a84de683e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(street missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "1885ff0f-6276-4c8b-839d-3c4dfec9cbea"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "defd4535-a5de-45ba-a861-9b111e240077"
							}
						}
					],
					"id": "c6e02056-8e38-445d-b6d8-710fbd272184",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(street blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "86af2f35-3373-4baf-a539-90bdff1cf951"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7554f85a-96b7-4643-b82a-d3dd08bed46c"
							}
						}
					],
					"id": "05a1a724-bed2-4eb2-8b5a-1ab786c65b82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(city missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "35b40376-b302-4741-82a2-2917f2c37a22"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "1c87c783-7ec1-4cc2-be67-913403a8fe3c"
							}
						}
					],
					"id": "80a9b011-aaa3-4599-a9b5-d72497631b5d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(city blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0a1375ad-4737-4743-8c1f-1ab01cd69772"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "52981166-9abd-4031-8b06-06bf5d9dc796"
							}
						}
					],
					"id": "36e7fcb2-eef2-4204-839c-024dcfa5eef8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "e9c598a6-63a7-4102-ba68-058d3348b493"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4c6b1fff-3134-4b91-9d08-3b1315ca8800"
							}
						}
					],
					"id": "ee9c9f82-420a-4f06-81b5-8dac8fc4ad1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code blank - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "fc8aa347-431c-4eee-89ff-bce19d92175d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "cacb14dd-a588-4984-9f19-284f48efc34c"
							}
						}
					],
					"id": "693a0ad3-b760-45d3-a354-a24d1049b646",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(postal code invalid - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "caa5cad7-5a46-4da4-a090-2d35d259f76f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "11add727-1eac-4e15-845e-77a62c8b4b17"
							}
						}
					],
					"id": "1eac63f5-4ca0-4249-9d69-ca60fe42d231",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}000000\",\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id missing - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "add4c677-a854-4c3a-b7f8-1ea4da96e674"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is a required field\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "245140f4-ea36-41cc-b490-9f66adb71ef0"
							}
						}
					],
					"id": "06db614e-e9d8-4e82-8965-ca47c5bc30e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id blank - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0f3169b6-b1cf-42c0-9c03-8ae9041870c0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "530b1198-5f66-413e-abbb-54e0642f2bca"
							}
						}
					],
					"id": "28b517db-7f81-49b5-bc78-f13fe672d40b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(province id invalid - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "d35e8420-a8a7-4196-8561-d6eb9dae4471"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "91bca2f3-b4be-4f21-bb02-2140d76d5f41"
							}
						}
					],
					"id": "069fb2d8-130b-4a51-a280-53fa2f74d419",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}z\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(invalid time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "5ecfb0ff-3b59-4b57-aafd-22f97c750e43"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f3ca3239-c9d7-4f20-8f33-c1e9edbc17a5"
							}
						}
					],
					"id": "fb369e1a-e50f-43d5-9212-b6df7e22932d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\":\"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "b3b6c573-509f-4c33-8dad-464027d03b50"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3559ae2e-2fe0-425a-9bfc-49d25fe668ab"
							}
						}
					],
					"id": "b680143b-3df5-4769-8240-378369ca8bc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"{{city}}\",\r\n  \"postal_code\": \"{{postal_code}}\",\r\n  \"province_id\": \"{{province_id}}\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Facilities(w/ ISO-Code)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2629c173-17ed-430f-8af8-a4d434f94ac2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f6a8695e-05a5-4dc6-9587-1bd10f559b7e"
							}
						}
					],
					"id": "105acdae-8f39-46f8-9504-f54836fb97ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\",\r\n  \"definitive_healthcare_id\": \"{{number}}\",\r\n  \"street\": \"{{number}} Platform Dr\",\r\n  \"city\": \"Bullhead City\",\r\n  \"postal_code\": \"86442\",\r\n  \"province_iso_code\": \"US-AZ\",\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "a07c648c-ad47-4b3f-a92a-41065d9f1c21"
							}
						}
					],
					"id": "fae482e3-8e5b-486b-acaa-a3d71904e657",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2885708a-ad32-484d-a35f-1dd58a0ad1db"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "864fd292-fa98-4af1-9f77-17cf03dbe182"
							}
						}
					],
					"id": "bd458e9a-cbd3-45b0-9d59-4ef564d29b0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Platform Facility {{number}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Name(blank name - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "7ff7f9f7-c381-4dbc-84b4-b0658765cc55"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "48ae993a-768f-4e44-b17d-8454396dee0b"
							}
						}
					],
					"id": "7a0ab2f2-44af-43d7-80ee-65828954aaf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Definitive Healthcare ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2ff98303-7367-45a1-99af-5fc76f165ddf"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "37b72b56-91cc-4005-8261-cb4f84264afb"
							}
						}
					],
					"id": "60d0f601-f284-4352-bbe6-2ca61f8b6e2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"definitive_healthcare_id\": \"{{number}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Street",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "610c2ef9-dd77-4ee0-b0d8-39098c04833f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d89947cf-eaab-4107-83d8-46153f7844a8"
							}
						}
					],
					"id": "27e1a35d-641d-4474-8d98-e06747175027",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"{{number}} Platform Dr\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Street(blank street - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "14cb52f5-877b-4db1-9d76-01ac6d56f1e1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"street can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0eb3d657-3d5f-42ec-8265-ec3255739b92"
							}
						}
					],
					"id": "b9f265cd-bd16-495e-ba48-7e1855dc35d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - City",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "16a3f41d-b608-4d34-8a47-65449fa42f4c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9efedd13-3fc5-4874-aed7-7181f797a0d4"
							}
						}
					],
					"id": "560ea0c4-a388-4069-912d-c0437ab640d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"New {{city}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - City(blank city - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "bb5635f9-2ebf-4fa9-8366-502ac6c03be3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"city can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a8d6f4a2-58ab-45ab-820c-60d7bd7806bb"
							}
						}
					],
					"id": "6ca37ede-2dcb-4a2c-b3f0-524f2d6b335d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "6215843e-aacc-4962-bd2c-e906d8f28e94"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8403b70d-24dd-4e74-a4fa-b09fa69c9ed9"
							}
						}
					],
					"id": "e60be3a4-6bd8-4732-b2bd-4f31e55028a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"{{postal_code}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code(blank postal code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3ca50ed7-79ab-4730-88c9-3ad0cbd92d9c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7e075950-dc75-4550-b6a8-5e1ffc25efa5"
							}
						}
					],
					"id": "b9ee331d-c8bf-4e36-ae78-8f7dad169dee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Postal Code(invalid postal code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3fe6e20f-6fa5-47a0-8de8-53ec8ec07457"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"postal_code is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d8b1263f-44cd-4576-b1cc-f011cfc0ef36"
							}
						}
					],
					"id": "51746190-a893-4713-afde-637090e05725",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postal_code\": \"{{postal_code}}98765\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0935556e-1e40-46a2-9518-bcf7fa2a03ad"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ba3713e7-3c1e-4b8c-87d0-825f2e8532ec"
							}
						}
					],
					"id": "51b8da43-618b-436c-b7f4-f4b1a67bb28c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"{{province_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code(blank province code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3eac3fba-4f66-4fe9-87ab-b222848a6647"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a15fd107-b4eb-4c8a-af8a-a8bfc5c69620"
							}
						}
					],
					"id": "8af776eb-e049-4df9-bae0-b03f70a87352",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province Code(invalid province code - 422)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "687bfb20-4c87-477d-a8c9-e0862b052930"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"province_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "134e36da-6763-4fc0-b165-45d7acc58f14"
							}
						}
					],
					"id": "d36255ff-bcc6-4b4e-a240-c28269aa7c4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_id\": \"{{province_id}}abcd\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "0c073297-e43f-4ef9-a256-3ec5353bb661"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "35618aeb-bd5f-479f-aac5-4059b6bed479"
							}
						}
					],
					"id": "9d36b5bc-640e-40bf-9889-52c1ef9ad336",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"US-AZ\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code(blank ico code - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "3d481763-db3f-4d8b-aa91-b6e65c5682df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "fc4ba52f-1c8b-4ac2-a6f0-0998fdea33b2"
							}
						}
					],
					"id": "a5ac5e68-a7e3-4c49-b62d-4294d21fbce2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Province ISO Code(invalid ico code - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "99ca9568-4fad-47b0-aa66-cddb41cfbd13"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for province_iso_code\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "4fbec598-466a-4d38-bc77-42cd74f64b8b"
							}
						}
					],
					"id": "2698d835-cf21-4611-a827-6c7c17577f05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"province_iso_code\": \"US-AQ\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "ffc5071e-1965-4b08-a8a4-67432b0c1442"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5cb58432-5f48-43b4-a388-b21f52ae644e"
							}
						}
					],
					"id": "0f493fa3-5b7d-4ac3-afad-ad67bc520d42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"{{time_zone}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone(blank time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "4e816dcf-700c-4d09-bbbf-e32ded53a5f6"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "70c6cd7f-68e9-4741-a42f-b31f5a2e2b83"
							}
						}
					],
					"id": "b5ed5563-b245-48f7-8906-7a64aeee8782",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Time Zone(invalid time zone - 400)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random) //displays value in console log"
								],
								"type": "text/javascript",
								"id": "2c2a06dd-83e6-4f9c-9413-fef9e16a3ee4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"time_zone is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ad31c47b-0bde-4a03-a8ce-c21588a44a5f"
							}
						}
					],
					"id": "2edfaa73-266e-43a4-b47d-bad61d6c3369",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time_zone\": \"Pacific/New York\"\r\n}"
						},
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "province",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Facilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d142ddd2-3935-4c0f-82a7-3a573bb252a8"
							}
						}
					],
					"id": "4935cd58-a749-4fbb-8cee-4c509da9e02d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city",
									"disabled": true
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Facilities(resource not found - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "713ab298-71c7-40f7-99ca-f9fd5f50ba0f"
							}
						}
					],
					"id": "3837e741-1a99-4ed7-baf7-612f7c887ec5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities/{{facility_id}}",
							"host": [
								"{{url}}facilities"
							],
							"path": [
								"{{facility_id}}"
							],
							"query": [
								{
									"key": "includes",
									"value": "city",
									"disabled": true
								},
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "10",
									"description": "page[size]=10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "1cf0e833-77dc-4af4-8368-4ea22fe0cab8"
		},
		{
			"name": "Professions",
			"item": [
				{
					"name": "GET - Professions",
					"id": "8bfb0591-f551-407b-8c65-749cc774a48d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				}
			],
			"id": "f9748820-2413-4943-8330-eab91f49616d"
		},
		{
			"name": "Job Requisitions",
			"item": [
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"pm.environment.set(\"facility_id\", jsonData.data[json.random][\"id\"]);\r",
									"var city = attributes[\"city\"];\r",
									"pm.environment.set(\"city\", city)\r",
									"var postal_code = attributes[\"postal_code\"];\r",
									"pm.environment.set(\"postal_code\", postal_code)\r",
									"var province_id = attributes[\"province_id\"];\r",
									"pm.environment.set(\"province_id\", province_id)\r",
									"var time_zone = attributes[\"time_zone\"];\r",
									"pm.environment.set(\"time_zone\", time_zone)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"city: \"+city)\r",
									"console.log(\"postal code: \"+postal_code)\r",
									"console.log(\"province id: \"+province_id)\r",
									"console.log(\"time_zone\"+ time_zone)"
								],
								"type": "text/javascript",
								"id": "7c953231-f8f3-40cd-ac7b-800fa1b4c9fe"
							}
						}
					],
					"id": "2451d4da-5fd4-44ad-ad99-d66ddae62fad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Professions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var profession_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"profession_id\", profession_id)\r",
									"\r",
									"var attributes = jsonData.data[json.random].attributes;\r",
									"var name = attributes[\"name\"];\r",
									"pm.environment.set(\"profession_name\", name)\r",
									"\r",
									"console.log(length)\r",
									"console.log(profession_id)\r",
									"console.log(name)\r",
									"console.log(json.random)"
								],
								"type": "text/javascript",
								"id": "cede9326-a51f-4d03-bdad-79d31a470f4b"
							}
						}
					],
					"id": "ca6122b1-6c55-4281-b031-7b434a50ba00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "GET - Contracts Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var client_contract_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"client_contract_id\", client_contract_id)\r",
									"\r",
									"console.log(length)"
								],
								"type": "text/javascript",
								"id": "f4240e42-5da4-4779-942d-6e0fc4244e7b"
							}
						}
					],
					"id": "f61195b8-27ed-4e53-8665-333744c85596",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET - Specialties Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"primary_specialty_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"console.log(\"primary_specialty_id\")"
								],
								"type": "text/javascript",
								"id": "fa5b18c9-4b7d-4e7e-b470-292d1a83af60"
							}
						}
					],
					"id": "146c6435-aa74-40f3-abb0-3372e59b437c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no facility_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d249c92d-01ae-4545-8ad6-4c4110e344b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "3b051d40-581b-4544-a57d-74c2944618b1"
							}
						}
					],
					"id": "5ed75d26-e42c-414d-a03c-acad3fb18f2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no job_type: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"job_type can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "38012cd0-38c4-422c-8007-d2e2aab3b619"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "142b7da2-7f52-4dbc-af1a-1b404f41d12f"
							}
						}
					],
					"id": "70657d5d-29a3-428f-8515-273b94b90f17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no name: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7c4bc8ea-8181-498a-a21f-176d970dbbb3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "aba40b64-14d1-45c5-a7f7-b166e7bbbe4a"
							}
						}
					],
					"id": "e26169f0-4794-4250-b1ad-846e5a2c9dc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no profession_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e4e2f06b-8c08-4384-8886-0f53a8360b27"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "822eaaa9-67d5-456d-8b15-40e6966f279e"
							}
						}
					],
					"id": "dc6410e2-3d25-4fd6-9738-a906851e1fbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no source: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"source can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "78265dfd-57a1-4b07-9739-f7819a57ea1a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "c0cb3b1c-1b54-4e60-9dbd-f4f5522c0104"
							}
						}
					],
					"id": "fffbe3ab-e278-4d91-a1ab-82376632220e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no specialty_id: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"specialty_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d61eeb00-a732-4800-a489-74890e55eb95"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "283a5727-3094-4804-96ae-58d0cbb57d20"
							}
						}
					],
					"id": "06715d4f-e1d2-4769-bfdb-082281ce8f09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required), no years_of_experience: 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"years_of_experience can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "05e4d2d3-0cd7-4fbd-898a-f601c7a2e701"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "9c3735d8-8759-4651-8ffb-6e22f97274e7"
							}
						}
					],
					"id": "0eb4fbec-3bcd-46cd-9e46-42a1d65c82e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\"\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions(Required)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('job_requisition_id', jsonData.data[\"id\"]);\r",
									"\r",
									"pm.test(\"Facility_id returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"facility_id\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"asap returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"asap\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"has_pay_package returns data\", function () {\r",
									"    jsonData.data.attributes[\"has_pay_package\"] != null;pm.expect(jsonData.data.attributes[\"has_pay_package\"]).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7b449016-b7e2-47ec-a87d-f8fce3b7df39"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = ['Full Time', 'Part Time', 'Travel Contract', 'Per Diem'];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);"
								],
								"type": "text/javascript",
								"id": "289ebe5b-a386-4512-bd56-cd32b0e2b5b7"
							}
						}
					],
					"id": "4f58b56c-f494-46bf-8095-2ab8488aad08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Test {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Requisitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*number generator*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(\"number: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*job type generator*/\r",
									"const jobType = [/*'Full Time', 'Part Time', */'Travel Contract'/*, 'Per Diem'*/];\r",
									"const randomType = jobType[Math.floor(Math.random() * jobType.length)];\r",
									"pm.variables.set('jobType', randomType)\r",
									"console.log(\"Job Type: \"+randomType);\r",
									"\r",
									"/*number of openings generator*/\r",
									"var openings = {\r",
									"  random: Math.ceil(Math.random() * 30)\r",
									"}\r",
									"pm.variables.set('openings', openings.random);\r",
									"console.log(\"number of openings: \"+openings.random)\r",
									"\r",
									"/*ASAP flag generator*/\r",
									"let asap = ['true', 'false'];\r",
									"const randomASAP = asap[Math.floor(Math.random() * asap.length)];\r",
									"pm.variables.set('asap', randomASAP)\r",
									"console.log(\"asap: \"+randomASAP);\r",
									"\r",
									"/*starts on date*/\r",
									"if (randomASAP === 'false') {\r",
									"    var moment = require('moment');\r",
									"    const monthsInTheFuture = 1; //constant value of months that will be added\r",
									"    let job_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"    console.log(\"job_starts_on: \"+job_starts_on);\r",
									"}else {\r",
									"    let job_starts_on = 'null';\r",
									"    console.log(\"job_starts_on: \"+job_starts_on);\r",
									"}\r",
									"\r",
									"/*random time generator*/\r",
									"const time = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];\r",
									"const randomTime = time[Math.floor(Math.random() * time.length)];\r",
									"pm.variables.set('time', randomTime)\r",
									"console.log(\"time: \"+randomTime);\r",
									"\r",
									"/*random hours generator*/\r",
									"const hours = ['8', '12', '16', '24', '32', '36', '40', '48', '56', '58', '60'];\r",
									"const randomHours = hours[Math.floor(Math.random() * hours.length)];\r",
									"pm.variables.set('hours', randomHours)\r",
									"console.log(\"hours: \"+randomHours);\r",
									"\r",
									"/*random weekly gross pay generator*/\r",
									"const pay = ['3000', '4000', '5000', '6000', '7000', '8000', '9000', '10000'];\r",
									"const randomPay = pay[Math.floor(Math.random() * pay.length)];\r",
									"pm.variables.set('pay', randomPay)\r",
									"console.log(\"minimum_weekly_gross_pay: \"+randomPay);\r",
									"\r",
									"/*random hourly rate generator*/\r",
									"const rate = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"const randomRate = rate[Math.floor(Math.random() * rate.length)];\r",
									"pm.variables.set('rate', randomRate)\r",
									"console.log(\"hourly_rate: \"+randomRate);\r",
									"\r",
									"/*random weekly housing stipend generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const stipend = ['300', '400', '500', '600', '700', '800', '900', '1000'];\r",
									"    const randomStipend = stipend[Math.floor(Math.random() * stipend.length)];\r",
									"    pm.variables.set('stipend', randomStipend)\r",
									"    console.log(\"weekly_housing_stipend: \"+randomStipend);\r",
									"}\r",
									"else \r",
									"{\r",
									"    const stipend = \"null\"\r",
									"    console.log(\"weekly_housing_stipend: \"+stipend);\r",
									"}\r",
									"\r",
									"/*random weekly per diem generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const perDiem = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"    const randomPerDiem = perDiem[Math.floor(Math.random() * perDiem.length)];\r",
									"    pm.variables.set('perDiem', randomPerDiem)\r",
									"    console.log(\"perDiem: \"+randomPerDiem);\r",
									"}\r",
									"else \r",
									"{\r",
									"    var perDiem = \"null\"\r",
									"    console.log(\"perDiem: \"+perDiem);\r",
									"}\r",
									"\r",
									"/*random travel reimbursement generator*/\r",
									"if (randomType === 'Travel Contract')\r",
									"{\r",
									"    const travel = ['30', '40', '50', '60', '70', '80', '90', '100'];\r",
									"    const randomTravel = travel[Math.floor(Math.random() * travel.length)];\r",
									"    pm.variables.set('travel', randomTravel)\r",
									"    console.log(\"Travel Reimbursement: \"+randomTravel);\r",
									"}\r",
									"else \r",
									"{\r",
									"    var perDiem = \"null\"\r",
									"    console.log(\"perDiem: \"+perDiem);\r",
									"}\r",
									"\r",
									"/*desired_contract_length*/\r",
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 26)\r",
									"}\r",
									"pm.variables.set('contract_length', num.random);\r",
									"console.log(\"contract length: \"+num.random)\r",
									"\r",
									"/*random years of experience*/\r",
									"var years = {\r",
									"  random: Math.ceil(Math.random() * 10)\r",
									"}\r",
									"pm.variables.set('years', years.random);\r",
									"console.log(\"years of experience: \"+years.random)\r",
									"\r",
									"/*origin reference number generator*/\r",
									"function makeid(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    let counter = 0;\r",
									"    while (counter < length) {\r",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"      counter += 1;\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"let result = makeid(16);\r",
									"console.log(result);\r",
									"\r",
									"/*sales rep ID generator*/\r",
									"function salesrepid(length) {\r",
									"    let result2 = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const charactersLength = characters.length;\r",
									"    let counter = 0;\r",
									"    while (counter < length) {\r",
									"      result2 += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"      counter += 1;\r",
									"    }\r",
									"    return result2;\r",
									"}\r",
									"let result2 = salesrepid(32);\r",
									"console.log(result2);"
								],
								"type": "text/javascript",
								"id": "cb51a18f-4756-440b-9c31-ff4723833696"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('job_requisition_id', jsonData.data[\"id\"]);\r",
									"\r",
									"pm.test(\"Facility_id returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"facility_id\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"asap returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"asap\"]).to.not.eql(null);\r",
									"});\r",
									"pm.test(\"has_pay_package returns data\", function () {\r",
									"    pm.expect(jsonData.data.attributes[\"has_pay_package\"]).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7958ede4-720b-4786-abe3-9e6ac82f321e"
							}
						}
					],
					"id": "7a94231e-b4ac-4df1-9c4e-96dbbe5ced97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_contract_id\": {{client_contract_id}},\r\n  \"facility_id\": \"{{facility_id}}\",\r\n  \"creator_id\": \"{{account_id}}\",\r\n  \"job_type\": \"{{jobType}}\",\r\n  \"name\": \"Platform Req {{number}}\",\r\n  \"profession_id\": \"{{profession_id}}\",\r\n  \"source\": \"vmspark\",\r\n  \"source_reference_number\": null,\r\n  \"specialty_id\": \"{{primary_specialty_id}}\",\r\n  \"years_of_experience\": {{years}},\r\n  \"number_of_openings\": {{openings}},\r\n  \"description\": \"This job req was generated by Kamana's API\",\r\n  \"starts_on\": \"{{job_starts_on}}\",\r\n  \"asap\": \"{{asap}}\",\r\n  \"shift_start_time\": \"{{time}} AM\",\r\n  \"shift_end_time\": \"{{time}} PM\",\r\n  \"contract_length\": {{contract_length}},\r\n  \"hours_per_week\": {{hours}},\r\n  \"weekly_gross_pay\": {{pay}},\r\n  \"regular_hourly_rate\": {{rate}},\r\n  \"weekly_housing_stipend\": {{stipend}},\r\n  \"weekly_per_diem\": {{perDiem}},\r\n  \"compensation_comments\": \"Compensation calculated by API\",\r\n  \"origin\": \"API\",\r\n  \"origin_reference_number\": {{result}},\r\n  \"shift_description\": \"Described by API\",\r\n  \"status\": \"Open\",\r\n  \"travel_reimbursement\": {{perDiem}},\r\n  \"sales_rep_id\": {{result2}}\r\n }"
						},
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Requisitions",
					"id": "e638740d-4637-438d-a773-155b1e93f18f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"job_type\": \"Travel Contract\",\r\n    \"number_of_openings\": 10,\r\n    \"years_of_experience\": 5\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions job_type",
					"id": "e388efb6-728c-43d8-a3ef-be688754589d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"job_type\": \"Travel Contract\"\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions number_of_openings",
					"id": "0200add8-f8ca-4130-abac-10a6747725ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number_of_openings\": 10\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Requisitions years_of_experience",
					"id": "d353de52-4610-4312-87ea-e853af13dbec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2Nzg2Mzk5MDgsImlhdCI6MTY3MDg2MzkwOCwiaXNzIjoia2FtYW5hIiwianRpIjoiNzllNDFiNzYtNjJkNi00ZTU4LTgzYTMtMWExMzY4YTdhMmY3IiwibmJmIjoxNjcwODYzOTA3LCJzdWIiOiJkOWQxZjRhZi00MjliLTQxYmUtYjA0Yi04ZTQwNjBjMTg3ZjIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiNTIyNzdmM2QtNzMxNy00NTNkLTllZGUtOTlhMWU5ZjcyNDhjIn0.FTIEiUAXSiBlZgX1Gxg_n8Fz2HpHqnvVjfkE8hpJa2xK0d_DUZC7EEmGA1a3KFAMJ-CAo_fQNA1PZ6YM5brLsw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"years_of_experience\": 5\r\n}"
						},
						"url": "{{url}}job_requisitions/{{job_requisition_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Requisitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let job_requisition_id = jsonData.data[0][\"id\"];\r",
									"\r",
									"console.log(\"job_requisition_id: \"+job_requisition_id)\r",
									"\r",
									"pm.test(\"job_requisition_id returns null\", function () {\r",
									" pm.expect(job_requisition_id).to.not.eql(null);\r",
									" });"
								],
								"type": "text/javascript",
								"id": "02e833ea-5ec0-46e9-a186-fdda604ed287"
							}
						}
					],
					"id": "5188c70f-d0b0-45de-ac5b-ee0c2e9e192e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions",
							"host": [
								"{{url}}job_requisitions"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Requisitions(with URI Parameters)",
					"id": "688e8c7a-0e3b-4721-9e34-0923803a8f18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions/{{job_requisition_id}}?include=creator",
							"host": [
								"{{url}}job_requisitions"
							],
							"path": [
								"{{job_requisition_id}}"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "creator"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Requisitions(single job requisition)",
					"id": "fefa432d-f03f-410d-83bc-a9c901f70af7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}job_requisitions/{{job_requisition_id}}",
							"host": [
								"{{url}}job_requisitions"
							],
							"path": [
								"{{job_requisition_id}}"
							],
							"query": [
								{
									"key": "profession_id",
									"value": "18da2ad0-9213-4ea1-af3a-d42c764c3c00",
									"disabled": true
								},
								{
									"key": "specialty_id",
									"value": "a07221a1-b699-4444-96cc-ad1ec8847af9",
									"disabled": true
								},
								{
									"key": "province_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "facility_id",
									"value": "46edfa35-de7c-40a3-b7a5-eb9bc5ad5c34",
									"disabled": true
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "after",
									"value": "",
									"disabled": true
								},
								{
									"key": "include",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_requisition_id",
									"value": "ca26de92-68d7-48b8-a1d2-b07efdc2a758",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "eddb6761-5984-4f73-8b1b-a58b4f2d4d33"
		},
		{
			"name": "Specialties",
			"item": [
				{
					"name": "GET - Specialties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"primary_specialty_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"console.log(\"primary_specialty_id\")"
								],
								"type": "text/javascript",
								"id": "009805f6-ffa7-4bb1-8c7e-b4b27a7e2a00"
							}
						}
					],
					"id": "423a2887-838b-4d89-8d1a-b584bdfbbd78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}specialties"
					},
					"response": []
				}
			],
			"id": "c9779cab-95d1-4046-bfd8-9116dc5cd467"
		},
		{
			"name": "Contracts",
			"item": [
				{
					"name": "GET - Professions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"pm.environment.set(\"profession_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(length);\r",
									"\r",
									"let length1 = jsonData.data.length;\r",
									"var json1 = {\r",
									"  random: Math.ceil(Math.random() * length1)\r",
									"}\r",
									"pm.environment.set(\"profession_id1\", jsonData.data[json1.random][\"id\"]);\r",
									"console.log(length1);\r",
									"\r",
									"let length2 = jsonData.data.length;\r",
									"var json2 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id2\", jsonData.data[json2.random][\"id\"]);\r",
									"console.log(length2);\r",
									"\r",
									"let length3 = jsonData.data.length;\r",
									"var json3 = {\r",
									"  random: Math.ceil(Math.random() * length2)\r",
									"}\r",
									"pm.environment.set(\"profession_id3\", jsonData.data[json3.random][\"id\"]);\r",
									"console.log(length3);\r",
									"\r",
									"console.log(\"profession_id\")"
								],
								"type": "text/javascript",
								"id": "8dfb9a38-e9ff-4801-8206-414226a1504c"
							}
						}
					],
					"id": "9c93f26b-f069-416a-a14b-48c1271233be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}professions"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no name - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "78e2fa33-23af-41be-800c-a44c3c75d861"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "0d8fca4a-71ca-458d-b21e-66a5c9c14af7"
							}
						}
					],
					"id": "6b4af797-cf71-4e04-85f1-777f9e4e192a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no client id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"client_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8b27cb5d-844f-400c-9957-47bd60f6d022"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "ab6279bf-b21b-4fd5-84d7-4b26a7531311"
							}
						}
					],
					"id": "6debb240-8d6b-4fdf-8ba3-36d8bb1cf8fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no contract specialist - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "edee8c1f-f747-4475-a43b-7fa2fac65960"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "24e9c56a-f4a9-4c47-a7be-8e7c2d66771e"
							}
						}
					],
					"id": "d3bccb2d-729e-411b-bf68-9954dba04683",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": null,\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{scontract_tarts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(no client manager - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"client_manager\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "3c01baa4-e0ff-4622-80e2-439179426777"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "1c76b5e0-7a96-4c9e-8487-3acf5d89c693"
							}
						}
					],
					"id": "61492a23-4f65-4cbd-90a7-0a3178b3a788",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": null,\r\n    \"starts_on\": \"{{scontract_tarts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid profession id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_ids is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8d85d049-a802-4877-a002-4b4322b6f569"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "c35d0d9a-8ac9-4506-9987-14dfc86280cf"
							}
						}
					],
					"id": "416c5ba0-58b5-4729-9aee-4b6cd4016cc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}a\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract specialist & contract_manager ids - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "523df041-7095-4b60-a12b-0cf087427444"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "42a61170-1607-49e9-898c-b141c8871ecc"
							}
						}
					],
					"id": "85b7f4fd-f07d-4e5b-84a8-4053af860ff0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}a\",\r\n    \"client_manager\": \"{{assignee}}a\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract_manager id - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"client_manager\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "176412a6-5d9d-458b-9efb-5ec96942b0ba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "c5e14971-ce39-4508-a635-17996d8a5eea"
							}
						}
					],
					"id": "b46847e5-aa15-4c4e-b4ff-d2ce5360ca0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}a\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid starts_on & ends_on dates - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "08c89ea4-4e18-4094-938c-d097f738f3da"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "7f5d9746-596a-467f-bfb3-961678cfcf5c"
							}
						}
					],
					"id": "f451a48b-1ad8-4399-a279-a452fcaa45c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}0\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}0\",\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid contract_term - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"contract_term is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "e1f170c8-b7e2-4f03-9ac7-1f4ff940ddc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "0d4efe03-35f4-4eb6-9a3e-eb319d652c0d"
							}
						}
					],
					"id": "a59854c6-1b89-4997-abe7-693c01c980fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_dates\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid work_week_begins - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"invalid valid for field \\\"contract_specialist\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d27d2b2a-b7b2-4555-a916-a629a90691b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "d5d26355-548f-4cab-a39b-2c06acbb6e66"
							}
						}
					],
					"id": "110030be-e5be-41b1-a1eb-8baa397bc44d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": null,\r\n    \"cancellation_notice_days\": null,\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": null,\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 8,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(invalid billable_orientation_percent_of_rate, cancellation_notice_days, msp_fee_percent, prompt_pay_discount & submission_method - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"billable_orientation_percent_of_rate is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"cancellation_notice_days is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"msp_fee_percent is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[3].detail).to.include(\"prompt_pay_discount is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[4].detail).to.include(\"submission_method is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9da318ed-4991-4a8d-8796-6aa71e42811b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "12b0c410-70da-461f-8853-49e3c08a496a"
							}
						}
					],
					"id": "0dc49eda-560e-4b07-b966-66c0e259fc00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}a\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00a\",\r\n    \"msp_fee_percent\": \"0.08a\",\r\n    \"prompt_pay_discount\": \"a\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vmsd\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(required fields only - 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d0958c8f-8ff0-4745-8f9c-661a59955914"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "18c52933-c1a6-4653-8dbe-aacb123b7ea7"
							}
						}
					],
					"id": "81d12a62-d7b0-4d72-b378-ccf3abefb917",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": []\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "POST - Contract(all fields entered - 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contract_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "87eb46f5-bb0f-4d58-8402-aa3e9c9c6f40"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "c9176432-11f0-4ac6-9948-109b07fd29fc"
							}
						}
					],
					"id": "c040a005-092d-4587-9652-ac10af307c13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"profession_ids\": [\"{{profession_id}}\",\"{{profession_id1}}\",\"{{profession_id2}}\"],\r\n    \"contract_specialist\": \"{{assignee}}\",\r\n    \"client_manager\": \"{{assignee}}\",\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"fixed_date\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 32,\r\n    \"billable_orientation_hours\": 24,\r\n    \"billable_orientation_percent_of_rate\": \"2.00\",\r\n    \"msp_fee_percent\": \"0.08\",\r\n    \"prompt_pay_discount\": \"3.50\",\r\n    \"vms_id\": null,\r\n    \"submission_method\": \"vms\",\r\n    \"work_week_begins\": 1,\r\n    \"remaining_untracked_information\": null\r\n}"
						},
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid profession ids - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"profession_ids Invalid profession id\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "60ea412f-278c-452e-b5ef-42ebf7e228fc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "d9a66ea6-32e5-4181-984e-eb63e16fee0d"
							}
						}
					],
					"id": "3b9c2dad-eb44-464d-b45b-ee624199bf42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profession_ids\": [\"e3ea4f36-0c81-45d8-874c-577bfc4fd45e\",\"61934394-5e8e-496a-b354-a1a95e7afb1a\",\"d316ce61-2f56-459b-a597-a4623405beb5\"]\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid contract specialist & contract_manager ids - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"Invalid value for contract_specialist\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid value for client_manager\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "20bfaedc-1556-43c1-99ae-1dd581f3a83c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "cde42e53-761d-4bc7-a923-fa1aea7d3535"
							}
						}
					],
					"id": "ddff7356-1076-44f7-bb8b-0a48b97ad213",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contract_specialist\": \"!@#\",\r\n    \"client_manager\": \"!@#\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid starts_on & ends_on dates - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"ends_on is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"starts_on is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "636ef404-18ec-4b2b-94ba-2378e9e1fb1f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "ed2cca4b-605b-4888-9e1d-9f70c60c4bfd"
							}
						}
					],
					"id": "d7fb3606-91f0-47b5-b378-8961f87ac9ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starts_on\": \"{{contract_starts_on}}0\",\r\n    \"ends_on\": \"{{contract_ends_on}}0\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid contract_term - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"contract_term is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c3bbbc6a-ac41-41e2-8c14-1c888dd83ad7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "59d78eb2-e893-4be2-9504-285d138cad29"
							}
						}
					],
					"id": "316fd5cd-abc5-4713-915d-a99ffc057c6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contract_term\": \"fixed_dates\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(invalid billable_orientation_percent_of_rate, cancellation_notice_days, msp_fee_percent, prompt_pay_discount & submission_method - 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"billable_orientation_percent_of_rate is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"cancellation_notice_days is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[2].detail).to.include(\"msp_fee_percent is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[3].detail).to.include(\"prompt_pay_discount is invalid\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[4].detail).to.include(\"submission_method is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "71faa92f-ef0e-4a9c-b0a5-1ca0debabe1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 1;\r",
									"const monthsInTheFuture = 1;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed date', 'cancel with notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "8cae338c-8442-467a-84c3-991d68077dae"
							}
						}
					],
					"id": "7c2d93c2-5706-4b63-a638-0c4d0edac3ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cancellation_notice_days\": \"{{cancellation}}a\",\r\n    \"billable_orientation_percent_of_rate\": \"2.00a\",\r\n    \"msp_fee_percent\": \"0.08a\",\r\n    \"prompt_pay_discount\": \"a\",\r\n    \"submission_method\": \"vmsd\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(multiple fields updated - 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "219c22d1-955a-48ef-b1a2-c46accaaca9e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 2;\r",
									"const monthsInTheFuture = 2;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "830fddb8-dfd6-4a70-bf6a-bedab0db1d61"
							}
						}
					],
					"id": "6f8364dc-071c-418b-905a-526253accdf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [],\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"{{contract_term}}\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 40,\r\n    \"billable_orientation_hours\": 32,\r\n    \"billable_orientation_percent_of_rate\": \"2.50\",\r\n    \"msp_fee_percent\": \"0.15\",\r\n    \"prompt_pay_discount\": \"3.00\",\r\n    \"work_week_begins\": 7,\r\n    \"remaining_untracked_information\": \"Patched\",\r\n    \"status\": \"active\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Contract(multiple fields updated - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"only draft contracts can be edited\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b007ec7c-82e6-4262-b03d-6bc594f16106"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"const yearsInTheFuture = 2;\r",
									"const monthsInTheFuture = 2;\r",
									"\r",
									"var contract_starts_on = moment()\r",
									"    .add(monthsInTheFuture, 'months').format('YYYY-MM-DD');\r",
									"\r",
									"var contract_ends_on = moment()\r",
									"    .add(yearsInTheFuture, 'years').format('YYYY-MM-DD');\r",
									"\r",
									"console.log(\"contract_starts_on: \" + contract_starts_on);\r",
									"console.log(\"contract_ends_on: \" + contract_ends_on);\r",
									"\r",
									"pm.environment.set(\"contract_starts_on\", contract_starts_on);\r",
									"pm.environment.set(\"contract_ends_on\", contract_ends_on);\r",
									"\r",
									"const Type = ['fixed_date', 'cancel_with_notice'];\r",
									"const contract_term = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('contract_term', contract_term)\r",
									"console.log(contract_term);\r",
									"\r",
									"var cancellation = {\r",
									"  random: Math.ceil(Math.random() * 90)\r",
									"}\r",
									"pm.variables.set('cancellation', cancellation.random);\r",
									"console.log(cancellation)"
								],
								"type": "text/javascript",
								"id": "eb701ab1-29c1-4203-92da-617ae20a9c3c"
							}
						}
					],
					"id": "225fc960-2bfa-4214-b506-decea03c5d30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Platform Contract {{number}}\",\r\n    \"profession_ids\": [],\r\n    \"starts_on\": \"{{contract_starts_on}}\",\r\n    \"contract_term\": \"{{contract_term}}\",\r\n    \"ends_on\": \"{{contract_ends_on}}\",\r\n    \"cancellation_notice_days\": \"{{cancellation}}\",\r\n    \"non_billable_orientation_hours\": 40,\r\n    \"billable_orientation_hours\": 32,\r\n    \"billable_orientation_percent_of_rate\": \"2.50\",\r\n    \"msp_fee_percent\": \"0.15\",\r\n    \"prompt_pay_discount\": \"3.00\",\r\n    \"work_week_begins\": 7,\r\n    \"remaining_untracked_information\": \"Patched\",\r\n    \"status\": \"active\"\r\n}"
						},
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "17f5c18a-afa8-40b6-8eff-9e56e1cf7ee1"
							}
						}
					],
					"id": "d24af31d-ed35-4b47-b735-606a8a63c39c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts/{{contract_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Contracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d5d2eb36-045d-4182-9ca0-cad81055c0f0"
							}
						}
					],
					"id": "e618a155-4c3b-4fa0-88eb-bf913127f4b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}contracts"
					},
					"response": []
				},
				{
					"name": "GET - Contracts(with Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5d46902b-341e-4c3e-ba5f-fce0aab8c43e"
							}
						}
					],
					"id": "f1acc357-2521-4815-901b-dc1b5cad73b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}contracts?page%5Bnumber%5D=1&page%5Bsize%5D=5",
							"host": [
								"{{url}}contracts"
							],
							"query": [
								{
									"key": "page%5Bnumber%5D",
									"value": "1"
								},
								{
									"key": "page%5Bsize%5D",
									"value": "5"
								},
								{
									"key": "include",
									"value": "professions",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "f4402c54-35d6-403e-82ca-5c749e94f21f"
		},
		{
			"name": "Client",
			"item": [
				{
					"name": "GET - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * 20)\r",
									"}\r",
									"pm.environment.set(\"client_id\", jsonData.data[json.random][\"id\"]);\r",
									"console.log(json.random);"
								],
								"type": "text/javascript",
								"id": "e46485e1-b73b-4add-bc46-5a3995330d0c"
							}
						}
					],
					"id": "3d8cd16b-69a8-4a87-8fc8-dff4761031cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "GET - Client Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "9be97219-8a9c-4593-9d1d-163ce8c37050"
							}
						}
					],
					"id": "396dfdbd-1041-4528-b3a5-013425f25697",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "GET - Clients(with Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2b1e39b8-d7b1-4b46-bbf4-fa9ce0cad0d5"
							}
						}
					],
					"id": "de95d2cd-c584-4148-8aa1-aa8acee525f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}clients?page[number]=1&page[size]=5&sort=id",
							"host": [
								"{{url}}clients"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "id",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "8839b263-3d8a-4301-97d8-c95a99c479ca"
							}
						}
					],
					"id": "27a033fd-24ce-4621-bc23-bd8d617d2733",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}"
					},
					"response": []
				},
				{
					"name": "GET - Client(Bad ID 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "5dc1fb9f-9005-4d1b-b596-db8a76838bd3"
							}
						}
					],
					"id": "aa8bea25-db9f-4fb4-a1b7-eb1c7d5129cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}z"
					},
					"response": []
				},
				{
					"name": "POST - Client(no name 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "b8659d96-ef2d-454f-9c34-96bf81538c85"
							}
						}
					],
					"id": "c9150899-843d-4160-bdcd-1d1cf964f600",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(invalid type 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"type is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "09ca56d6-f4c3-47d5-8917-98e843c2da69"
							}
						}
					],
					"id": "c872ef91-7bfd-4b33-a94c-1e4a9a52dbbe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"name\",\r\n    \"type\": \"null\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(no account_id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"account_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "55e2b878-8a2e-4d63-b5f1-242bdd7899f7"
							}
						}
					],
					"id": "1daf5e09-d552-4a7a-9d62-b149b5ee96da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"\",\r\n    \"name\": \"name\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(invalid account id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"account_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "614f822e-3359-4f3d-952d-299eb9ea2b20"
							}
						}
					],
					"id": "b0766bf6-f280-4161-834e-dee2e2b770c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\",\r\n    \"name\": \"name\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, no facility id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8aa82da1-5423-40e4-bb1b-84a503134f54"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "db70f872-7985-477d-9914-da0ccb0fea3a"
							}
						}
					],
					"id": "fad9a5b9-41b0-46ca-9c6f-43c767f729e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, invalid facility id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a19d1e28-b7d7-4e77-a5bf-40e31e66ff5d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "4047f9f0-a0a6-42a2-b099-96de63f22c94"
							}
						}
					],
					"id": "8d24349c-76d8-48bd-be23-eaef33b20ce1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: facility, facility id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"facility_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "627d9666-1124-4efe-9008-43de1d749a4c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "b6e655c3-43b3-4cb5-8aac-ac732de18f87"
							}
						}
					],
					"id": "7f45005d-c127-4f56-9cb4-61ae5fc1fb0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, no msp id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "349235bd-8562-488e-a908-bd4dcc42f142"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "baa80eb8-b7ba-441d-b1d2-6fff0fb6ed42"
							}
						}
					],
					"id": "7efede48-602e-440d-97d9-683cb20be736",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, msp id invalid 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5d2d1bad-35f2-475a-a19d-4dead095de59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "dfd3e9b9-c9ca-4f10-8677-2ff3176a9f54"
							}
						}
					],
					"id": "4fc6e610-a044-4606-a732-9f3f10de9aed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"managed_service_provider_id\": \"7713d41c-da34-4342-ace0-de015372bff2z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: msp, msp id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"managed_service_provider_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "c6699fce-ab7d-44d4-84a5-eaecfecb9e4a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'other organization'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "60f3e230-1657-43df-8a82-7d0ac1b5b241"
							}
						}
					],
					"id": "35ececa1-3af2-48ab-af48-57e3a4240033",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"managed_service_provider_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, no idn id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "0fc2c11f-9bf8-4afa-8301-dbdad86a5683"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "13dd2b56-80aa-4d59-b39b-699a144db783"
							}
						}
					],
					"id": "d850d146-09e8-4a6d-8c9f-eeaab3b9a9e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, idn id invalid 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id is invalid\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "591a11b6-df61-461f-81e6-8a2a4acd8385"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "294d7392-4aca-4000-8505-d69cf93ed7f4"
							}
						}
					],
					"id": "39c2da52-b600-4a22-92da-798a0af9a4d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943z\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(type: idn, idn id doesn't exist 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"integrated_delivery_network_id does not exist\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "04a43004-5e6a-486b-aac8-e263bf0c11fc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['idn', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "f4187cc0-20d1-4fe5-827d-afd1ec69bb14"
							}
						}
					],
					"id": "46a04d30-da6c-4b4e-ba1e-72a3fb0d7bba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"integrated_delivery_network_id\": \"d36515b7-306b-40b3-91f2-6bcb7134d115\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(IDN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"idn_name\", jsonData.data.attributes[\"name\"]);"
								],
								"type": "text/javascript",
								"id": "26de39ea-b2eb-4116-975a-2787489819f7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "253fc478-4af9-4462-bc52-39379ce32310"
							}
						}
					],
					"id": "c23debcd-58db-47e4-b8ac-278c5e4a72f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"idn\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943\",\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`account_id\\`: \\`\\` (string, **required**)\n\nEndFragmeStartFragment\n\n\\`name\\`: \\`\\` (string, **required**)\n\nEndFragmentStartFragment\n\n\\`type\\`: \\`\\` (ClientType, **required**)\n\nEndFragmentStartFragment\n\n\\`facility_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`integrated_delivery_network_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`managed_service_provider_id\\`: \\`\\` (string, **optional**)\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "POST - Client(IDN) Duplicate - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name must be unique within each client type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f0830e2a-ad00-4518-a179-57d0226b60f1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "4c2d85b8-d624-41f0-8c67-25fca2784f71"
							}
						}
					],
					"id": "235e06eb-9658-49f2-9852-9e84955b25fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"{{idn_name}}\",\r\n    \"type\": \"idn\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": \"ca35b3d3-6369-4625-b2c7-0d46f0d74943\",\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`account_id\\`: \\`\\` (string, **required**)\n\nEndFragmeStartFragment\n\n\\`name\\`: \\`\\` (string, **required**)\n\nEndFragmentStartFragment\n\n\\`type\\`: \\`\\` (ClientType, **required**)\n\nEndFragmentStartFragment\n\n\\`facility_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`integrated_delivery_network_id\\`: \\`\\` (string, **optional**)\n\nEndFragmentStartFragment\n\n\\`managed_service_provider_id\\`: \\`\\` (string, **optional**)\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "GET - Facilities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var facility_id = jsonData.data[json.random][\"id\"];\r",
									"pm.environment.set(\"facility_id\", facility_id)\r",
									"console.log(\"length: \"+length)\r",
									"console.log(\"facility_id: \"+facility_id)\r",
									"console.log(\"index: \"+json.random)"
								],
								"type": "text/javascript",
								"id": "e28e94c2-6154-4233-b583-34f569f017b1"
							}
						}
					],
					"id": "99ad934e-8af0-4ae9-9c09-106a5e9c2bd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}facilities",
							"host": [
								"{{url}}facilities"
							],
							"query": [
								{
									"key": "include",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Client(Facility)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_name\", jsonData.data.attributes[\"name\"]);"
								],
								"type": "text/javascript",
								"id": "39980f8d-f8c3-4c00-ad02-2b8c2aad6c06"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "cf1f973a-7b82-4509-a555-60d21896c75b"
							}
						}
					],
					"id": "6ff58c8b-b090-493b-8416-27307e877d03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"{{facility_id}}\",\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(Facility) Duplicate - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"name must be unique within each client type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2e7c45aa-24ed-4b12-8c2e-5fd044171edf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "bc360675-52a8-47dd-84e8-ef062aa9f0fa"
							}
						}
					],
					"id": "357956b6-891b-491e-bf7e-c8d47c296ac2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"{{facility_name}}\",\r\n    \"type\": \"facility\",\r\n    \"facility_id\": \"{{facility_id}}\",\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": null\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(MSP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"facility_name\", jsonData.data.attributes[\"name\"]);\r",
									"pm.environment.set(\"client_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "264e5510-9100-480c-b821-b402ac298b12"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "bb82611f-2900-4ab6-99e0-51e15769b425"
							}
						}
					],
					"id": "753aaede-1136-4ecb-894a-929445de5537",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"{{agency_account_id}}\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"msp\",\r\n    \"facility_id\": null,\r\n    \"integrated_delivery_network_id\": null,\r\n    \"managed_service_provider_id\": \"7351c93d-d1a5-43ff-b372-743b134e4e4b\"\r\n}"
						},
						"url": "{{url}}clients"
					},
					"response": []
				},
				{
					"name": "POST - Client(Custom)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"client_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "fd768301-c9e9-48dd-9cb8-08bff1a88445"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"const Type = ['health system', 'msp', 'facility', 'custom'];\r",
									"const randomType = Type[Math.floor(Math.random() * Type.length)];\r",
									"pm.variables.set('Type', randomType)\r",
									"console.log(randomType);"
								],
								"type": "text/javascript",
								"id": "b451f149-106e-44b7-989a-d4c9525a4fa1"
							}
						}
					],
					"id": "eefabedc-9c56-42d2-8daf-3980e020985d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": \"7713d41c-da34-4342-ace0-de015372bff2\",\r\n    \"name\": \"Platform Client {{number}}\",\r\n    \"type\": \"custom\"\r\n}"
						},
						"url": "{{url}}clients",
						"description": "StartFragment\n\n**Body:**\n\n\\`**account_id**\\`: \\`\\` (string, **required**)\n\n\\`**name**\\`: \\`\\` (string, **required**)\n\n\\`**type**\\`: \\`\\` (ClientType, **required**)\n\n\\`**facility_id**\\`: \\`\\` (string, **optional**)\n\n\\`**integrated_delivery_network_id**\\`: \\`\\` (string, **optional**)\n\n\\`**managed_service_provider_id**\\`: \\`\\` (string, **optional**)"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(blank name - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name can't be blank\");\r",
									"})\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"last_name can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2d92403c-13b5-486a-af1b-badad7cd5c2a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "751f4057-b7cb-4b20-b805-8e10d18ea2aa"
							}
						}
					],
					"id": "2becb512-404a-4c2c-a717-cd0823ce4c86",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": null,\r\n    \"last_name\": null,\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(name already taken set-up - 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "1c52766d-3e44-4471-aece-d172e28f5a6a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "24911b1d-3295-4145-b917-e8ab9d8067d3"
							}
						}
					],
					"id": "98c3a8aa-0de9-4566-8b6f-947aa4e2a367",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(name already taken - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "efbe9154-3575-4657-881b-bc771ddac568"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "ee517255-f8f6-4468-96d6-57c170d7b376"
							}
						}
					],
					"id": "6d372a48-bc12-4eb8-b14e-ef4d17c903ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\",\r\n    \"email\": \"adrian.allen+clientcontract@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(no email - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"email can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "89d1fa5f-1b72-4871-a412-fbeca3a3982d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "f76b4c03-68de-4115-b0ba-b7746898e20f"
							}
						}
					],
					"id": "0abdb6c0-2bc6-40aa-8ee4-2554de9f4861",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": null,\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(no phone number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number can't be blank\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "049b9d5e-93ba-4ef2-a451-94fc3cdf5a89"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "708d2ed8-d0a5-4f17-bcf6-de6db57f1c54"
							}
						}
					],
					"id": "0634ab81-e252-4d91-9bac-780dfa1c4f91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": null\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(invalid phone number - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "2433c3a2-b03e-44f4-91c2-f6d8e90e4a51"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "fae8f856-bb80-4f43-b376-9c265ed4d25a"
							}
						}
					],
					"id": "4e189070-5ed9-4355-b809-dd5c4e24f3f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"12034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields, mobile number not accepted - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number Our phone validation service does not recognize this as a mobile number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8ff0dc37-94be-47d6-aa49-2bcbd51916a7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "5aed0637-abe3-4429-a810-f63e1320c211"
							}
						}
					],
					"id": "aa43b6f6-c72c-48a0-a1da-bb29e37a1c53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6467778888\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(required fields only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "886e4100-fe76-47d2-a8f7-9d93ce86aebf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "8b245a27-6559-4591-8d3f-c8e3753fedf2"
							}
						}
					],
					"id": "98b0469a-fbc9-4edd-95c6-141428565d54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contact_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "7de5756a-46c7-495d-92d0-fbc39d4c7c7b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "d6eabc65-32f1-47c1-9605-db204d5e43a4"
							}
						}
					],
					"id": "ad57aadb-66ea-4e1d-9ccd-91db50e38b13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6462215068\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts",
						"description": "POST - Client Contact\n\n\\`first_name\\`: \\`Joe\\` (string, required)\n\n\\`last_name\\`: \\`Schmo\\` (string, required)\n\n\\`email\\`: \\`[jschmo@email.org](mailto:jschmo@email.org)\\` (string, required)\n\n\\`phone_number\\`: \\`2345678900\\` (string, required)\n\n\\`phone_number_extension\\`: \\`123\\` (string, optional)\n\n\\`mobile_number\\`: \\`5555555555\\` (string, optional)\n\n\\`notes\\`: \\`Some notes\\` (string, optional)"
					},
					"response": []
				},
				{
					"name": "GET - Client Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"talent_id\", jsonData.data[0][\"id\"]);*/"
								],
								"type": "text/javascript",
								"id": "d16ff34b-35a1-4616-84c2-ed9909e05057"
							}
						}
					],
					"id": "37b5eee1-7bf9-4ade-8098-37aadffbb18e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "POST - Client Contact(optional fields, mobile # already used - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "dd189cfc-ff65-4b29-b36d-cc7424dc1540"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "47e51e60-8017-429c-9672-72aa28c17e1a"
							}
						}
					],
					"id": "e4647d7a-f607-4edb-8fcf-6e1847c0d85d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontact{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"123\",\r\n    \"mobile_number\": \"6462215068\",\r\n    \"notes\": \"testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(name already taken - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"first_name has already been taken\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "586257b7-0516-4b10-a3d7-20b72bb9e294"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "1334c8b5-f9c6-48e1-87a7-5dc75a0b314e"
							}
						}
					],
					"id": "3aa26017-a2b6-4bce-9505-7a053d4ed3f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(invalid phone # format - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"phone_number Enter 3-digit area code and 7-digit number only\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7556390d-6aab-4fb4-bd09-48cb78ab988d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "f9604d2d-d9d6-4609-baef-671a5f4847e2"
							}
						}
					],
					"id": "32074d53-1aa8-42d9-a7d3-4604d9a5cc49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"phone_number\": \"12034445555\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(invalid mobile phone # - 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"mobile_number Our phone validation service does not recognize this as a mobile number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "8ffe6fbc-5afd-4487-8132-6cb7c47dba43"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "26ae529d-71e0-446f-bb3f-f7c0add5cb4b"
							}
						}
					],
					"id": "1f034595-0583-4017-ab0f-92446bf02860",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"mobile_number\": \"6467778888\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "PATCH - Client Contact(all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"contact_id\", jsonData.data[\"id\"]);"
								],
								"type": "text/javascript",
								"id": "4ca6fcd0-731a-49cb-abe3-c97277aa4e68"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "4c06577a-c81d-4a52-944e-1db657feebeb"
							}
						}
					],
					"id": "3cf6a81a-2fbe-4746-bfae-2c6c5e6aa393",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Platform\",\r\n    \"last_name\": \"Test{{number}}\",\r\n    \"email\": \"adrian.allen+clientcontract{{number}}@kamana.com\",\r\n    \"phone_number\": \"2034445555\",\r\n    \"phone_number_extension\": \"321\",\r\n    \"mobile_number\": \"6462219259\",\r\n    \"notes\": \"patch testing\"\r\n}"
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "Delete - Client Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5ea666d6-e678-4721-9667-21983ace4353"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "6c5855a0-6142-44ac-9532-b6cb2da9b27e"
							}
						}
					],
					"id": "982ecb0b-8c5d-49fb-a133-4610d445fa29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				},
				{
					"name": "Delete - Client Contact(Contact doesn't exist - 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"The requested resource could not be found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "249de452-5ace-43a5-aa35-a4235d5adf05"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var num = {\r",
									"  random: Math.ceil(Math.random() * 10000)\r",
									"}\r",
									"pm.variables.set('number', num.random);\r",
									"console.log(num.random)\r",
									"\r",
									"var currentDate = new Date();\r",
									"var available_on = currentDate.getFullYear() + '-' + (currentDate.getMonth()+2) + '-' + currentDate.getDate();\r",
									"pm.variables.set('available_on', available_on)\r",
									"console.log(available_on)"
								],
								"type": "text/javascript",
								"id": "15177867-b382-4bd5-abbf-e60f3e942fed"
							}
						}
					],
					"id": "675a61ac-f123-46ac-856f-195ab220e8bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}clients/{{client_id}}/contacts/{{contact_id}}"
					},
					"response": []
				}
			],
			"id": "5e359463-dc8f-4e28-a409-f9f2d47bcb99"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GET - Users(without Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "632c4e6a-d0d5-4053-82cf-b5ee8a063370"
							}
						}
					],
					"id": "9aca48a5-db0b-4633-a952-f4fef8451c2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Page Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "d2744825-ae8c-4849-97d9-fea091a19eac"
							}
						}
					],
					"id": "e572b967-6e4f-4e4d-a1d3-ed7ec13b0395",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?page[number]=1&page[size]=5",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Field Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "bdff3ab8-90cb-4521-8d93-36bda4c335fa"
							}
						}
					],
					"id": "11b336d1-473d-4a4b-896f-14797e7b204f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?fields=email,status",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2"
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Sort Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "1fcf3ae1-ae5f-4b9f-9b0b-d70b9e64c1d0"
							}
						}
					],
					"id": "ea4c8737-41a1-4886-9d52-ff584cba93f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?sort=email",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with Filter Parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "b85af0d4-73dd-4383-b552-46189a6dfd39"
							}
						}
					],
					"id": "e530c540-ec8a-4301-9c39-40c1cc533ef1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[id]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec179",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "email,status",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec179",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Field Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "f804f22a-81fc-426e-a659-5e7caf8f494f"
							}
						}
					],
					"id": "d121d4fd-93cf-4e80-9dca-d60f83cddcf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?fields=name,type",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2"
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Filter Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields:\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "9d5f2b5b-d5a8-4dbd-a77d-278217434787"
							}
						}
					],
					"id": "fd055b94-7fc1-4461-a2a2-587b3877a664",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[ids]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[ids]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid ID for Filter Parameter 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Bad Request\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "d21db10a-1475-40b2-a78d-460b703f7c67"
							}
						}
					],
					"id": "4dd7d51d-d955-4bfa-8b71-fa6464808855",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?filter[id]=eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Sort Parameters 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid sort\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ef2a7756-6ac1-4f94-b78a-fe9f29e4a078"
							}
						}
					],
					"id": "fea50606-62ed-4610-a124-d18260dfa73b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?sort=name",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "name",
									"description": "sort=some_field"
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Users(with invalid Page Parameters 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"page_number must be greater than 0\");\r",
									"})\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[1].detail).to.include(\"page_size must be greater than 0\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "19c82bd0-74a1-4efe-ba35-bd846475084f"
							}
						}
					],
					"id": "d894f01e-af5d-47f8-b11f-7e80cd977cd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}users?page[number]=0&page[size]=0",
							"host": [
								"{{url}}users"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "0",
									"description": "page[number]=1"
								},
								{
									"key": "page[size]",
									"value": "0",
									"description": "page[size]=10"
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "name",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "eb6d9d14-7fb3-4489-b0ef-8cb6dd1ec17z",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "87669231-5df8-4c10-a19f-d08f79e99066"
		},
		{
			"name": "References",
			"item": [
				{
					"name": "GET - References",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let length = jsonData.data.length;\r",
									"var json = {\r",
									"  random: Math.ceil(Math.random() * length)\r",
									"}\r",
									"var reference_id = jsonData.data[json.random].id;\r",
									"pm.environment.set(\"reference_id\", reference_id)\r",
									"\r",
									"console.log(length)\r",
									"console.log(\"reference_id: \"+reference_id)"
								],
								"type": "text/javascript",
								"id": "f367fc3e-8eba-4616-86ac-a144c509df12"
							}
						}
					],
					"id": "1ffcd575-f15e-4154-9010-bd79848713ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references",
							"host": [
								"{{url}}references"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "2",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "0affda9e-0c99-4166-96e0-94ee1b048a3a"
							}
						}
					],
					"id": "430c89a4-98d5-4f16-8e9b-85be2078e003",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/{{reference_id}}",
							"host": [
								"{{url}}references"
							],
							"path": [
								"{{reference_id}}"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference(bad id, 400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "d47dac5a-4a9c-4dd8-a5d0-57d9b6ab77bd"
							}
						}
					],
					"id": "b5a9c290-6403-45e9-b7ba-8afdeb480bb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/{{reference_id}}",
							"host": [
								"{{url}}references"
							],
							"path": [
								"{{reference_id}}"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Reference(bad id, 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"/*var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Test error code detail\", () => {\r",
									"    pm.expect(jsonData.errors[0].detail).to.include(\"Invalid fields: name, type\");\r",
									"})*/"
								],
								"type": "text/javascript",
								"id": "66fd1d60-9e6b-41e3-928a-d2453a25c87e"
							}
						}
					],
					"id": "9adff24f-d79f-4b2a-bfc0-6dbe792dc61e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v2+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}references/386ab9c3-4179-4a5a-a19c-84d3cd3e4f10",
							"host": [
								"{{url}}references"
							],
							"path": [
								"386ab9c3-4179-4a5a-a19c-84d3cd3e4f10"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "page[number]=1",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"description": "page[size]=10",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name,type",
									"description": "fields=field1,field2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "email",
									"description": "sort=some_field",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"description": "sort=-some_field",
									"disabled": true
								},
								{
									"key": "filter[id]",
									"value": "a9fd6b84-4a7d-4f9a-97f2-f85c7a300335",
									"description": "filter[some_field]=value",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "e651305c-f14b-4432-a335-2f6190e61b84"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{UAT_Token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "0d9f30a8-b422-46f8-9992-409cbf0de34f"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "1fc90fd2-5891-483c-9ad6-6958ccdd12dc"
			}
		}
	],
	"variable": [
		{
			"key": "engagement_id",
			"value": "1a82e944-b9fa-4ee4-b67b-97c27aace402",
			"type": "string"
		},
		{
			"key": "extension_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "engagement_link_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "note_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "engagement_requirement_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "facilities_include",
			"value": "province",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Newest Baptist Hospital",
			"type": "string"
		},
		{
			"key": "street",
			"value": "8904 N Kendall Dr",
			"type": "string"
		},
		{
			"key": "city",
			"value": "Miami",
			"type": "string"
		},
		{
			"key": "postal_code",
			"value": "33176",
			"type": "string"
		},
		{
			"key": "province_id",
			"value": "00be976a-0ab2-46c6-b80f-9638eff4dc7b",
			"type": "string"
		},
		{
			"key": "facilities_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "profession_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "specialty_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "facility_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "status",
			"value": "open",
			"type": "string"
		},
		{
			"key": "search",
			"value": "",
			"type": "string"
		},
		{
			"key": "after",
			"value": "",
			"type": "string"
		},
		{
			"key": "include",
			"value": "creator",
			"type": "string"
		},
		{
			"key": "job_requisition_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "STG_Token",
			"value": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJrYW1hbmEiLCJleHAiOjE2ODE4MzU5MzcsImlhdCI6MTY3NDA1OTkzNywiaXNzIjoia2FtYW5hIiwianRpIjoiMWI3N2FiM2EtZmVjNS00YmFjLWJkYmItZDg5MmQ3OGRkNTc2IiwibmJmIjoxNjc0MDU5OTM2LCJzdWIiOiIwOGUzMjMwNC1jZWZkLTRhYzktODBlMS04NmI0YjVmNjI4ZmIiLCJ0eXAiOiJhY2Nlc3MiLCJ1cGlkIjoiZWU5N2ZhNGQtZGZmYS00YzU2LTkxNzUtNzU0NzUxNjJmZDBhIn0.DehYPtXk72TZ9uuv8L4jYL4YWHqq6AeUdClrHfDTjkqUQbjICm8ycrSDHGZaOFZpLzZBUx8psr8bkD7ixKwEAg"
		},
		{
			"key": "client_id",
			"value": "6d386fbb-40f8-4b17-8457-a837e6db737c"
		}
	]
}